<?php

namespace ContainerFxfaa0e;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class Shopware_Core_KernelProdContainer extends Container
{
    protected $containerDir;
    protected $targetDir;
    protected $parameters = [];
    private $buildParameters;
    protected $getService;

    public function __construct(array $buildParameters = [], $containerDir = __DIR__)
    {
        $this->getService = \Closure::fromCallable([$this, 'getService']);
        $this->buildParameters = $buildParameters;
        $this->containerDir = $containerDir;
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            '.container.private.cache_clearer' => 'get_Container_Private_CacheClearerService',
            '.container.private.filesystem' => 'get_Container_Private_FilesystemService',
            '.container.private.security.csrf.token_manager' => 'get_Container_Private_Security_Csrf_TokenManagerService',
            '.container.private.serializer' => 'get_Container_Private_SerializerService',
            '.container.private.session' => 'get_Container_Private_SessionService',
            '.container.private.twig' => 'get_Container_Private_TwigService',
            '.container.private.validator' => 'get_Container_Private_ValidatorService',
            'Doctrine\\DBAL\\Connection' => 'getConnectionService',
            'Elasticsearch\\Client' => 'getClientService',
            'Shopware\\Administration\\Controller\\AdminExtensionApiController' => 'getAdminExtensionApiControllerService',
            'Shopware\\Administration\\Controller\\AdminProductStreamController' => 'getAdminProductStreamControllerService',
            'Shopware\\Administration\\Controller\\AdminSearchController' => 'getAdminSearchControllerService',
            'Shopware\\Administration\\Controller\\AdminTagController' => 'getAdminTagControllerService',
            'Shopware\\Administration\\Controller\\AdministrationController' => 'getAdministrationControllerService',
            'Shopware\\Administration\\Controller\\DocumentServiceDeprecationController' => 'getDocumentServiceDeprecationControllerService',
            'Shopware\\Administration\\Controller\\NotificationController' => 'getNotificationControllerService',
            'Shopware\\Administration\\Controller\\UserConfigController' => 'getUserConfigControllerService',
            'Shopware\\Administration\\Notification\\NotificationDefinition' => 'getNotificationDefinitionService',
            'Shopware\\Administration\\Notification\\NotificationService' => 'getNotificationServiceService',
            'Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition' => 'getAppAdministrationSnippetDefinitionService',
            'Shopware\\Core\\Checkout\\Cart\\Calculator' => 'getCalculatorService',
            'Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHookFactory' => 'getCartFacadeHookFactoryService',
            'Shopware\\Core\\Checkout\\Cart\\Order\\Api\\OrderConverterController' => 'getOrderConverterControllerService',
            'Shopware\\Core\\Checkout\\Cart\\Order\\Api\\OrderRecalculationController' => 'getOrderRecalculationControllerService',
            'Shopware\\Core\\Checkout\\Cart\\PriceActionController' => 'getPriceActionControllerService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute' => 'getCartDeleteRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute' => 'getCartItemAddRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute' => 'getCartItemRemoveRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute' => 'getCartItemUpdateRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute' => 'getCartLoadRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute' => 'getCartOrderRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService' => 'getCartServiceService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition' => 'getCustomerAddressDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition' => 'getCustomerGroupRegistrationSalesChannelDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition' => 'getCustomerGroupTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition' => 'getCustomerGroupDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition' => 'getCustomerRecoveryDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition' => 'getCustomerTagDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition' => 'getCustomerWishlistProductDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition' => 'getCustomerWishlistDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Api\\CustomerGroupRegistrationActionController' => 'getCustomerGroupRegistrationActionControllerService',
            'Shopware\\Core\\Checkout\\Customer\\CustomerDefinition' => 'getCustomerDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountNewsletterRecipientRoute' => 'getAccountNewsletterRecipientRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AddWishlistProductRoute' => 'getAddWishlistProductRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeCustomerProfileRoute' => 'getChangeCustomerProfileRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeEmailRoute' => 'getChangeEmailRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeLanguageRoute' => 'getChangeLanguageRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePasswordRoute' => 'getChangePasswordRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePaymentMethodRoute' => 'getChangePaymentMethodRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerGroupRegistrationSettingsRoute' => 'getCustomerGroupRegistrationSettingsRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRecoveryIsExpiredRoute' => 'getCustomerRecoveryIsExpiredRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRoute' => 'getCustomerRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteAddressRoute' => 'getDeleteAddressRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteCustomerRoute' => 'getDeleteCustomerRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DownloadRoute' => 'getDownloadRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ListAddressRoute' => 'getListAddressRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoadWishlistRoute' => 'getLoadWishlistRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoginRoute' => 'getLoginRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute' => 'getLogoutRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\MergeWishlistProductRoute' => 'getMergeWishlistProductRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterConfirmRoute' => 'getRegisterConfirmRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterRoute' => 'getRegisterRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RemoveWishlistProductRoute' => 'getRemoveWishlistProductRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ResetPasswordRoute' => 'getResetPasswordRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SendPasswordRecoveryMailRoute' => 'getSendPasswordRecoveryMailRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute' => 'getSwitchDefaultAddressRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\UpsertAddressRoute' => 'getUpsertAddressRouteService',
            'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition' => 'getDocumentBaseConfigSalesChannelDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition' => 'getDocumentBaseConfigDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition' => 'getDocumentTypeTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition' => 'getDocumentTypeDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\Controller\\DocumentController' => 'getDocumentControllerService',
            'Shopware\\Core\\Checkout\\Document\\DocumentDefinition' => 'getDocumentDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\DocumentGeneratorController' => 'getDocumentGeneratorControllerService',
            'Shopware\\Core\\Checkout\\Document\\SalesChannel\\DocumentRoute' => 'getDocumentRouteService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition' => 'getOrderAddressDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition' => 'getOrderCustomerDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition' => 'getOrderDeliveryPositionDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition' => 'getOrderDeliveryDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition' => 'getOrderLineItemDownloadDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition' => 'getOrderLineItemDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition' => 'getOrderTagDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition' => 'getOrderTransactionCaptureRefundPositionDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition' => 'getOrderTransactionCaptureRefundDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition' => 'getOrderTransactionCaptureDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition' => 'getOrderTransactionDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Api\\OrderActionController' => 'getOrderActionControllerService',
            'Shopware\\Core\\Checkout\\Order\\OrderDefinition' => 'getOrderDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\SalesChannel\\CancelOrderRoute' => 'getCancelOrderRouteService',
            'Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute' => 'getOrderRouteService',
            'Shopware\\Core\\Checkout\\Order\\SalesChannel\\SetPaymentOrderRoute' => 'getSetPaymentOrderRouteService',
            'Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition' => 'getPaymentMethodTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentRefundProcessor' => 'getPaymentRefundProcessorService',
            'Shopware\\Core\\Checkout\\Payment\\Controller\\PaymentController' => 'getPaymentControllerService',
            'Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition' => 'getPaymentMethodDefinitionService',
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute' => 'getCachedPaymentMethodRouteService',
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\HandlePaymentMethodRoute' => 'getHandlePaymentMethodRouteService',
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition' => 'getSalesChannelPaymentMethodDefinitionService',
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute' => 'getSortedPaymentMethodRouteService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition' => 'getPromotionCartRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition' => 'getPromotionDiscountPriceDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition' => 'getPromotionDiscountRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition' => 'getPromotionDiscountDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition' => 'getPromotionIndividualCodeDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition' => 'getPromotionOrderRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition' => 'getPromotionPersonaCustomerDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition' => 'getPromotionPersonaRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition' => 'getPromotionSalesChannelDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition' => 'getPromotionSetGroupRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition' => 'getPromotionSetGroupDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition' => 'getPromotionTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Api\\PromotionActionController' => 'getPromotionActionControllerService',
            'Shopware\\Core\\Checkout\\Promotion\\Api\\PromotionController' => 'getPromotionControllerService',
            'Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition' => 'getPromotionDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition' => 'getShippingMethodPriceDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition' => 'getShippingMethodTagDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition' => 'getShippingMethodTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute' => 'getCachedShippingMethodRouteService',
            'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition' => 'getSalesChannelShippingMethodDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute' => 'getSortedShippingMethodRouteService',
            'Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition' => 'getShippingMethodDefinitionService',
            'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition' => 'getCategoryTagDefinitionService',
            'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition' => 'getCategoryTranslationDefinitionService',
            'Shopware\\Core\\Content\\Category\\CategoryDefinition' => 'getCategoryDefinitionService',
            'Shopware\\Core\\Content\\Category\\CategoryHydrator' => 'getCategoryHydratorService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute' => 'getCachedCategoryRouteService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute' => 'getCachedNavigationRouteService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\CategoryListRoute' => 'getCategoryListRouteService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition' => 'getSalesChannelCategoryDefinitionService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute' => 'getTreeBuildingNavigationRouteService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition' => 'getCmsBlockDefinitionService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition' => 'getCmsPageTranslationDefinitionService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition' => 'getCmsSectionDefinitionService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition' => 'getCmsSlotTranslationDefinitionService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition' => 'getCmsSlotDefinitionService',
            'Shopware\\Core\\Content\\Cms\\CmsPageDefinition' => 'getCmsPageDefinitionService',
            'Shopware\\Core\\Content\\Cms\\DataAbstractionLayer\\FieldSerializer\\SlotConfigFieldSerializer' => 'getSlotConfigFieldSerializerService',
            'Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver' => 'getCmsSlotsDataResolverService',
            'Shopware\\Core\\Content\\Cms\\SalesChannel\\CmsRoute' => 'getCmsRouteService',
            'Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageRepository' => 'getSalesChannelCmsPageRepositoryService',
            'Shopware\\Core\\Content\\ContactForm\\SalesChannel\\ContactFormRoute' => 'getContactFormRouteService',
            'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition' => 'getFlowSequenceDefinitionService',
            'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition' => 'getFlowTemplateDefinitionService',
            'Shopware\\Core\\Content\\Flow\\DataAbstractionLayer\\FieldSerializer\\FlowTemplateConfigFieldSerializer' => 'getFlowTemplateConfigFieldSerializerService',
            'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader' => 'getCachedFlowLoaderService',
            'Shopware\\Core\\Content\\Flow\\Dispatching\\FlowExecutor' => 'getFlowExecutorService',
            'Shopware\\Core\\Content\\Flow\\Dispatching\\FlowFactory' => 'getFlowFactoryService',
            'Shopware\\Core\\Content\\Flow\\FlowDefinition' => 'getFlowDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition' => 'getImportExportFileDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition' => 'getImportExportLogDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\Controller\\ImportExportActionController' => 'getImportExportActionControllerService',
            'Shopware\\Core\\Content\\ImportExport\\ImportExportFactory' => 'getImportExportFactoryService',
            'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition' => 'getImportExportProfileDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition' => 'getImportExportProfileTranslationDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler' => 'getImportExportHandlerService',
            'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition' => 'getLandingPageSalesChannelDefinitionService',
            'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition' => 'getLandingPageTagDefinitionService',
            'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition' => 'getLandingPageTranslationDefinitionService',
            'Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition' => 'getLandingPageDefinitionService',
            'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\CachedLandingPageRoute' => 'getCachedLandingPageRouteService',
            'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition' => 'getSalesChannelLandingPageDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition' => 'getMailHeaderFooterTranslationDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition' => 'getMailHeaderFooterDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition' => 'getMailTemplateMediaDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition' => 'getMailTemplateTranslationDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition' => 'getMailTemplateTypeTranslationDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition' => 'getMailTemplateTypeDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Api\\MailActionController' => 'getMailActionControllerService',
            'Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition' => 'getMailTemplateDefinitionService',
            'Shopware\\Core\\Content\\Mail\\Service\\MailFactory' => 'getMailFactoryService',
            'Shopware\\Core\\Content\\Mail\\Service\\MailSender' => 'getMailSenderService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition' => 'getMediaDefaultFolderDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition' => 'getMediaFolderConfigurationMediaThumbnailSizeDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition' => 'getMediaFolderConfigurationDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition' => 'getMediaFolderDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition' => 'getMediaTagDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition' => 'getMediaThumbnailSizeDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition' => 'getMediaThumbnailDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition' => 'getMediaTranslationDefinitionService',
            'Shopware\\Core\\Content\\Media\\Api\\MediaFolderController' => 'getMediaFolderControllerService',
            'Shopware\\Core\\Content\\Media\\Api\\MediaUploadController' => 'getMediaUploadControllerService',
            'Shopware\\Core\\Content\\Media\\File\\FileSaver' => 'getFileSaverService',
            'Shopware\\Core\\Content\\Media\\MediaDefinition' => 'getMediaDefinitionService',
            'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition' => 'getNewsletterRecipientTagDefinitionService',
            'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition' => 'getNewsletterRecipientDefinitionService',
            'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterConfirmRoute' => 'getNewsletterConfirmRouteService',
            'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute' => 'getNewsletterSubscribeRouteService',
            'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute' => 'getNewsletterUnsubscribeRouteService',
            'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition' => 'getSalesChannelNewsletterRecipientDefinitionService',
            'Shopware\\Core\\Content\\ProductExport\\Api\\ProductExportController' => 'getProductExportControllerService',
            'Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition' => 'getProductExportDefinitionService',
            'Shopware\\Core\\Content\\ProductExport\\ProductExportHydrator' => 'getProductExportHydratorService',
            'Shopware\\Core\\Content\\ProductExport\\SalesChannel\\ExportController' => 'getExportControllerService',
            'Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator' => 'getProductExportGeneratorService',
            'Shopware\\Core\\Content\\ProductExport\\Service\\ProductExporter' => 'getProductExporterService',
            'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition' => 'getProductStreamFilterDefinitionService',
            'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterHydrator' => 'getProductStreamFilterHydratorService',
            'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition' => 'getProductStreamTranslationDefinitionService',
            'Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition' => 'getProductStreamDefinitionService',
            'Shopware\\Core\\Content\\ProductStream\\ProductStreamHydrator' => 'getProductStreamHydratorService',
            'Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder' => 'getProductStreamBuilderService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition' => 'getProductCategoryTreeDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition' => 'getProductCategoryDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition' => 'getProductConfiguratorSettingDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingHydrator' => 'getProductConfiguratorSettingHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition' => 'getProductCrossSellingAssignedProductsDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsHydrator' => 'getProductCrossSellingAssignedProductsHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition' => 'getProductCrossSellingTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition' => 'getProductCrossSellingDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingHydrator' => 'getProductCrossSellingHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition' => 'getProductCustomFieldSetDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition' => 'getProductDownloadDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition' => 'getProductFeatureSetTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition' => 'getProductFeatureSetDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetHydrator' => 'getProductFeatureSetHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition' => 'getProductKeywordDictionaryDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryHydrator' => 'getProductKeywordDictionaryHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition' => 'getProductManufacturerTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition' => 'getProductManufacturerDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerHydrator' => 'getProductManufacturerHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition' => 'getProductMediaDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaHydrator' => 'getProductMediaHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition' => 'getProductOptionDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition' => 'getProductPriceDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceHydrator' => 'getProductPriceHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition' => 'getProductPropertyDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition' => 'getProductReviewDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewHydrator' => 'getProductReviewHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition' => 'getProductSearchConfigFieldDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldHydrator' => 'getProductSearchConfigFieldHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition' => 'getProductSearchConfigDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigHydrator' => 'getProductSearchConfigHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition' => 'getProductSearchKeywordDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordHydrator' => 'getProductSearchKeywordHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition' => 'getProductStreamMappingDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition' => 'getProductTagDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition' => 'getProductTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition' => 'getProductVisibilityDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityHydrator' => 'getProductVisibilityHydratorService',
            'Shopware\\Core\\Content\\Product\\Api\\ProductActionController' => 'getProductActionControllerService',
            'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\CheapestPrice\\CheapestPriceAccessorBuilder' => 'getCheapestPriceAccessorBuilderService',
            'Shopware\\Core\\Content\\Product\\ProductDefinition' => 'getProductDefinitionService',
            'Shopware\\Core\\Content\\Product\\ProductHydrator' => 'getProductHydratorService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute' => 'getCachedProductCrossSellingRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute' => 'getCachedProductDetailRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute' => 'getFindProductVariantRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute' => 'getCachedProductListingRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute' => 'getResolveCriteriaProductListingRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\ProductListRoute' => 'getProductListRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute' => 'getCachedProductReviewRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\ProductReviewSaveRoute' => 'getProductReviewSaveRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition' => 'getSalesChannelProductDefinitionService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\CachedProductSearchRoute' => 'getCachedProductSearchRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute' => 'getResolvedCriteriaProductSearchRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition' => 'getProductSortingDefinitionService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingHydrator' => 'getProductSortingHydratorService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition' => 'getProductSortingTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\CachedProductSuggestRoute' => 'getCachedProductSuggestRouteService',
            'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition' => 'getPropertyGroupOptionTranslationDefinitionService',
            'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition' => 'getPropertyGroupOptionDefinitionService',
            'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionHydrator' => 'getPropertyGroupOptionHydratorService',
            'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition' => 'getPropertyGroupTranslationDefinitionService',
            'Shopware\\Core\\Content\\Property\\PropertyGroupDefinition' => 'getPropertyGroupDefinitionService',
            'Shopware\\Core\\Content\\Property\\PropertyGroupHydrator' => 'getPropertyGroupHydratorService',
            'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition' => 'getRuleConditionDefinitionService',
            'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition' => 'getRuleTagDefinitionService',
            'Shopware\\Core\\Content\\Rule\\RuleDefinition' => 'getRuleDefinitionService',
            'Shopware\\Core\\Content\\Seo\\Api\\SeoActionController' => 'getSeoActionControllerService',
            'Shopware\\Core\\Content\\Seo\\CachedSeoResolver' => 'getCachedSeoResolverService',
            'Shopware\\Core\\Content\\Seo\\EmptyPathInfoResolver' => 'getEmptyPathInfoResolverService',
            'Shopware\\Core\\Content\\Seo\\Entity\\Dbal\\SeoUrlAssociationFieldResolver' => 'getSeoUrlAssociationFieldResolverService',
            'Shopware\\Core\\Content\\Seo\\Entity\\Serializer\\SeoUrlFieldSerializer' => 'getSeoUrlFieldSerializerService',
            'Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition' => 'getMainCategoryDefinitionService',
            'Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition' => 'getSalesChannelMainCategoryDefinitionService',
            'Shopware\\Core\\Content\\Seo\\SalesChannel\\SeoUrlRoute' => 'getSeoUrlRouteService',
            'Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface' => 'getSeoUrlPlaceholderHandlerInterfaceService',
            'Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition' => 'getSeoUrlTemplateDefinitionService',
            'Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition' => 'getSalesChannelSeoUrlDefinitionService',
            'Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition' => 'getSeoUrlDefinitionService',
            'Shopware\\Core\\Content\\Sitemap\\SalesChannel\\CachedSitemapRoute' => 'getCachedSitemapRouteService',
            'Shopware\\Core\\Framework\\Adapter\\Asset\\AssetPackageService' => 'getAssetPackageServiceService',
            'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheIdLoader' => 'getCacheIdLoaderService',
            'Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\Facade\\CacheInvalidatorFacadeHookFactory' => 'getCacheInvalidatorFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\Adapter\\Twig\\AppTemplateIterator' => 'getAppTemplateIteratorService',
            'Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder' => 'getTemplateFinderService',
            'Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateIterator' => 'getTemplateIteratorService',
            'Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator' => 'getAclCriteriaValidatorService',
            'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition' => 'getAclRoleDefinitionService',
            'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition' => 'getAclUserRoleDefinitionService',
            'Shopware\\Core\\Framework\\Api\\Controller\\AccessKeyController' => 'getAccessKeyControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\AclController' => 'getAclControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\ApiController' => 'getApiControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\AuthController' => 'getAuthControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController' => 'getCacheControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\CustomSnippetFormatController' => 'getCustomSnippetFormatControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\FallbackController' => 'getFallbackControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\IndexingController' => 'getIndexingControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\InfoController' => 'getInfoControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\IntegrationController' => 'getIntegrationControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\SalesChannelProxyController' => 'getSalesChannelProxyControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\SyncController' => 'getSyncControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\UserController' => 'getUserControllerService',
            'Shopware\\Core\\Framework\\Api\\Sync\\SyncService' => 'getSyncServiceService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition' => 'getActionButtonTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition' => 'getActionButtonDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition' => 'getAppPaymentMethodDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition' => 'getAppScriptConditionTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition' => 'getAppScriptConditionDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition' => 'getAppTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition' => 'getAppCmsBlockTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition' => 'getAppCmsBlockDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition' => 'getAppFlowActionTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition' => 'getAppFlowActionDefinitionService',
            'Shopware\\Core\\Framework\\App\\Api\\AppActionController' => 'getAppActionControllerService',
            'Shopware\\Core\\Framework\\App\\Api\\AppCmsController' => 'getAppCmsControllerService',
            'Shopware\\Core\\Framework\\App\\Api\\AppUrlChangeController' => 'getAppUrlChangeControllerService',
            'Shopware\\Core\\Framework\\App\\AppDefinition' => 'getAppDefinitionService',
            'Shopware\\Core\\Framework\\App\\AppLocaleProvider' => 'getAppLocaleProviderService',
            'Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\Resolver' => 'getResolverService',
            'Shopware\\Core\\Framework\\App\\FlowAction\\AppFlowActionProvider' => 'getAppFlowActionProviderService',
            'Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider' => 'getShopIdProviderService',
            'Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition' => 'getTemplateDefinitionService',
            'Shopware\\Core\\Framework\\App\\Template\\TemplateStateService' => 'getTemplateStateServiceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator' => 'getEntityCacheKeyGeneratorService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityHydrator' => 'getEntityHydratorService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\ConfigJsonFieldAccessorBuilder' => 'getConfigJsonFieldAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\CustomFieldsAccessorBuilder' => 'getCustomFieldsAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\DefaultFieldAccessorBuilder' => 'getDefaultFieldAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\JsonFieldAccessorBuilder' => 'getJsonFieldAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\PriceFieldAccessorBuilder' => 'getPriceFieldAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\ManyToManyAssociationFieldResolver' => 'getManyToManyAssociationFieldResolverService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\ManyToOneAssociationFieldResolver' => 'getManyToOneAssociationFieldResolverService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\OneToManyAssociationFieldResolver' => 'getOneToManyAssociationFieldResolverService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\TranslationFieldResolver' => 'getTranslationFieldResolverService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\JoinGroupBuilder' => 'getJoinGroupBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry' => 'getDefinitionInstanceRegistryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory' => 'getEntityLoadedEventFactoryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\ExtensionRegistry' => 'getExtensionRegistryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\RepositoryFacadeHookFactory' => 'getRepositoryFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\RepositoryWriterFacadeHookFactory' => 'getRepositoryWriterFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\SalesChannelRepositoryFacadeHookFactory' => 'getSalesChannelRepositoryFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\BlobFieldSerializer' => 'getBlobFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\BoolFieldSerializer' => 'getBoolFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CalculatedPriceFieldSerializer' => 'getCalculatedPriceFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CartPriceFieldSerializer' => 'getCartPriceFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CashRoundingConfigFieldSerializer' => 'getCashRoundingConfigFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ConfigJsonFieldSerializer' => 'getConfigJsonFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CreatedAtFieldSerializer' => 'getCreatedAtFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CreatedByFieldSerializer' => 'getCreatedByFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer' => 'getCustomFieldsSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateFieldSerializer' => 'getDateFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateTimeFieldSerializer' => 'getDateTimeFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\EmailFieldSerializer' => 'getEmailFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\FkFieldSerializer' => 'getFkFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\FloatFieldSerializer' => 'getFloatFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\IdFieldSerializer' => 'getIdFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\IntFieldSerializer' => 'getIntFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\JsonFieldSerializer' => 'getJsonFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ListFieldSerializer' => 'getListFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\LongTextFieldSerializer' => 'getLongTextFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ManyToManyAssociationFieldSerializer' => 'getManyToManyAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ManyToOneAssociationFieldSerializer' => 'getManyToOneAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\OneToManyAssociationFieldSerializer' => 'getOneToManyAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\OneToOneAssociationFieldSerializer' => 'getOneToOneAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PHPUnserializeFieldSerializer' => 'getPHPUnserializeFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PasswordFieldSerializer' => 'getPasswordFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceDefinitionFieldSerializer' => 'getPriceDefinitionFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceFieldSerializer' => 'getPriceFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ReferenceVersionFieldSerializer' => 'getReferenceVersionFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\RemoteAddressFieldSerializer' => 'getRemoteAddressFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\StateMachineStateFieldSerializer' => 'getStateMachineStateFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\StringFieldSerializer' => 'getStringFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TaxFreeConfigFieldSerializer' => 'getTaxFreeConfigFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TimeZoneFieldSerializer' => 'getTimeZoneFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TranslatedFieldSerializer' => 'getTranslatedFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TranslationsAssociationFieldSerializer' => 'getTranslationsAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\UpdatedAtFieldSerializer' => 'getUpdatedAtFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\UpdatedByFieldSerializer' => 'getUpdatedByFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VariantListingConfigFieldSerializer' => 'getVariantListingConfigFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VersionDataPayloadFieldSerializer' => 'getVersionDataPayloadFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VersionFieldSerializer' => 'getVersionFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry' => 'getEntityIndexerRegistryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface' => 'getEntityReaderInterfaceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface' => 'getEntityAggregatorInterfaceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface' => 'getEntitySearcherInterfaceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager' => 'getVersionManagerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition' => 'getVersionCommitDataDefinitionService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition' => 'getVersionCommitDefinitionService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition' => 'getVersionDefinitionService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface' => 'getEntityWriteGatewayInterfaceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter' => 'getEntityWriterService',
            'Shopware\\Core\\Framework\\Event\\BusinessEventRegistry' => 'getBusinessEventRegistryService',
            'Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionRule\\EventActionRuleDefinition' => 'getEventActionRuleDefinitionService',
            'Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionSalesChannel\\EventActionSalesChannelDefinition' => 'getEventActionSalesChannelDefinitionService',
            'Shopware\\Core\\Framework\\Event\\EventAction\\EventActionDefinition' => 'getEventActionDefinitionService',
            'Shopware\\Core\\Framework\\Increment\\Controller\\IncrementApiController' => 'getIncrementApiControllerService',
            'Shopware\\Core\\Framework\\Log\\LogEntryDefinition' => 'getLogEntryDefinitionService',
            'Shopware\\Core\\Framework\\MessageQueue\\Api\\ConsumeMessagesController' => 'getConsumeMessagesControllerService',
            'Shopware\\Core\\Framework\\MessageQueue\\DeadMessage\\DeadMessageDefinition' => 'getDeadMessageDefinitionService',
            'Shopware\\Core\\Framework\\MessageQueue\\MessageQueueStatsDefinition' => 'getMessageQueueStatsDefinitionService',
            'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Api\\ScheduledTaskController' => 'getScheduledTaskControllerService',
            'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition' => 'getScheduledTaskDefinitionService',
            'Shopware\\Core\\Framework\\Migration\\Api\\MigrationController' => 'getMigrationControllerService',
            'Shopware\\Core\\Framework\\Migration\\IndexerQueuer' => 'getIndexerQueuerService',
            'Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader' => 'getMigrationCollectionLoaderService',
            'Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition' => 'getPluginTranslationDefinitionService',
            'Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection' => 'getKernelPluginCollectionService',
            'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader' => 'getKernelPluginLoaderService',
            'Shopware\\Core\\Framework\\Plugin\\PluginDefinition' => 'getPluginDefinitionService',
            'Shopware\\Core\\Framework\\Plugin\\Util\\PluginIdProvider' => 'getPluginIdProviderService',
            'Shopware\\Core\\Framework\\Routing\\CanonicalRedirectService' => 'getCanonicalRedirectServiceService',
            'Shopware\\Core\\Framework\\Routing\\RequestTransformerInterface' => 'getRequestTransformerInterfaceService',
            'Shopware\\Core\\Framework\\Rule\\Api\\RuleConfigController' => 'getRuleConfigControllerService',
            'Shopware\\Core\\Framework\\Script\\Api\\ScriptApiRoute' => 'getScriptApiRouteService',
            'Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseFactoryFacadeHookFactory' => 'getScriptResponseFactoryFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\Script\\Api\\ScriptStoreApiRoute' => 'getScriptStoreApiRouteService',
            'Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor' => 'getScriptExecutorService',
            'Shopware\\Core\\Framework\\Script\\ScriptDefinition' => 'getScriptDefinitionService',
            'Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreActionsController' => 'getExtensionStoreActionsControllerService',
            'Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreDataController' => 'getExtensionStoreDataControllerService',
            'Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreLicensesController' => 'getExtensionStoreLicensesControllerService',
            'Shopware\\Core\\Framework\\Store\\Api\\FirstRunWizardController' => 'getFirstRunWizardControllerService',
            'Shopware\\Core\\Framework\\Store\\Api\\StoreController' => 'getStoreControllerService',
            'Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider' => 'getStoreRequestOptionsProviderService',
            'Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware' => 'getShopSecretInvalidMiddlewareService',
            'Shopware\\Core\\Framework\\Store\\Services\\StoreSessionExpiredMiddleware' => 'getStoreSessionExpiredMiddlewareService',
            'Shopware\\Core\\Framework\\Store\\Services\\VerifyResponseSignatureMiddleware' => 'getVerifyResponseSignatureMiddlewareService',
            'Shopware\\Core\\Framework\\Update\\Api\\UpdateController' => 'getUpdateControllerService',
            'Shopware\\Core\\Framework\\Util\\HtmlSanitizer' => 'getHtmlSanitizerService',
            'Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition' => 'getWebhookEventLogDefinitionService',
            'Shopware\\Core\\Framework\\Webhook\\WebhookDefinition' => 'getWebhookDefinitionService',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Service\\SalesChannelCreator' => 'getSalesChannelCreatorService',
            'Shopware\\Core\\Maintenance\\User\\Service\\UserProvisioner' => 'getUserProvisionerService',
            'Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition' => 'getCountryStateTranslationDefinitionService',
            'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition' => 'getCountryStateDefinitionService',
            'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition' => 'getSalesChannelCountryStateDefinitionService',
            'Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition' => 'getCountryTranslationDefinitionService',
            'Shopware\\Core\\System\\Country\\CountryDefinition' => 'getCountryDefinitionService',
            'Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute' => 'getCachedCountryRouteService',
            'Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryStateRoute' => 'getCachedCountryStateRouteService',
            'Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition' => 'getSalesChannelCountryDefinitionService',
            'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition' => 'getCurrencyCountryRoundingDefinitionService',
            'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition' => 'getCurrencyTranslationDefinitionService',
            'Shopware\\Core\\System\\Currency\\CurrencyDefinition' => 'getCurrencyDefinitionService',
            'Shopware\\Core\\System\\Currency\\CurrencyFormatter' => 'getCurrencyFormatterService',
            'Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute' => 'getCachedCurrencyRouteService',
            'Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition' => 'getSalesChannelCurrencyDefinitionService',
            'Shopware\\Core\\System\\CustomEntity\\Api\\CustomEntityApiController' => 'getCustomEntityApiControllerService',
            'Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition' => 'getCustomEntityDefinitionService',
            'Shopware\\Core\\System\\CustomEntity\\CustomEntityRegistrar' => 'getCustomEntityRegistrarService',
            'Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntitySchemaUpdater' => 'getCustomEntitySchemaUpdaterService',
            'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition' => 'getCustomFieldSetRelationDefinitionService',
            'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition' => 'getCustomFieldSetDefinitionService',
            'Shopware\\Core\\System\\CustomField\\Api\\CustomFieldSetActionController' => 'getCustomFieldSetActionControllerService',
            'Shopware\\Core\\System\\CustomField\\CustomFieldDefinition' => 'getCustomFieldDefinitionService',
            'Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition' => 'getDeliveryTimeTranslationDefinitionService',
            'Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition' => 'getDeliveryTimeDefinitionService',
            'Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition' => 'getIntegrationRoleDefinitionService',
            'Shopware\\Core\\System\\Integration\\IntegrationDefinition' => 'getIntegrationDefinitionService',
            'Shopware\\Core\\System\\Language\\LanguageDefinition' => 'getLanguageDefinitionService',
            'Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute' => 'getCachedLanguageRouteService',
            'Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition' => 'getSalesChannelLanguageDefinitionService',
            'Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition' => 'getLocaleTranslationDefinitionService',
            'Shopware\\Core\\System\\Locale\\LocaleDefinition' => 'getLocaleDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition' => 'getNumberRangeSalesChannelDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition' => 'getNumberRangeStateDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition' => 'getNumberRangeTranslationDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition' => 'getNumberRangeTypeTranslationDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition' => 'getNumberRangeTypeDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Api\\NumberRangeController' => 'getNumberRangeControllerService',
            'Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition' => 'getNumberRangeDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface' => 'getNumberRangeValueGeneratorInterfaceService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition' => 'getSalesChannelAnalyticsDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition' => 'getSalesChannelCountryDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition' => 'getSalesChannelCurrencyDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition' => 'getSalesChannelDomainDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition' => 'getSalesChannelLanguageDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition' => 'getSalesChannelPaymentMethodDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition' => 'getSalesChannelShippingMethodDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition' => 'getSalesChannelTranslationDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition' => 'getSalesChannelTypeTranslationDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition' => 'getSalesChannelTypeDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory' => 'getSalesChannelContextFactoryService',
            'Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry' => 'getSalesChannelDefinitionInstanceRegistryService',
            'Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition' => 'getSalesChannelDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute' => 'getContextSwitchRouteService',
            'Shopware\\Core\\System\\SalesChannel\\SalesChannel\\StoreApiInfoController' => 'getStoreApiInfoControllerService',
            'Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition' => 'getSalutationTranslationDefinitionService',
            'Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute' => 'getCachedSalutationRouteService',
            'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition' => 'getSalesChannelSalutationDefinitionService',
            'Shopware\\Core\\System\\Salutation\\SalutationDefinition' => 'getSalutationDefinitionService',
            'Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition' => 'getSnippetSetDefinitionService',
            'Shopware\\Core\\System\\Snippet\\Api\\SnippetController' => 'getSnippetControllerService',
            'Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection' => 'getSnippetFileCollectionService',
            'Shopware\\Core\\System\\Snippet\\Filter\\SnippetFilterFactory' => 'getSnippetFilterFactoryService',
            'Shopware\\Core\\System\\Snippet\\SnippetDefinition' => 'getSnippetDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition' => 'getStateMachineHistoryDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition' => 'getStateMachineStateDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition' => 'getStateMachineStateTranslationDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition' => 'getStateMachineTransitionDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Api\\StateMachineActionController' => 'getStateMachineActionControllerService',
            'Shopware\\Core\\System\\StateMachine\\StateMachineDefinition' => 'getStateMachineDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition' => 'getStateMachineTranslationDefinitionService',
            'Shopware\\Core\\System\\SystemConfig\\Api\\SystemConfigController' => 'getSystemConfigControllerService',
            'Shopware\\Core\\System\\SystemConfig\\Facade\\SystemConfigFacadeHookFactory' => 'getSystemConfigFacadeHookFactoryService',
            'Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition' => 'getSystemConfigDefinitionService',
            'Shopware\\Core\\System\\SystemConfig\\SystemConfigService' => 'getSystemConfigServiceService',
            'Shopware\\Core\\System\\Tag\\Service\\FilterTagIdsService' => 'getFilterTagIdsServiceService',
            'Shopware\\Core\\System\\Tag\\TagDefinition' => 'getTagDefinitionService',
            'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition' => 'getTaxRuleTypeTranslationDefinitionService',
            'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition' => 'getTaxRuleTypeDefinitionService',
            'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition' => 'getTaxRuleDefinitionService',
            'Shopware\\Core\\System\\Tax\\TaxDefinition' => 'getTaxDefinitionService',
            'Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition' => 'getUnitTranslationDefinitionService',
            'Shopware\\Core\\System\\Unit\\UnitDefinition' => 'getUnitDefinitionService',
            'Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition' => 'getUserAccessKeyDefinitionService',
            'Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition' => 'getUserConfigDefinitionService',
            'Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition' => 'getUserRecoveryDefinitionService',
            'Shopware\\Core\\System\\User\\Api\\UserRecoveryController' => 'getUserRecoveryControllerService',
            'Shopware\\Core\\System\\User\\Api\\UserValidationController' => 'getUserValidationControllerService',
            'Shopware\\Core\\System\\User\\UserDefinition' => 'getUserDefinitionService',
            'Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper' => 'getAdminElasticsearchHelperService',
            'Shopware\\Elasticsearch\\Admin\\AdminSearchController' => 'getAdminSearchController2Service',
            'Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper' => 'getElasticsearchHelperService',
            'Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler' => 'getCreateAliasTaskHandlerService',
            'Shopware\\Storefront\\Controller\\AccountOrderController' => 'getAccountOrderControllerService',
            'Shopware\\Storefront\\Controller\\AccountPaymentController' => 'getAccountPaymentControllerService',
            'Shopware\\Storefront\\Controller\\AccountProfileController' => 'getAccountProfileControllerService',
            'Shopware\\Storefront\\Controller\\AddressController' => 'getAddressControllerService',
            'Shopware\\Storefront\\Controller\\Api\\CaptchaController' => 'getCaptchaControllerService',
            'Shopware\\Storefront\\Controller\\AuthController' => 'getAuthController2Service',
            'Shopware\\Storefront\\Controller\\CaptchaController' => 'getCaptchaController2Service',
            'Shopware\\Storefront\\Controller\\CartLineItemController' => 'getCartLineItemControllerService',
            'Shopware\\Storefront\\Controller\\CheckoutController' => 'getCheckoutControllerService',
            'Shopware\\Storefront\\Controller\\CmsController' => 'getCmsControllerService',
            'Shopware\\Storefront\\Controller\\ContextController' => 'getContextControllerService',
            'Shopware\\Storefront\\Controller\\CookieController' => 'getCookieControllerService',
            'Shopware\\Storefront\\Controller\\CountryStateController' => 'getCountryStateControllerService',
            'Shopware\\Storefront\\Controller\\CsrfController' => 'getCsrfControllerService',
            'Shopware\\Storefront\\Controller\\DocumentController' => 'getDocumentController2Service',
            'Shopware\\Storefront\\Controller\\DownloadController' => 'getDownloadControllerService',
            'Shopware\\Storefront\\Controller\\ErrorController' => 'getErrorControllerService',
            'Shopware\\Storefront\\Controller\\FormController' => 'getFormControllerService',
            'Shopware\\Storefront\\Controller\\LandingPageController' => 'getLandingPageControllerService',
            'Shopware\\Storefront\\Controller\\MaintenanceController' => 'getMaintenanceControllerService',
            'Shopware\\Storefront\\Controller\\NavigationController' => 'getNavigationControllerService',
            'Shopware\\Storefront\\Controller\\NewsletterController' => 'getNewsletterControllerService',
            'Shopware\\Storefront\\Controller\\ProductController' => 'getProductControllerService',
            'Shopware\\Storefront\\Controller\\RegisterController' => 'getRegisterControllerService',
            'Shopware\\Storefront\\Controller\\ScriptController' => 'getScriptControllerService',
            'Shopware\\Storefront\\Controller\\SearchController' => 'getSearchControllerService',
            'Shopware\\Storefront\\Controller\\SitemapController' => 'getSitemapControllerService',
            'Shopware\\Storefront\\Controller\\StoreApiProxyController' => 'getStoreApiProxyControllerService',
            'Shopware\\Storefront\\Controller\\VerificationHashController' => 'getVerificationHashControllerService',
            'Shopware\\Storefront\\Controller\\WellKnownController' => 'getWellKnownControllerService',
            'Shopware\\Storefront\\Controller\\WishlistController' => 'getWishlistControllerService',
            'Shopware\\Storefront\\Framework\\Cache\\CacheStore' => 'getCacheStoreService',
            'Shopware\\Storefront\\Framework\\Csrf\\CsrfPlaceholderHandler' => 'getCsrfPlaceholderHandlerService',
            'Shopware\\Storefront\\Framework\\Media\\StorefrontMediaValidatorRegistry' => 'getStorefrontMediaValidatorRegistryService',
            'Shopware\\Storefront\\Page\\Checkout\\Register\\CheckoutRegisterPageLoader' => 'getCheckoutRegisterPageLoaderService',
            'Shopware\\Storefront\\Page\\Product\\Configurator\\ProductCombinationFinder' => 'getProductCombinationFinderService',
            'Shopware\\Storefront\\Page\\Product\\Review\\ProductReviewLoader' => 'getProductReviewLoaderService',
            'Shopware\\Storefront\\Page\\Search\\SearchPageLoader' => 'getSearchPageLoaderService',
            'Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition' => 'getThemeChildDefinitionService',
            'Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition' => 'getThemeMediaDefinitionService',
            'Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition' => 'getThemeSalesChannelDefinitionService',
            'Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition' => 'getThemeTranslationDefinitionService',
            'Shopware\\Storefront\\Theme\\Controller\\ThemeController' => 'getThemeControllerService',
            'Shopware\\Storefront\\Theme\\SalesChannelThemeLoader' => 'getSalesChannelThemeLoaderService',
            'Shopware\\Storefront\\Theme\\StorefrontPluginRegistry' => 'getStorefrontPluginRegistryService',
            'Shopware\\Storefront\\Theme\\ThemeDefinition' => 'getThemeDefinitionService',
            'Swag\\PlatformDemoData\\SwagPlatformDemoData' => 'getSwagPlatformDemoDataService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'acl_role.repository' => 'getAclRole_RepositoryService',
            'acl_user_role.repository' => 'getAclUserRole_RepositoryService',
            'admin.openSearch.client' => 'getAdmin_OpenSearch_ClientService',
            'administration.filesystem.private' => 'getAdministration_Filesystem_PrivateService',
            'administration.filesystem.public' => 'getAdministration_Filesystem_PublicService',
            'app.repository' => 'getApp_RepositoryService',
            'app_action_button.repository' => 'getAppActionButton_RepositoryService',
            'app_action_button_translation.repository' => 'getAppActionButtonTranslation_RepositoryService',
            'app_administration_snippet.repository' => 'getAppAdministrationSnippet_RepositoryService',
            'app_cms_block.repository' => 'getAppCmsBlock_RepositoryService',
            'app_cms_block_translation.repository' => 'getAppCmsBlockTranslation_RepositoryService',
            'app_flow_action.repository' => 'getAppFlowAction_RepositoryService',
            'app_flow_action_translation.repository' => 'getAppFlowActionTranslation_RepositoryService',
            'app_payment_method.repository' => 'getAppPaymentMethod_RepositoryService',
            'app_script_condition.repository' => 'getAppScriptCondition_RepositoryService',
            'app_script_condition_translation.repository' => 'getAppScriptConditionTranslation_RepositoryService',
            'app_template.repository' => 'getAppTemplate_RepositoryService',
            'app_translation.repository' => 'getAppTranslation_RepositoryService',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'cache_warmer' => 'getCacheWarmerService',
            'category.repository' => 'getCategory_RepositoryService',
            'category_tag.repository' => 'getCategoryTag_RepositoryService',
            'category_translation.repository' => 'getCategoryTranslation_RepositoryService',
            'checkout.filesystem.private' => 'getCheckout_Filesystem_PrivateService',
            'checkout.filesystem.public' => 'getCheckout_Filesystem_PublicService',
            'cms_block.repository' => 'getCmsBlock_RepositoryService',
            'cms_page.repository' => 'getCmsPage_RepositoryService',
            'cms_page_translation.repository' => 'getCmsPageTranslation_RepositoryService',
            'cms_section.repository' => 'getCmsSection_RepositoryService',
            'cms_slot.repository' => 'getCmsSlot_RepositoryService',
            'cms_slot_translation.repository' => 'getCmsSlotTranslation_RepositoryService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'content.filesystem.private' => 'getContent_Filesystem_PrivateService',
            'content.filesystem.public' => 'getContent_Filesystem_PublicService',
            'country.repository' => 'getCountry_RepositoryService',
            'country_state.repository' => 'getCountryState_RepositoryService',
            'country_state_translation.repository' => 'getCountryStateTranslation_RepositoryService',
            'country_translation.repository' => 'getCountryTranslation_RepositoryService',
            'currency.repository' => 'getCurrency_RepositoryService',
            'currency_country_rounding.repository' => 'getCurrencyCountryRounding_RepositoryService',
            'currency_translation.repository' => 'getCurrencyTranslation_RepositoryService',
            'custom_entity.repository' => 'getCustomEntity_RepositoryService',
            'custom_field.repository' => 'getCustomField_RepositoryService',
            'custom_field_set.repository' => 'getCustomFieldSet_RepositoryService',
            'custom_field_set_relation.repository' => 'getCustomFieldSetRelation_RepositoryService',
            'customer.repository' => 'getCustomer_RepositoryService',
            'customer_address.repository' => 'getCustomerAddress_RepositoryService',
            'customer_group.repository' => 'getCustomerGroup_RepositoryService',
            'customer_group_registration_sales_channels.repository' => 'getCustomerGroupRegistrationSalesChannels_RepositoryService',
            'customer_group_translation.repository' => 'getCustomerGroupTranslation_RepositoryService',
            'customer_recovery.repository' => 'getCustomerRecovery_RepositoryService',
            'customer_tag.repository' => 'getCustomerTag_RepositoryService',
            'customer_wishlist.repository' => 'getCustomerWishlist_RepositoryService',
            'customer_wishlist_product.repository' => 'getCustomerWishlistProduct_RepositoryService',
            'dead_message.repository' => 'getDeadMessage_RepositoryService',
            'delivery_time.repository' => 'getDeliveryTime_RepositoryService',
            'delivery_time_translation.repository' => 'getDeliveryTimeTranslation_RepositoryService',
            'document.repository' => 'getDocument_RepositoryService',
            'document_base_config.repository' => 'getDocumentBaseConfig_RepositoryService',
            'document_base_config_sales_channel.repository' => 'getDocumentBaseConfigSalesChannel_RepositoryService',
            'document_type.repository' => 'getDocumentType_RepositoryService',
            'document_type_translation.repository' => 'getDocumentTypeTranslation_RepositoryService',
            'elasticsearch.filesystem.private' => 'getElasticsearch_Filesystem_PrivateService',
            'elasticsearch.filesystem.public' => 'getElasticsearch_Filesystem_PublicService',
            'enqueue.client.default.producer' => 'getEnqueue_Client_Default_ProducerService',
            'error_controller' => 'getErrorController2Service',
            'event_action.repository' => 'getEventAction_RepositoryService',
            'event_action_rule.repository' => 'getEventActionRule_RepositoryService',
            'event_action_sales_channel.repository' => 'getEventActionSalesChannel_RepositoryService',
            'event_dispatcher' => 'getEventDispatcherService',
            'flow.repository' => 'getFlow_RepositoryService',
            'flow_sequence.repository' => 'getFlowSequence_RepositoryService',
            'flow_template.repository' => 'getFlowTemplate_RepositoryService',
            'framework.filesystem.private' => 'getFramework_Filesystem_PrivateService',
            'framework.filesystem.public' => 'getFramework_Filesystem_PublicService',
            'http_kernel' => 'getHttpKernelService',
            'import_export_file.repository' => 'getImportExportFile_RepositoryService',
            'import_export_log.repository' => 'getImportExportLog_RepositoryService',
            'import_export_profile.repository' => 'getImportExportProfile_RepositoryService',
            'import_export_profile_translation.repository' => 'getImportExportProfileTranslation_RepositoryService',
            'integration.repository' => 'getIntegration_RepositoryService',
            'integration_role.repository' => 'getIntegrationRole_RepositoryService',
            'landing_page.repository' => 'getLandingPage_RepositoryService',
            'landing_page_sales_channel.repository' => 'getLandingPageSalesChannel_RepositoryService',
            'landing_page_tag.repository' => 'getLandingPageTag_RepositoryService',
            'landing_page_translation.repository' => 'getLandingPageTranslation_RepositoryService',
            'language.repository' => 'getLanguage_RepositoryService',
            'locale.repository' => 'getLocale_RepositoryService',
            'locale_translation.repository' => 'getLocaleTranslation_RepositoryService',
            'log_entry.repository' => 'getLogEntry_RepositoryService',
            'mail_header_footer.repository' => 'getMailHeaderFooter_RepositoryService',
            'mail_header_footer_translation.repository' => 'getMailHeaderFooterTranslation_RepositoryService',
            'mail_template.repository' => 'getMailTemplate_RepositoryService',
            'mail_template_media.repository' => 'getMailTemplateMedia_RepositoryService',
            'mail_template_translation.repository' => 'getMailTemplateTranslation_RepositoryService',
            'mail_template_type.repository' => 'getMailTemplateType_RepositoryService',
            'mail_template_type_translation.repository' => 'getMailTemplateTypeTranslation_RepositoryService',
            'main_category.repository' => 'getMainCategory_RepositoryService',
            'maintenance.filesystem.private' => 'getMaintenance_Filesystem_PrivateService',
            'maintenance.filesystem.public' => 'getMaintenance_Filesystem_PublicService',
            'media.repository' => 'getMedia_RepositoryService',
            'media_default_folder.repository' => 'getMediaDefaultFolder_RepositoryService',
            'media_folder.repository' => 'getMediaFolder_RepositoryService',
            'media_folder_configuration.repository' => 'getMediaFolderConfiguration_RepositoryService',
            'media_folder_configuration_media_thumbnail_size.repository' => 'getMediaFolderConfigurationMediaThumbnailSize_RepositoryService',
            'media_tag.repository' => 'getMediaTag_RepositoryService',
            'media_thumbnail.repository' => 'getMediaThumbnail_RepositoryService',
            'media_thumbnail_size.repository' => 'getMediaThumbnailSize_RepositoryService',
            'media_translation.repository' => 'getMediaTranslation_RepositoryService',
            'message_queue_stats.repository' => 'getMessageQueueStats_RepositoryService',
            'messenger.default_bus' => 'getMessenger_DefaultBusService',
            'monolog.logger.business_events' => 'getMonolog_Logger_BusinessEventsService',
            'newsletter_recipient.repository' => 'getNewsletterRecipient_RepositoryService',
            'newsletter_recipient_tag.repository' => 'getNewsletterRecipientTag_RepositoryService',
            'notification.repository' => 'getNotification_RepositoryService',
            'number_range.repository' => 'getNumberRange_RepositoryService',
            'number_range_sales_channel.repository' => 'getNumberRangeSalesChannel_RepositoryService',
            'number_range_state.repository' => 'getNumberRangeState_RepositoryService',
            'number_range_translation.repository' => 'getNumberRangeTranslation_RepositoryService',
            'number_range_type.repository' => 'getNumberRangeType_RepositoryService',
            'number_range_type_translation.repository' => 'getNumberRangeTypeTranslation_RepositoryService',
            'order.repository' => 'getOrder_RepositoryService',
            'order_address.repository' => 'getOrderAddress_RepositoryService',
            'order_customer.repository' => 'getOrderCustomer_RepositoryService',
            'order_delivery.repository' => 'getOrderDelivery_RepositoryService',
            'order_delivery_position.repository' => 'getOrderDeliveryPosition_RepositoryService',
            'order_line_item.repository' => 'getOrderLineItem_RepositoryService',
            'order_line_item_download.repository' => 'getOrderLineItemDownload_RepositoryService',
            'order_tag.repository' => 'getOrderTag_RepositoryService',
            'order_transaction.repository' => 'getOrderTransaction_RepositoryService',
            'order_transaction_capture.repository' => 'getOrderTransactionCapture_RepositoryService',
            'order_transaction_capture_refund.repository' => 'getOrderTransactionCaptureRefund_RepositoryService',
            'order_transaction_capture_refund_position.repository' => 'getOrderTransactionCaptureRefundPosition_RepositoryService',
            'payment_method.repository' => 'getPaymentMethod_RepositoryService',
            'payment_method_translation.repository' => 'getPaymentMethodTranslation_RepositoryService',
            'plugin.repository' => 'getPlugin_RepositoryService',
            'plugin_translation.repository' => 'getPluginTranslation_RepositoryService',
            'product.repository' => 'getProduct_RepositoryService',
            'product_category.repository' => 'getProductCategory_RepositoryService',
            'product_category_tree.repository' => 'getProductCategoryTree_RepositoryService',
            'product_configurator_setting.repository' => 'getProductConfiguratorSetting_RepositoryService',
            'product_cross_selling.repository' => 'getProductCrossSelling_RepositoryService',
            'product_cross_selling_assigned_products.repository' => 'getProductCrossSellingAssignedProducts_RepositoryService',
            'product_cross_selling_translation.repository' => 'getProductCrossSellingTranslation_RepositoryService',
            'product_custom_field_set.repository' => 'getProductCustomFieldSet_RepositoryService',
            'product_download.repository' => 'getProductDownload_RepositoryService',
            'product_export.repository' => 'getProductExport_RepositoryService',
            'product_feature_set.repository' => 'getProductFeatureSet_RepositoryService',
            'product_feature_set_translation.repository' => 'getProductFeatureSetTranslation_RepositoryService',
            'product_keyword_dictionary.repository' => 'getProductKeywordDictionary_RepositoryService',
            'product_manufacturer.repository' => 'getProductManufacturer_RepositoryService',
            'product_manufacturer_translation.repository' => 'getProductManufacturerTranslation_RepositoryService',
            'product_media.repository' => 'getProductMedia_RepositoryService',
            'product_option.repository' => 'getProductOption_RepositoryService',
            'product_price.repository' => 'getProductPrice_RepositoryService',
            'product_property.repository' => 'getProductProperty_RepositoryService',
            'product_review.repository' => 'getProductReview_RepositoryService',
            'product_search_config.repository' => 'getProductSearchConfig_RepositoryService',
            'product_search_config_field.repository' => 'getProductSearchConfigField_RepositoryService',
            'product_search_keyword.repository' => 'getProductSearchKeyword_RepositoryService',
            'product_sorting.repository' => 'getProductSorting_RepositoryService',
            'product_sorting_translation.repository' => 'getProductSortingTranslation_RepositoryService',
            'product_stream.repository' => 'getProductStream_RepositoryService',
            'product_stream_filter.repository' => 'getProductStreamFilter_RepositoryService',
            'product_stream_mapping.repository' => 'getProductStreamMapping_RepositoryService',
            'product_stream_translation.repository' => 'getProductStreamTranslation_RepositoryService',
            'product_tag.repository' => 'getProductTag_RepositoryService',
            'product_translation.repository' => 'getProductTranslation_RepositoryService',
            'product_visibility.repository' => 'getProductVisibility_RepositoryService',
            'promotion.repository' => 'getPromotion_RepositoryService',
            'promotion_cart_rule.repository' => 'getPromotionCartRule_RepositoryService',
            'promotion_discount.repository' => 'getPromotionDiscount_RepositoryService',
            'promotion_discount_prices.repository' => 'getPromotionDiscountPrices_RepositoryService',
            'promotion_discount_rule.repository' => 'getPromotionDiscountRule_RepositoryService',
            'promotion_individual_code.repository' => 'getPromotionIndividualCode_RepositoryService',
            'promotion_order_rule.repository' => 'getPromotionOrderRule_RepositoryService',
            'promotion_persona_customer.repository' => 'getPromotionPersonaCustomer_RepositoryService',
            'promotion_persona_rule.repository' => 'getPromotionPersonaRule_RepositoryService',
            'promotion_sales_channel.repository' => 'getPromotionSalesChannel_RepositoryService',
            'promotion_setgroup.repository' => 'getPromotionSetgroup_RepositoryService',
            'promotion_setgroup_rule.repository' => 'getPromotionSetgroupRule_RepositoryService',
            'promotion_translation.repository' => 'getPromotionTranslation_RepositoryService',
            'property_group.repository' => 'getPropertyGroup_RepositoryService',
            'property_group_option.repository' => 'getPropertyGroupOption_RepositoryService',
            'property_group_option_translation.repository' => 'getPropertyGroupOptionTranslation_RepositoryService',
            'property_group_translation.repository' => 'getPropertyGroupTranslation_RepositoryService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'routing.loader' => 'getRouting_LoaderService',
            'rule.repository' => 'getRule_RepositoryService',
            'rule_condition.repository' => 'getRuleCondition_RepositoryService',
            'rule_tag.repository' => 'getRuleTag_RepositoryService',
            'sales_channel.category.repository' => 'getSalesChannel_Category_RepositoryService',
            'sales_channel.country.repository' => 'getSalesChannel_Country_RepositoryService',
            'sales_channel.country_state.repository' => 'getSalesChannel_CountryState_RepositoryService',
            'sales_channel.currency.repository' => 'getSalesChannel_Currency_RepositoryService',
            'sales_channel.landing_page.repository' => 'getSalesChannel_LandingPage_RepositoryService',
            'sales_channel.language.repository' => 'getSalesChannel_Language_RepositoryService',
            'sales_channel.main_category.repository' => 'getSalesChannel_MainCategory_RepositoryService',
            'sales_channel.newsletter_recipient.repository' => 'getSalesChannel_NewsletterRecipient_RepositoryService',
            'sales_channel.payment_method.repository' => 'getSalesChannel_PaymentMethod_RepositoryService',
            'sales_channel.product.repository' => 'getSalesChannel_Product_RepositoryService',
            'sales_channel.repository' => 'getSalesChannel_RepositoryService',
            'sales_channel.salutation.repository' => 'getSalesChannel_Salutation_RepositoryService',
            'sales_channel.seo_url.repository' => 'getSalesChannel_SeoUrl_RepositoryService',
            'sales_channel.shipping_method.repository' => 'getSalesChannel_ShippingMethod_RepositoryService',
            'sales_channel_analytics.repository' => 'getSalesChannelAnalytics_RepositoryService',
            'sales_channel_country.repository' => 'getSalesChannelCountry_RepositoryService',
            'sales_channel_currency.repository' => 'getSalesChannelCurrency_RepositoryService',
            'sales_channel_definition.Shopware\\Administration\\Notification\\NotificationDefinition' => 'getNotificationDefinition2Service',
            'sales_channel_definition.Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition' => 'getAppAdministrationSnippetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition' => 'getCustomerAddressDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition' => 'getCustomerGroupRegistrationSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition' => 'getCustomerGroupTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition' => 'getCustomerGroupDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition' => 'getCustomerRecoveryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition' => 'getCustomerTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition' => 'getCustomerWishlistProductDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition' => 'getCustomerWishlistDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\CustomerDefinition' => 'getCustomerDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition' => 'getDocumentBaseConfigSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition' => 'getDocumentBaseConfigDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition' => 'getDocumentTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition' => 'getDocumentTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\DocumentDefinition' => 'getDocumentDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition' => 'getOrderAddressDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition' => 'getOrderCustomerDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition' => 'getOrderDeliveryPositionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition' => 'getOrderDeliveryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition' => 'getOrderLineItemDownloadDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition' => 'getOrderLineItemDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition' => 'getOrderTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition' => 'getOrderTransactionCaptureRefundPositionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition' => 'getOrderTransactionCaptureRefundDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition' => 'getOrderTransactionCaptureDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition' => 'getOrderTransactionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\OrderDefinition' => 'getOrderDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition' => 'getPaymentMethodTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition' => 'getPromotionCartRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition' => 'getPromotionDiscountPriceDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition' => 'getPromotionDiscountRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition' => 'getPromotionDiscountDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition' => 'getPromotionIndividualCodeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition' => 'getPromotionOrderRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition' => 'getPromotionPersonaCustomerDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition' => 'getPromotionPersonaRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition' => 'getPromotionSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition' => 'getPromotionSetGroupRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition' => 'getPromotionSetGroupDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition' => 'getPromotionTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition' => 'getPromotionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition' => 'getShippingMethodPriceDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition' => 'getShippingMethodTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition' => 'getShippingMethodTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition' => 'getCategoryTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition' => 'getCategoryTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition' => 'getCmsBlockDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition' => 'getCmsPageTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition' => 'getCmsSectionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition' => 'getCmsSlotTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition' => 'getCmsSlotDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\CmsPageDefinition' => 'getCmsPageDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition' => 'getFlowSequenceDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition' => 'getFlowTemplateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Flow\\FlowDefinition' => 'getFlowDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition' => 'getImportExportFileDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition' => 'getImportExportLogDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition' => 'getImportExportProfileDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition' => 'getImportExportProfileTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition' => 'getLandingPageSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition' => 'getLandingPageTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition' => 'getLandingPageTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition' => 'getMailHeaderFooterTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition' => 'getMailHeaderFooterDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition' => 'getMailTemplateMediaDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition' => 'getMailTemplateTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition' => 'getMailTemplateTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition' => 'getMailTemplateTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition' => 'getMailTemplateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition' => 'getMediaDefaultFolderDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition' => 'getMediaFolderConfigurationMediaThumbnailSizeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition' => 'getMediaFolderConfigurationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition' => 'getMediaFolderDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition' => 'getMediaTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition' => 'getMediaThumbnailSizeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition' => 'getMediaThumbnailDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition' => 'getMediaTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\MediaDefinition' => 'getMediaDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition' => 'getNewsletterRecipientTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition' => 'getProductExportDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition' => 'getProductStreamFilterDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition' => 'getProductStreamTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition' => 'getProductStreamDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition' => 'getProductCategoryTreeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition' => 'getProductCategoryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition' => 'getProductConfiguratorSettingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition' => 'getProductCrossSellingAssignedProductsDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition' => 'getProductCrossSellingTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition' => 'getProductCrossSellingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition' => 'getProductCustomFieldSetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition' => 'getProductDownloadDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition' => 'getProductFeatureSetTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition' => 'getProductFeatureSetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition' => 'getProductKeywordDictionaryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition' => 'getProductManufacturerTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition' => 'getProductManufacturerDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition' => 'getProductMediaDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition' => 'getProductOptionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition' => 'getProductPriceDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition' => 'getProductPropertyDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition' => 'getProductReviewDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition' => 'getProductSearchConfigFieldDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition' => 'getProductSearchConfigDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition' => 'getProductSearchKeywordDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition' => 'getProductStreamMappingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition' => 'getProductTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition' => 'getProductTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition' => 'getProductVisibilityDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition' => 'getProductSortingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition' => 'getProductSortingTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition' => 'getPropertyGroupOptionTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition' => 'getPropertyGroupOptionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition' => 'getPropertyGroupTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Property\\PropertyGroupDefinition' => 'getPropertyGroupDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition' => 'getRuleConditionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition' => 'getRuleTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Rule\\RuleDefinition' => 'getRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition' => 'getSeoUrlTemplateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition' => 'getAclRoleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition' => 'getAclUserRoleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition' => 'getActionButtonTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition' => 'getActionButtonDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition' => 'getAppPaymentMethodDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition' => 'getAppScriptConditionTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition' => 'getAppScriptConditionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition' => 'getAppTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition' => 'getAppCmsBlockTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition' => 'getAppCmsBlockDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition' => 'getAppFlowActionTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition' => 'getAppFlowActionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\AppDefinition' => 'getAppDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition' => 'getTemplateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition' => 'getVersionCommitDataDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition' => 'getVersionCommitDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition' => 'getVersionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionRule\\EventActionRuleDefinition' => 'getEventActionRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionSalesChannel\\EventActionSalesChannelDefinition' => 'getEventActionSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Event\\EventAction\\EventActionDefinition' => 'getEventActionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Log\\LogEntryDefinition' => 'getLogEntryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\MessageQueue\\DeadMessage\\DeadMessageDefinition' => 'getDeadMessageDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\MessageQueue\\MessageQueueStatsDefinition' => 'getMessageQueueStatsDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition' => 'getScheduledTaskDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition' => 'getPluginTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Plugin\\PluginDefinition' => 'getPluginDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Script\\ScriptDefinition' => 'getScriptDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition' => 'getWebhookEventLogDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Webhook\\WebhookDefinition' => 'getWebhookDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition' => 'getCountryStateTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition' => 'getCountryTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition' => 'getCurrencyCountryRoundingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition' => 'getCurrencyTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition' => 'getCustomEntityDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition' => 'getCustomFieldSetRelationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition' => 'getCustomFieldSetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\CustomField\\CustomFieldDefinition' => 'getCustomFieldDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition' => 'getDeliveryTimeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition' => 'getDeliveryTimeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition' => 'getIntegrationRoleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Integration\\IntegrationDefinition' => 'getIntegrationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition' => 'getLocaleTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Locale\\LocaleDefinition' => 'getLocaleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition' => 'getNumberRangeSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition' => 'getNumberRangeStateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition' => 'getNumberRangeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition' => 'getNumberRangeTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition' => 'getNumberRangeTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition' => 'getNumberRangeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition' => 'getSalesChannelAnalyticsDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition' => 'getSalesChannelCountryDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition' => 'getSalesChannelCurrencyDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition' => 'getSalesChannelDomainDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition' => 'getSalesChannelLanguageDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition' => 'getSalesChannelPaymentMethodDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition' => 'getSalesChannelShippingMethodDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition' => 'getSalesChannelTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition' => 'getSalesChannelTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition' => 'getSalesChannelTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition' => 'getSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition' => 'getSalutationTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition' => 'getSnippetSetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Snippet\\SnippetDefinition' => 'getSnippetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition' => 'getStateMachineHistoryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition' => 'getStateMachineStateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition' => 'getStateMachineStateTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition' => 'getStateMachineTransitionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\StateMachineDefinition' => 'getStateMachineDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition' => 'getStateMachineTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition' => 'getSystemConfigDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tag\\TagDefinition' => 'getTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition' => 'getTaxRuleTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition' => 'getTaxRuleTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition' => 'getTaxRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tax\\TaxDefinition' => 'getTaxDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition' => 'getUnitTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Unit\\UnitDefinition' => 'getUnitDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition' => 'getUserAccessKeyDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition' => 'getUserConfigDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition' => 'getUserRecoveryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\User\\UserDefinition' => 'getUserDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition' => 'getThemeChildDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition' => 'getThemeMediaDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition' => 'getThemeSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition' => 'getThemeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\ThemeDefinition' => 'getThemeDefinition2Service',
            'sales_channel_domain.repository' => 'getSalesChannelDomain_RepositoryService',
            'sales_channel_language.repository' => 'getSalesChannelLanguage_RepositoryService',
            'sales_channel_payment_method.repository' => 'getSalesChannelPaymentMethod_RepositoryService',
            'sales_channel_shipping_method.repository' => 'getSalesChannelShippingMethod_RepositoryService',
            'sales_channel_translation.repository' => 'getSalesChannelTranslation_RepositoryService',
            'sales_channel_type.repository' => 'getSalesChannelType_RepositoryService',
            'sales_channel_type_translation.repository' => 'getSalesChannelTypeTranslation_RepositoryService',
            'salutation.repository' => 'getSalutation_RepositoryService',
            'salutation_translation.repository' => 'getSalutationTranslation_RepositoryService',
            'scheduled_task.repository' => 'getScheduledTask_RepositoryService',
            'script.repository' => 'getScript_RepositoryService',
            'seo_url.repository' => 'getSeoUrl_RepositoryService',
            'seo_url_template.repository' => 'getSeoUrlTemplate_RepositoryService',
            'services_resetter' => 'getServicesResetterService',
            'shipping_method.repository' => 'getShippingMethod_RepositoryService',
            'shipping_method_price.repository' => 'getShippingMethodPrice_RepositoryService',
            'shipping_method_tag.repository' => 'getShippingMethodTag_RepositoryService',
            'shipping_method_translation.repository' => 'getShippingMethodTranslation_RepositoryService',
            'shopware.filesystem.asset' => 'getShopware_Filesystem_AssetService',
            'shopware.filesystem.private' => 'getShopware_Filesystem_PrivateService',
            'shopware.filesystem.public' => 'getShopware_Filesystem_PublicService',
            'shopware.filesystem.sitemap' => 'getShopware_Filesystem_SitemapService',
            'shopware.filesystem.temp' => 'getShopware_Filesystem_TempService',
            'shopware.filesystem.theme' => 'getShopware_Filesystem_ThemeService',
            'shopware.increment.gateway.registry' => 'getShopware_Increment_Gateway_RegistryService',
            'shopware.store_client' => 'getShopware_StoreClientService',
            'snippet.repository' => 'getSnippet_RepositoryService',
            'snippet_set.repository' => 'getSnippetSet_RepositoryService',
            'state_machine.repository' => 'getStateMachine_RepositoryService',
            'state_machine_history.repository' => 'getStateMachineHistory_RepositoryService',
            'state_machine_state.repository' => 'getStateMachineState_RepositoryService',
            'state_machine_state_translation.repository' => 'getStateMachineStateTranslation_RepositoryService',
            'state_machine_transition.repository' => 'getStateMachineTransition_RepositoryService',
            'state_machine_translation.repository' => 'getStateMachineTranslation_RepositoryService',
            'storefront.filesystem.private' => 'getStorefront_Filesystem_PrivateService',
            'storefront.filesystem.public' => 'getStorefront_Filesystem_PublicService',
            'swag_platform_demo_data.filesystem.private' => 'getSwagPlatformDemoData_Filesystem_PrivateService',
            'swag_platform_demo_data.filesystem.public' => 'getSwagPlatformDemoData_Filesystem_PublicService',
            'system.filesystem.private' => 'getSystem_Filesystem_PrivateService',
            'system.filesystem.public' => 'getSystem_Filesystem_PublicService',
            'system_config.repository' => 'getSystemConfig_RepositoryService',
            'tag.repository' => 'getTag_RepositoryService',
            'tax.repository' => 'getTax_RepositoryService',
            'tax_rule.repository' => 'getTaxRule_RepositoryService',
            'tax_rule_type.repository' => 'getTaxRuleType_RepositoryService',
            'tax_rule_type_translation.repository' => 'getTaxRuleTypeTranslation_RepositoryService',
            'theme.repository' => 'getTheme_RepositoryService',
            'theme_child.repository' => 'getThemeChild_RepositoryService',
            'theme_media.repository' => 'getThemeMedia_RepositoryService',
            'theme_sales_channel.repository' => 'getThemeSalesChannel_RepositoryService',
            'theme_translation.repository' => 'getThemeTranslation_RepositoryService',
            'translator' => 'getTranslatorService',
            'unit.repository' => 'getUnit_RepositoryService',
            'unit_translation.repository' => 'getUnitTranslation_RepositoryService',
            'user.repository' => 'getUser_RepositoryService',
            'user_access_key.repository' => 'getUserAccessKey_RepositoryService',
            'user_config.repository' => 'getUserConfig_RepositoryService',
            'user_recovery.repository' => 'getUserRecovery_RepositoryService',
            'version.repository' => 'getVersion_RepositoryService',
            'version_commit.repository' => 'getVersionCommit_RepositoryService',
            'version_commit_data.repository' => 'getVersionCommitData_RepositoryService',
            'webhook.repository' => 'getWebhook_RepositoryService',
            'webhook_event_log.repository' => 'getWebhookEventLog_RepositoryService',
            'cache_clearer' => 'getCacheClearerService',
            'filesystem' => 'getFilesystemService',
            'serializer' => 'getSerializerService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'twig' => 'getTwigService',
            'session' => 'getSessionService',
            'validator' => 'getValidatorService',
        ];
        $this->aliases = [
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\PaymentMethodRoute' => 'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute',
            'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\ShippingMethodRoute' => 'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\CategoryRoute' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\NavigationRoute' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute',
            'Shopware\\Core\\Content\\Flow\\Dispatching\\FlowLoader' => 'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader',
            'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\LandingPageRoute' => 'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\CachedLandingPageRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\ProductCrossSellingRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\ProductDetailRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\ProductReviewRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ProductSearchRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\ProductSuggestRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\CachedProductSuggestRoute',
            'Shopware\\Core\\Content\\Seo\\SeoResolver' => 'Shopware\\Core\\Content\\Seo\\EmptyPathInfoResolver',
            'Shopware\\Core\\Content\\Sitemap\\SalesChannel\\SitemapRoute' => 'Shopware\\Core\\Content\\Sitemap\\SalesChannel\\CachedSitemapRoute',
            'Shopware\\Core\\System\\Country\\SalesChannel\\CountryRoute' => 'Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute',
            'Shopware\\Core\\System\\Country\\SalesChannel\\CountryStateRoute' => 'Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryStateRoute',
            'Shopware\\Core\\System\\Currency\\SalesChannel\\CurrencyRoute' => 'Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute',
            'Shopware\\Core\\System\\Language\\SalesChannel\\LanguageRoute' => 'Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute',
            'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalutationRoute' => 'Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition' => 'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition' => 'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition' => 'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition' => 'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Category\\CategoryDefinition' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition' => 'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition' => 'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition' => 'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition' => 'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\ProductDefinition' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition' => 'Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition' => 'Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition' => 'Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition' => 'Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\CountryDefinition' => 'Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition' => 'Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Currency\\CurrencyDefinition' => 'Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition' => 'Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Language\\LanguageDefinition' => 'Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition' => 'Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition' => 'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Salutation\\SalutationDefinition' => 'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition',
        ];

        $this->privates['service_container'] = function () {
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/Connection.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Connection.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpKernelInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/KernelInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/RebootableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/TerminableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Kernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Kernel/MicroKernelTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Kernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/cocur/slugify/src/SlugifyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/cocur/slugify/src/Slugify.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventSubscriberInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/ContextResolverListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/CoreSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteScopeListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteEventSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Filter/SnippetFilterFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TemplateFinderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ResetInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TemplateFinder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/NamespaceHierarchy/NamespaceHierarchyBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/EntityTemplateLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RequestContextResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteScopeCheckTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/SalesChannelRequestContextResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/ApiRequestContextResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteScopeRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheStateSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Handler/AbstractMessageHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheInvalidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheTagCollection.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/cache/src/CacheItemPoolInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AdapterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/TagAwareAdapterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/TagAwareCacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheDecorator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/PruneableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/ResettableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/ContractsTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/ProxyTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/TagAwareAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Util/HtmlSanitizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/HandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/Handler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/ResettableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/Monolog/ExcludeFlowEventHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/ProcessorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteParamsCleanupListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/AclAnnotationValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/CorsListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/ResponseHeaderListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Serializer/JsonEntityEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Converter/ApiVersionConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Converter/ConverterRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Converter/DefaultApiConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/RepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/AccessTokenRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/AccessTokenRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/RefreshTokenRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/RefreshTokenRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/CryptKey.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/event/src/EmitterAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/event/src/EmitterAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/AuthorizationServer.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/ClientRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/ClientRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/ScopeRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/ScopeRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/JsonRequestTransformerListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/ExpectationSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/Authentication/SalesChannelAuthenticationListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/Authentication/ApiAuthenticationListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/ResourceServer.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/AuthorizationValidators/AuthorizationValidatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/BearerTokenValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/CryptTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/AuthorizationValidators/BearerTokenValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/UserRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/UserRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/psr-http-message-bridge/HttpMessageFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/psr-http-message-bridge/Factory/PsrHttpFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/RequestFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/ResponseFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/ServerRequestFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/StreamFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/UploadedFileFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/UriFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/nyholm/psr7/src/Factory/Psr17Factory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ShopId/ShopIdProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/ScriptPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/ScriptFileReaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/ScriptFileReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActiveAppsLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AbstractAppLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AppLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Xml/CustomEntityXmlSchemaValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppLocaleProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppPaymentMethod/AppPaymentMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Event/EntityLoadedEventFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Cache/EntityCacheKeyGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityDefinitionQueryHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/JoinGroupBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/TokenizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/Tokenizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/SearchTermInterpreter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/EntityScoreQueryBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Read/EntityReaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/CriteriaQueryBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/CriteriaPartResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/EntityWriterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/EntityWriter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityForeignKeyResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/EntityWriteResultFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/WriteCommandExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/EntityWriteGatewayInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityWriteGateway.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/ExceptionHandlerRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Parser/SqlQueryParser.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Version/VersionDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Version/Aggregate/VersionCommit/VersionCommitDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Version/Aggregate/VersionCommitData/VersionCommitDataDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/VersionManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/DefinitionInstanceRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/EventAction/EventActionDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/event-dispatcher/src/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher-contracts/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/BusinessEventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/FilesystemFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/FilesystemInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/PackageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Package.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/UrlPackage.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Asset/FallbackUrlPackage.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeAssetPackage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/VersionStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Asset/FlysystemLastModifiedVersionStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/ScriptLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/ScriptExecutor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/ScriptDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DataCollector/DataCollectorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DataCollector/DataCollector.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/DataCollector/TemplateAwareDataCollectorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/DataCollector/AbstractDataCollector.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Debugging/ScriptTraces.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/LanguageDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Entity/SalesChannelDefinitionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/SalesChannel/SalesChannelLanguageDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/LanguageLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/CachedLanguageLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/LanguageLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/SalesChannel/AbstractLanguageRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/SalesChannel/CachedLanguageRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/SalesChannel/LanguageRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrl/SeoUrlDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrl/SalesChannel/SalesChannelSeoUrlDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlRoute/SeoUrlRouteRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlPlaceholderHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlPlaceholderHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SalesChannel/StoreApiSeoResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/WebhookDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/BusinessEventEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/IncrementGatewayRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannelDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelDomain/SalesChannelDomainDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextServiceInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Entity/SalesChannelDefinitionInstanceRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Api/StoreApiResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Api/StructEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/CountryDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryState/CountryStateDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/CurrencyDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/Aggregate/CurrencyCountryRounding/CurrencyCountryRoundingDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/SalesChannel/SalesChannelCurrencyDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/CurrencyFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/SalesChannel/AbstractCurrencyRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/SalesChannel/CachedCurrencyRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/SalesChannel/CurrencyRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/LanguageLocaleCodeProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Aggregate/SnippetSet/SnippetSetDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/TaxDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/UserDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Loader/InitialStateIdLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/SystemConfigDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Util/XmlReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Util/ConfigReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/SystemConfigService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/AbstractSystemConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/MemoizedSystemConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/CachedSystemConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/SystemConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Store/MemoizedSystemConfigStore.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/NumberRangeValueGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/NumberRangeValueGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/ValueGeneratorPatternRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/CategoryDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/SalesChannelCategoryDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/NavigationLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/NavigationLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/AbstractNavigationRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/CachedNavigationRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/NavigationRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/TreeBuildingNavigationRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/CategoryBreadcrumbBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/MediaDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaRepositoryDecorator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/ProductDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/SalesChannelProductDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductDownload/ProductDownloadDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/RuleDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/CmsPageDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/CmsSlotsDataResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/SalesChannel/SalesChannelCmsPageLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/SalesChannel/SalesChannelCmsPageLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/AmountCalculator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/CashRounding.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartPersisterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/AbstractCartPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartSerializationCleaner.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartCalculator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartItemUpdateRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartItemUpdateRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartLoadRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartLoadRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartDeleteRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartDeleteRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartItemRemoveRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartItemRemoveRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartItemAddRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartItemAddRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartOrderRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartOrderRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/OrderPersisterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/OrderPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/PreparedPaymentService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Tax/PercentageTaxRuleBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Tax/TaxDetector.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Tax/TaxCalculator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Processor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Validator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Transaction/TransactionProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartRuleLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/AbstractRuleLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CachedRuleLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/RuleLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/CustomerDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerAddress/CustomerAddressDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroup/CustomerGroupDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/OrderDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderAddress/OrderAddressDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/OrderConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/LineItemDownloadLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/PaymentMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/SalesChannelPaymentMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Configuration.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/Token/JWTConfigurationFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/OpenSSL.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/Rsa.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/Rsa/Sha256.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/container/src/ContainerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceProviderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceLocatorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ServiceLocator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/AbstractPaymentMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/CachedPaymentMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/PaymentMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/SortedPaymentMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/ShippingMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/SalesChannelShippingMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/AbstractShippingMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/CachedShippingMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/ShippingMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/SortedShippingMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/MaintenanceModeResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeConfigValueAccessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/AbstractResolvedConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/CachedResolvedConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ResolvedConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/composer/composer/src/Composer/EventDispatcher/EventSubscriberInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/TwigDateRequestListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Csrf/CsrfPlaceholderHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/StorefrontSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/HreflangLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/HreflangLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/NotFound/NotFoundSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Csrf/CsrfRouteListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/AffiliateTracking/AffiliateTrackingListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Header/HeaderPageletLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Header/HeaderPageletLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Footer/FooterPageletLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Footer/FooterPageletLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/GenericPageLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/GenericPageLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/AbstractCacheTracer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheTracer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheTracer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheResponseSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/CaptchaRouteListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/ResponseHeaderListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/StorefrontPluginConfiguration/AbstractStorefrontPluginConfigurationFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/StorefrontPluginConfiguration/StorefrontPluginConfigurationFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/StorefrontPluginRegistryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/StorefrontPluginRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeFileImporterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeFileImporter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeFileResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeCompilerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeCompiler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/AbstractScssCompiler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ScssPhpCompiler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/AbstractConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/DatabaseConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/AbstractThemePathBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/MD5ThemePathBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/MappingEntityDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeSalesChannelDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/NamespaceHierarchy/TemplateNamespaceHierarchyBuilderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Twig/ThemeNamespaceHierarchyBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Twig/ThemeInheritanceBuilderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Twig/ThemeInheritanceBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/SalesChannelThemeLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/CriteriaParser.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/LoggerFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/StreamedResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/LocaleListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ValidateRequestListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ErrorListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/FrozenParameterBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpKernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ControllerResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ContainerControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/RequestStack.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/UriSigner.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/config/ConfigCacheFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/config/ResourceCheckerConfigCacheFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/LocaleAwareListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/AbstractAdapterTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AbstractAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Marshaller/MarshallerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Marshaller/DefaultMarshaller.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Packages.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/PathPackage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Context/ContextInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Context/RequestStackContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/EmptyVersionStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/SurrogateInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/AbstractSurrogate.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/Esi.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/SurrogateListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/FragmentListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/TranslatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/TranslatorBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/LocaleAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/WarmableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/MessageFormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/IntlFormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/MessageFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/TranslatorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/IdentityTranslator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/DebugHandlersListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Logger.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Log/DebugLoggerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Logger.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Debug/FileLinkFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/stopwatch/Stopwatch.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RequestContextAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/UrlMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Generator/UrlGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RouterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/RequestMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RequestContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/RouterListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/Reader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Compatibility/AnnotationReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/AnnotationRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/PsrCachedReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/PhpArrayAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassResolverTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/CacheClassMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/LoaderChain.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/AnnotationLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyDescriptionExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyAccessExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyListExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInitializableExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInfoCacheExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInfoExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyReadInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyWriteInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/Extractor/ConstructorArgumentTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/Extractor/ReflectionExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/LockFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/PersistingStoreInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/Store/StoreFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/FilesystemCommonTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/FilesystemTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/FilesystemAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-access/PropertyAccessorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-access/PropertyAccessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Storage/SessionStorageFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Storage/NativeSessionStorageFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Storage/MetadataBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/AbstractSessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/SessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ValidatorBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Validation.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ContainerConstraintValidatorFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/AutoMappingTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/PropertyInfoLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypeGuesserInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypesInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypes.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/ConsoleHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/ControllerListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/ParamConverterListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/ParamConverterManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/ParamConverterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/DoctrineParamConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ParamConverter/DateTimeParamConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/TemplateListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Templating/TemplateGuesser.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/HttpCacheListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/EventListener/IsGrantedListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Request/ArgumentNameConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/ChainLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/FilesystemLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/ExtensionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/AbstractExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/RateLimiter/RateLimiter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/RateLimiter/RateLimiterFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/Storage/StorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/Storage/CacheStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Entity/SalesChannelRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Entity/SalesChannelRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Translation/AbstractTranslator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/MessageBusInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Monitoring/MonitoringBusDecorator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/MessageBus.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/NestedEventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/EntitySearcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntitySearcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntitySearcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/AbstractElasticsearchSearchHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntitySearchHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/EntityAggregatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntityAggregator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityAggregator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/AbstractElasticsearchAggregationHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntityAggregatorHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityRepositoryForwardCompatibilityDecorator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/DataAbstractionLayer/PaymentMethodRepositoryDecorator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/AbstractSalesChannelContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/CachedSalesChannelContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/AbstractBaseContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/CachedBaseContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/BaseContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/NormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ContextAwareNormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ContextAwareDenormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/EncoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/ContextAwareEncoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/DecoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/ContextAwareDecoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Serializer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/CacheableSupportsMethodInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/UnwrappingDenormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Struct/Serializer/StructNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/NormalizerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/Normalizer/FlattenExceptionNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ProblemNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/UidNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateTimeNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ConstraintViolationListNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/NameConverterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/AdvancedNameConverterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/MetadataAwareNameConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/MimeMessageNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ObjectToPopulateTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/AbstractNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/AbstractObjectNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/PropertyNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/ClassDiscriminatorResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/ClassDiscriminatorFromClassMetadata.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateTimeZoneNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateIntervalNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/FormErrorNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DataUriNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/JsonSerializableNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ArrayDenormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ObjectNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Struct/Serializer/StructDecoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Serializer/JsonApiDecoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/NormalizationAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/XmlEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/JsonEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/YamlEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/CsvEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/CsrfTokenManagerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/CsrfTokenManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenGenerator/TokenGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenGenerator/UriSafeTokenGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenStorage/TokenStorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenStorage/ClearableTokenStorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/security-csrf/TokenStorage/SessionTokenStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/CacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/FilesystemCache.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/CoreExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/EscaperExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/OptimizerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/StagingExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/ExtensionSet.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Template.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/TemplateWrapper.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Environment.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TwigEnvironment.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/CsrfExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/AssetExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/CodeExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/RoutingExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/YamlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/StopwatchExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpKernelExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpFoundationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/UrlHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/SerializerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/NodeExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/PhpSyntaxExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/FeatureFlagExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/intl-extra/IntlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/string-extra/StringExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/InstanceOfExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Filter/CurrencyFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/cocur/slugify/src/Bridge/Twig/SlugifyExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Filter/ReplaceRecursiveFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/SecurityExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/SeoUrlFunctionExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/CategoryUrlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/AbstractCategoryUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/CategoryUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/MediaExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/RawUrlFunctionExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/SwSanitizeTwigFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/BuildBreadcrumbExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/GlobalsInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/TemplateDataExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/Extension/ConfigExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/TemplateConfigAccessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/IconExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/ThumbnailExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/Extension/UrlEncodingTwigFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/Extension/IconCacheTwigFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/Extension/CsrfFunctionExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/AppVariable.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/TwigAppVariable.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/RuntimeLoader/RuntimeLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/RuntimeLoader/ContainerRuntimeLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/DependencyInjection/Configurator/EnvironmentConfigurator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Factory/MetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Validator/ValidatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/HappyPathValidator.php';
            include_once __DIR__.'/proxy-classes.php';
        };
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function createProxy($class, \Closure $factory)
    {
        return $factory();
    }

    /*
     * Gets the public '.container.private.cache_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer
     */
    protected function get_Container_Private_CacheClearerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/CacheClearerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/ChainCacheClearer.php';

        return $this->services['.container.private.cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(new RewindableGenerator(function () {
            yield 0 => ($this->services['cache.system_clearer'] ?? $this->getCache_SystemClearerService());
        }, 1));
    }

    /*
     * Gets the public '.container.private.filesystem' shared service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem
     */
    protected function get_Container_Private_FilesystemService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        return $this->services['.container.private.filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /*
     * Gets the public '.container.private.security.csrf.token_manager' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager
     */
    protected function get_Container_Private_Security_Csrf_TokenManagerService()
    {
        $a = ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()));

        return $this->services['.container.private.security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(), new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage($a), $a);
    }

    /*
     * Gets the public '.container.private.serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected function get_Container_Private_SerializerService()
    {
        $a = ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));

        $b = new \Symfony\Component\PropertyAccess\PropertyAccessor(3, 2, ($this->privates['cache.property_access'] ?? $this->getCache_PropertyAccessService()), $a, $a);
        $c = ($this->privates['serializer.mapping.cache_class_metadata_factory'] ?? $this->getSerializer_Mapping_CacheClassMetadataFactoryService());

        $d = new \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter($c);
        $e = ($this->privates['property_info.cache'] ?? $this->getPropertyInfo_CacheService());
        $f = new \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata($c);

        return $this->services['.container.private.serializer'] = new \Symfony\Component\Serializer\Serializer([0 => new \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer($b), 1 => new \Shopware\Core\Framework\Struct\Serializer\StructNormalizer(), 2 => new \Symfony\Component\Messenger\Transport\Serialization\Normalizer\FlattenExceptionNormalizer(), 3 => new \Symfony\Component\Serializer\Normalizer\ProblemNormalizer(false), 4 => new \Symfony\Component\Serializer\Normalizer\UidNormalizer(), 5 => new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer(), 6 => new \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer([], $d), 7 => new \Symfony\Component\Serializer\Normalizer\MimeMessageNormalizer(new \Symfony\Component\Serializer\Normalizer\PropertyNormalizer($c, $d, $e, $f, NULL)), 8 => new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer(), 9 => new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer(), 10 => new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer(), 11 => new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(($this->privates['mime_types'] ?? $this->getMimeTypesService())), 12 => new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL), 13 => new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), 14 => new \Symfony\Component\Serializer\Normalizer\ObjectNormalizer($c, $d, $b, $e, $f, NULL)], [0 => new \Shopware\Core\Framework\Struct\Serializer\StructDecoder(), 1 => new \Shopware\Core\Framework\Api\Serializer\JsonApiDecoder(), 2 => new \Symfony\Component\Serializer\Encoder\XmlEncoder(), 3 => new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL), 4 => new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL), 5 => new \Symfony\Component\Serializer\Encoder\CsvEncoder()]);
    }

    /*
     * Gets the public '.container.private.session' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session
     */
    protected function get_Container_Private_SessionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Session.php';

        $a = ($this->privates['session.factory'] ?? $this->getSession_FactoryService());

        if (isset($this->services['.container.private.session'])) {
            return $this->services['.container.private.session'];
        }

        return $this->services['.container.private.session'] = $a->createSession();
    }

    /*
     * Gets the public '.container.private.twig' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\TwigEnvironment
     */
    protected function get_Container_Private_TwigService()
    {
        $this->services['.container.private.twig'] = $instance = new \Shopware\Core\Framework\Adapter\Twig\TwigEnvironment(($this->privates['twig.loader.chain'] ?? $this->getTwig_Loader_ChainService()), ['debug' => false, 'strict_variables' => false, 'autoescape' => 'name', 'cache' => ($this->targetDir.''.'/twig'), 'charset' => 'UTF-8']);

        $a = ($this->services['router'] ?? $this->getRouterService());

        $b = new \Symfony\Bridge\Twig\Extension\RoutingExtension($a);
        $c = ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()));
        $d = ($this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] ?? $this->getTemplateFinderService());
        $e = ($this->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? $this->getSeoUrlPlaceholderHandlerInterfaceService());
        $f = new \Symfony\Bridge\Twig\AppVariable();
        $f->setEnvironment('prod');
        $f->setDebug(false);
        if ($this->has('request_stack')) {
            $f->setRequestStack($c);
        }

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CsrfExtension());
        $instance->addExtension(($this->privates['twig.extension.trans'] ?? $this->getTwig_Extension_TransService()));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(($this->privates['assets.packages'] ?? $this->getAssets_PackagesService())));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(($this->privates['debug.file_link_formatter'] ?? ($this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))), \dirname(__DIR__, 4), 'UTF-8'));
        $instance->addExtension($b);
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension(($this->privates['debug.stopwatch'] ?? ($this->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true))), false));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension(new \Symfony\Component\HttpFoundation\UrlHelper($c, ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SerializerExtension());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\NodeExtension($d));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\PhpSyntaxExtension());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\FeatureFlagExtension());
        $instance->addExtension(new \Twig\Extra\Intl\IntlExtension());
        $instance->addExtension(new \Twig\Extra\String\StringExtension());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\InstanceOfExtension());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Filter\CurrencyFilter(($this->services['Shopware\\Core\\System\\Currency\\CurrencyFormatter'] ?? $this->getCurrencyFormatterService())));
        $instance->addExtension(new \Cocur\Slugify\Bridge\Twig\SlugifyExtension(($this->privates['slugify'] ?? $this->getSlugifyService())));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Filter\ReplaceRecursiveFilter());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\SecurityExtension([]));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\SeoUrlFunctionExtension($b, $e));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\CategoryUrlExtension($b, new \Shopware\Core\Content\Category\Service\CategoryUrlGenerator($e)));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\MediaExtension(($this->services['media.repository'] ?? $this->getMedia_RepositoryService())));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\RawUrlFunctionExtension($a, $c));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\SwSanitizeTwigFilter(($this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? $this->getHtmlSanitizerService())));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\BuildBreadcrumbExtension(($this->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'] ?? $this->getCategoryBreadcrumbBuilderService()), ($this->services['category.repository'] ?? $this->getCategory_RepositoryService())));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\TemplateDataExtension($c, true, 'twig'));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\Extension\ConfigExtension(new \Shopware\Storefront\Framework\Twig\TemplateConfigAccessor(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'] ?? $this->getThemeConfigValueAccessorService()))));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\IconExtension($d));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\ThumbnailExtension($d));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\Extension\UrlEncodingTwigFilter());
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\Extension\IconCacheTwigFilter());
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\Extension\CsrfFunctionExtension());
        $instance->addGlobal('app', new \Shopware\Storefront\Framework\Twig\TwigAppVariable($f, $this->parameters['shopware.twig.app_variable.allowed_server_params']));
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => ['privates', 'twig.runtime.security_csrf', 'getTwig_Runtime_SecurityCsrfService', false],
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => ['privates', 'twig.runtime.httpkernel', 'getTwig_Runtime_HttpkernelService', false],
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => ['privates', 'twig.runtime.serializer', 'getTwig_Runtime_SerializerService', false],
        ], [
            'Symfony\\Bridge\\Twig\\Extension\\CsrfRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => '?',
        ])));
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }

    /*
     * Gets the public '.container.private.validator' shared service.
     *
     * @return \Shopware\Core\Framework\Validation\HappyPathValidator
     */
    protected function get_Container_Private_ValidatorService()
    {
        $a = ($this->privates['validator.builder'] ?? $this->getValidator_BuilderService());

        if (isset($this->services['.container.private.validator'])) {
            return $this->services['.container.private.validator'];
        }

        return $this->services['.container.private.validator'] = new \Shopware\Core\Framework\Validation\HappyPathValidator($a->getValidator());
    }

    /*
     * Gets the public 'Doctrine\DBAL\Connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected function getConnectionService()
    {
        return $this->services['Doctrine\\DBAL\\Connection'] = \Shopware\Core\Kernel::getConnection();
    }

    /*
     * Gets the public 'Elasticsearch\Client' shared service.
     *
     * @return \Elasticsearch\Client
     */
    protected function getClientService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->services['Elasticsearch\\Client'] = $this->createProxy('Client_dba3ed3', function () {
                return \Client_dba3ed3::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getClientService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ClientFactory.php';

        return \Shopware\Elasticsearch\Framework\ClientFactory::createClient($this->getEnv('string:default:default_whitespace:SHOPWARE_ES_HOSTS'), ($this->privates['shopware.elasticsearch.logger'] ?? $this->getShopware_Elasticsearch_LoggerService()), false, $this->parameters['elasticsearch.ssl']);
    }

    /*
     * Gets the public 'Shopware\Administration\Controller\AdminExtensionApiController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdminExtensionApiController
     */
    protected function getAdminExtensionApiControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdminExtensionApiController.php';

        $this->services['Shopware\\Administration\\Controller\\AdminExtensionApiController'] = $instance = new \Shopware\Administration\Controller\AdminExtensionApiController(($this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Executor'] ?? $this->getExecutorService()), ($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? $this->getShopIdProviderService()), ($this->services['app.repository'] ?? $this->getApp_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] ?? $this->getQuerySignerService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Administration\Controller\AdminProductStreamController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdminProductStreamController
     */
    protected function getAdminProductStreamControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdminProductStreamController.php';

        $this->services['Shopware\\Administration\\Controller\\AdminProductStreamController'] = $instance = new \Shopware\Administration\Controller\AdminProductStreamController(($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()), ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Administration\Controller\AdminSearchController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdminSearchController
     */
    protected function getAdminSearchControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdminSearchController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Service/AdminSearcher.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService());

        $this->services['Shopware\\Administration\\Controller\\AdminSearchController'] = $instance = new \Shopware\Administration\Controller\AdminSearchController(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()), $a, new \Shopware\Administration\Service\AdminSearcher($a), ($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()), ($this->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] ?? $this->getAclCriteriaValidatorService()), $a, ($this->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? $this->getJsonEntityEncoderService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Administration\Controller\AdminTagController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdminTagController
     */
    protected function getAdminTagControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdminTagController.php';

        $this->services['Shopware\\Administration\\Controller\\AdminTagController'] = $instance = new \Shopware\Administration\Controller\AdminTagController(($this->services['Shopware\\Core\\System\\Tag\\Service\\FilterTagIdsService'] ?? $this->getFilterTagIdsServiceService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Administration\Controller\AdministrationController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdministrationController
     */
    protected function getAdministrationControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdministrationController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/SnippetFinderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/CachedSnippetFinder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/SnippetFinder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Framework/Routing/KnownIps/KnownIpsCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Framework/Routing/KnownIps/KnownIpsCollector.php';

        $a = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        $this->services['Shopware\\Administration\\Controller\\AdministrationController'] = $instance = new \Shopware\Administration\Controller\AdministrationController(($this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] ?? $this->getTemplateFinderService()), ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\FirstRunWizardClient'] ?? $this->getFirstRunWizardClientService()), new \Shopware\Administration\Snippet\CachedSnippetFinder(new \Shopware\Administration\Snippet\SnippetFinder(($this->services['kernel'] ?? $this->get('kernel', 1)), $a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService())), $this->parameters['kernel.supported_api_versions'], new \Shopware\Administration\Framework\Routing\KnownIps\KnownIpsCollector(), $a, ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), (\dirname(__DIR__, 4).'/vendor/shopware/core'), ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['currency.repository'] ?? $this->getCurrency_RepositoryService()), ($this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? $this->getHtmlSanitizerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['parameter_bag'] ?? ($this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this))));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Administration\Controller\DocumentServiceDeprecationController' shared service.
     *
     * @return \Shopware\Administration\Controller\DocumentServiceDeprecationController
     */
    protected function getDocumentServiceDeprecationControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/DocumentServiceDeprecationController.php';

        return $this->services['Shopware\\Administration\\Controller\\DocumentServiceDeprecationController'] = new \Shopware\Administration\Controller\DocumentServiceDeprecationController(($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\DocumentGeneratorRegistry'] ?? $this->getDocumentGeneratorRegistryService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\FileGenerator\\PdfGenerator'] ?? $this->getPdfGeneratorService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\InvoiceGenerator'] ?? $this->getInvoiceGeneratorService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\DeliveryNoteGenerator'] ?? $this->getDeliveryNoteGeneratorService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\StornoGenerator'] ?? $this->getStornoGeneratorService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\CreditNoteGenerator'] ?? $this->getCreditNoteGeneratorService()), ($this->services['Shopware\\Core\\Checkout\\Document\\DocumentGeneratorController'] ?? $this->getDocumentGeneratorControllerService()), ($this->services['Shopware\\Core\\Checkout\\Document\\Controller\\DocumentController'] ?? $this->getDocumentControllerService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Administration\Controller\NotificationController' shared service.
     *
     * @return \Shopware\Administration\Controller\NotificationController
     */
    protected function getNotificationControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/NotificationController.php';

        $this->services['Shopware\\Administration\\Controller\\NotificationController'] = $instance = new \Shopware\Administration\Controller\NotificationController(($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()), ($this->services['Shopware\\Administration\\Notification\\NotificationService'] ?? $this->getNotificationServiceService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Administration\Controller\UserConfigController' shared service.
     *
     * @return \Shopware\Administration\Controller\UserConfigController
     */
    protected function getUserConfigControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/UserConfigController.php';

        $this->services['Shopware\\Administration\\Controller\\UserConfigController'] = $instance = new \Shopware\Administration\Controller\UserConfigController(($this->services['user_config.repository'] ?? $this->getUserConfig_RepositoryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Administration\Notification\NotificationDefinition' shared service.
     *
     * @return \Shopware\Administration\Notification\NotificationDefinition
     */
    protected function getNotificationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Notification/NotificationDefinition.php';

        $this->services['Shopware\\Administration\\Notification\\NotificationDefinition'] = $instance = new \Shopware\Administration\Notification\NotificationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Administration\Notification\NotificationService' shared service.
     *
     * @return \Shopware\Administration\Notification\NotificationService
     */
    protected function getNotificationServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Notification/NotificationService.php';

        return $this->services['Shopware\\Administration\\Notification\\NotificationService'] = new \Shopware\Administration\Notification\NotificationService(($this->services['notification.repository'] ?? $this->getNotification_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Administration\Snippet\AppAdministrationSnippetDefinition' shared service.
     *
     * @return \Shopware\Administration\Snippet\AppAdministrationSnippetDefinition
     */
    protected function getAppAdministrationSnippetDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/AppAdministrationSnippetDefinition.php';

        $this->services['Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition'] = $instance = new \Shopware\Administration\Snippet\AppAdministrationSnippetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\Calculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Calculator
     */
    protected function getCalculatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Calculator.php';

        return $this->services['Shopware\\Core\\Checkout\\Cart\\Calculator'] = new \Shopware\Core\Checkout\Cart\Calculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? $this->getPercentagePriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AbsolutePriceCalculator'] ?? $this->getAbsolutePriceCalculatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\Facade\CartFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Facade\CartFacadeHookFactory
     */
    protected function getCartFacadeHookFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Facade/CartFacadeHookFactory.php';

        return $this->services['Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHookFactory'] = new \Shopware\Core\Checkout\Cart\Facade\CartFacadeHookFactory(($this->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHelper'] ?? $this->getCartFacadeHelperService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\Order\Api\OrderConverterController' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Order\Api\OrderConverterController
     */
    protected function getOrderConverterControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/Api/OrderConverterController.php';

        $this->services['Shopware\\Core\\Checkout\\Cart\\Order\\Api\\OrderConverterController'] = $instance = new \Shopware\Core\Checkout\Cart\Order\Api\OrderConverterController(($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService()), ($this->services['order.repository'] ?? $this->getOrder_RepositoryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\Order\Api\OrderRecalculationController' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Order\Api\OrderRecalculationController
     */
    protected function getOrderRecalculationControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/Api/OrderRecalculationController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/RecalculationService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionItemBuilder.php';

        $this->services['Shopware\\Core\\Checkout\\Cart\\Order\\Api\\OrderRecalculationController'] = $instance = new \Shopware\Core\Checkout\Cart\Order\Api\OrderRecalculationController(new \Shopware\Core\Checkout\Cart\Order\RecalculationService(($this->services['order.repository'] ?? $this->getOrder_RepositoryService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService()), ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService()), ($this->services['product.repository'] ?? $this->getProduct_RepositoryService()), ($this->services['order_address.repository'] ?? $this->getOrderAddress_RepositoryService()), ($this->services['customer_address.repository'] ?? $this->getCustomerAddress_RepositoryService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Processor'] ?? $this->getProcessorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? $this->getCartRuleLoaderService()), ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionItemBuilder()))));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\PriceActionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\PriceActionController
     */
    protected function getPriceActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/PriceActionController.php';

        $this->services['Shopware\\Core\\Checkout\\Cart\\PriceActionController'] = $instance = new \Shopware\Core\Checkout\Cart\PriceActionController(($this->services['tax.repository'] ?? $this->getTax_RepositoryService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\NetPriceCalculator'] ?? $this->getNetPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\GrossPriceCalculator'] ?? $this->getGrossPriceCalculatorService()), ($this->services['currency.repository'] ?? $this->getCurrency_RepositoryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartDeleteRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartDeleteRoute
     */
    protected function getCartDeleteRouteService()
    {
        $a = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartDeleteRoute($a, $b);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartItemAddRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartItemAddRoute
     */
    protected function getCartItemAddRouteService()
    {
        $a = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }
        $c = ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] ?? $this->getLineItemFactoryRegistryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }
        $d = ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartItemAddRoute(($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? $this->getCartCalculatorService()), $a, $b, $c, $d);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartItemRemoveRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartItemRemoveRoute
     */
    protected function getCartItemRemoveRouteService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartItemRemoveRoute($a, ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? $this->getCartCalculatorService()), $b);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartItemUpdateRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartItemUpdateRoute
     */
    protected function getCartItemUpdateRouteService()
    {
        $a = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] ?? $this->getLineItemFactoryRegistryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartItemUpdateRoute($a, ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? $this->getCartCalculatorService()), $b, $c);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartLoadRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartLoadRoute
     */
    protected function getCartLoadRouteService()
    {
        $a = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartLoadRoute($a, $b, ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? $this->getCartCalculatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartOrderRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartOrderRoute
     */
    protected function getCartOrderRouteService()
    {
        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $c = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $e = ($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] ?? $this->getPaymentHandlerRegistryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $f = ($this->services['app_payment_method.repository'] ?? $this->getAppPaymentMethod_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartOrderRoute(($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? $this->getCartCalculatorService()), $a, new \Shopware\Core\Checkout\Cart\Order\OrderPersister($a, $b), $c, $d, new \Shopware\Core\Checkout\Payment\PreparedPaymentService($e, $f, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), ($this->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? $this->getInitialStateIdLoaderService())));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartService' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartService
     */
    protected function getCartServiceService()
    {
        $a = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }
        $b = ($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventDispatcher'] ?? $this->getBusinessEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }
        $c = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? $this->getCartCalculatorService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }
        $d = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'] ?? $this->getCartLoadRouteService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }
        $e = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'] ?? $this->getCartDeleteRouteService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }
        $f = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'] ?? $this->getCartItemAddRouteService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }
        $g = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'] ?? $this->getCartItemUpdateRouteService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }
        $h = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'] ?? $this->getCartItemRemoveRouteService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }
        $i = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'] ?? $this->getCartOrderRouteService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
            return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartService($a, $b, $c, $d, $e, $f, $g, $h, $i);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition
     */
    protected function getCustomerAddressDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition
     */
    protected function getCustomerGroupRegistrationSalesChannelDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroupRegistrationSalesChannel/CustomerGroupRegistrationSalesChannelDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition
     */
    protected function getCustomerGroupTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroupTranslation/CustomerGroupTranslationDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition
     */
    protected function getCustomerGroupDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition
     */
    protected function getCustomerRecoveryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerRecovery/CustomerRecoveryDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition
     */
    protected function getCustomerTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerTag/CustomerTagDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition
     */
    protected function getCustomerWishlistProductDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerWishlistProduct/CustomerWishlistProductDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition
     */
    protected function getCustomerWishlistDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerWishlist/CustomerWishlistDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\Api\CustomerGroupRegistrationActionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Api\CustomerGroupRegistrationActionController
     */
    protected function getCustomerGroupRegistrationActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Api/CustomerGroupRegistrationActionController.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\Api\\CustomerGroupRegistrationActionController'] = new \Shopware\Core\Checkout\Customer\Api\CustomerGroupRegistrationActionController(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'] ?? $this->getSalesChannelContextRestorerService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\CustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\CustomerDefinition
     */
    protected function getCustomerDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\CustomerDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\AccountNewsletterRecipientRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\AccountNewsletterRecipientRoute
     */
    protected function getAccountNewsletterRecipientRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractAccountNewsletterRecipientRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AccountNewsletterRecipientRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountNewsletterRecipientRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\AccountNewsletterRecipientRoute(($this->services['sales_channel.newsletter_recipient.repository'] ?? $this->getSalesChannel_NewsletterRecipient_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\AddWishlistProductRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\AddWishlistProductRoute
     */
    protected function getAddWishlistProductRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractAddWishlistProductRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AddWishlistProductRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AddWishlistProductRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\AddWishlistProductRoute(($this->services['customer_wishlist.repository'] ?? $this->getCustomerWishlist_RepositoryService()), ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangeCustomerProfileRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangeCustomerProfileRoute
     */
    protected function getChangeCustomerProfileRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangeCustomerProfileRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangeCustomerProfileRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeCustomerProfileRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangeCustomerProfileRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\CustomerProfileValidationFactory'] ?? $this->getCustomerProfileValidationFactoryService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] ?? $this->getStoreApiCustomFieldMapperService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangeEmailRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangeEmailRoute
     */
    protected function getChangeEmailRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangeEmailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangeEmailRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeEmailRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangeEmailRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangeLanguageRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangeLanguageRoute
     */
    protected function getChangeLanguageRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangeLanguageRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangeLanguageRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeLanguageRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangeLanguageRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangePasswordRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangePasswordRoute
     */
    protected function getChangePasswordRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangePasswordRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangePasswordRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePasswordRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangePasswordRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangePaymentMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangePaymentMethodRoute
     */
    protected function getChangePaymentMethodRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangePaymentMethodRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangePaymentMethodRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePaymentMethodRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangePaymentMethodRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\CustomerGroupRegistrationSettingsRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\CustomerGroupRegistrationSettingsRoute
     */
    protected function getCustomerGroupRegistrationSettingsRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractCustomerGroupRegistrationSettingsRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerGroupRegistrationSettingsRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerGroupRegistrationSettingsRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\CustomerGroupRegistrationSettingsRoute(($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\CustomerRecoveryIsExpiredRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\CustomerRecoveryIsExpiredRoute
     */
    protected function getCustomerRecoveryIsExpiredRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractCustomerRecoveryIsExpiredRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerRecoveryIsExpiredRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRecoveryIsExpiredRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\CustomerRecoveryIsExpiredRoute(($this->services['customer_recovery.repository'] ?? $this->getCustomerRecovery_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\CustomerRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\CustomerRoute
     */
    protected function getCustomerRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractCustomerRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\CustomerRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\DeleteAddressRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\DeleteAddressRoute
     */
    protected function getDeleteAddressRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractDeleteAddressRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerAddressValidationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/DeleteAddressRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteAddressRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\DeleteAddressRoute(($this->services['customer_address.repository'] ?? $this->getCustomerAddress_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\DeleteCustomerRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\DeleteCustomerRoute
     */
    protected function getDeleteCustomerRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractDeleteCustomerRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/DeleteCustomerRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteCustomerRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\DeleteCustomerRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\DownloadRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\DownloadRoute
     */
    protected function getDownloadRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractDownloadRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/DownloadRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/DownloadResponseGenerator.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DownloadRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\DownloadRoute(($this->services['order_line_item_download.repository'] ?? $this->getOrderLineItemDownload_RepositoryService()), new \Shopware\Core\Content\Media\File\DownloadResponseGenerator(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? $this->getUrlGeneratorInterfaceService()), ($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService()), 'php'));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ListAddressRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ListAddressRoute
     */
    protected function getListAddressRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractListAddressRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ListAddressRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ListAddressRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ListAddressRoute(($this->services['customer_address.repository'] ?? $this->getCustomerAddress_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\LoadWishlistRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\LoadWishlistRoute
     */
    protected function getLoadWishlistRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractLoadWishlistRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/LoadWishlistRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoadWishlistRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\LoadWishlistRoute(($this->services['customer_wishlist.repository'] ?? $this->getCustomerWishlist_RepositoryService()), ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] = new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory())));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\LoginRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\LoginRoute
     */
    protected function getLoginRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractLoginRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/LoginRoute.php';

        $a = new \Shopware\Core\Framework\RateLimiter\RateLimiter();

        $b = ($this->privates['cache.rate_limiter'] ?? $this->getCache_RateLimiterService());
        $c = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());
        $d = ($this->privates['lock.default.factory'] ?? $this->getLock_Default_FactoryService());

        $a->registerLimiterFactory('login', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'login'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('guest_login', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'guest_login'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('oauth', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'oauth'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('reset_password', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'reset_password'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('user_recovery', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'user_recovery'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('contact_form', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'contact_form'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('notification', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'notification'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('newsletter_form', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'newsletter_form'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('cart_add_line_item', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'system_config', 'reset' => '1 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.cart_add_line_item.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'cart_add_line_item'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoginRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\LoginRoute(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyPasswordVerifier'] ?? $this->getLegacyPasswordVerifierService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'] ?? $this->getCartRestorerService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\LogoutRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\LogoutRoute
     */
    protected function getLogoutRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractLogoutRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/LogoutRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\LogoutRoute(($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\MergeWishlistProductRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\MergeWishlistProductRoute
     */
    protected function getMergeWishlistProductRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractMergeWishlistProductRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/MergeWishlistProductRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\MergeWishlistProductRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\MergeWishlistProductRoute(($this->services['customer_wishlist.repository'] ?? $this->getCustomerWishlist_RepositoryService()), ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\RegisterConfirmRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\RegisterConfirmRoute
     */
    protected function getRegisterConfirmRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractRegisterConfirmRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/RegisterConfirmRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterConfirmRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\RegisterConfirmRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\RegisterRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\RegisterRoute
     */
    protected function getRegisterRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractRegisterRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/RegisterRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/CustomerValidationFactory.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\RegisterRoute(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), new \Shopware\Core\Checkout\Customer\Validation\CustomerValidationFactory(($this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\CustomerProfileValidationFactory'] ?? $this->getCustomerProfileValidationFactoryService())), ($this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\AddressValidationFactory'] ?? $this->getAddressValidationFactoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService()), ($this->services['sales_channel.country.repository'] ?? $this->getSalesChannel_Country_RepositoryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] ?? $this->getStoreApiCustomFieldMapperService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\RemoveWishlistProductRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\RemoveWishlistProductRoute
     */
    protected function getRemoveWishlistProductRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractRemoveWishlistProductRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/RemoveWishlistProductRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RemoveWishlistProductRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\RemoveWishlistProductRoute(($this->services['customer_wishlist.repository'] ?? $this->getCustomerWishlist_RepositoryService()), ($this->services['customer_wishlist_product.repository'] ?? $this->getCustomerWishlistProduct_RepositoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ResetPasswordRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ResetPasswordRoute
     */
    protected function getResetPasswordRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractResetPasswordRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ResetPasswordRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ResetPasswordRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ResetPasswordRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['customer_recovery.repository'] ?? $this->getCustomerRecovery_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\SendPasswordRecoveryMailRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\SendPasswordRecoveryMailRoute
     */
    protected function getSendPasswordRecoveryMailRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractSendPasswordRecoveryMailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/SendPasswordRecoveryMailRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SendPasswordRecoveryMailRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\SendPasswordRecoveryMailRoute(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['customer_recovery.repository'] ?? $this->getCustomerRecovery_RepositoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\SwitchDefaultAddressRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\SwitchDefaultAddressRoute
     */
    protected function getSwitchDefaultAddressRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractSwitchDefaultAddressRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerAddressValidationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/SwitchDefaultAddressRoute.php';

        $a = ($this->services['customer_address.repository'] ?? $this->getCustomerAddress_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'];
        }
        $b = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\SwitchDefaultAddressRoute($a, $b, $c);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\UpsertAddressRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\UpsertAddressRoute
     */
    protected function getUpsertAddressRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractUpsertAddressRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerAddressValidationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/UpsertAddressRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\UpsertAddressRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\UpsertAddressRoute(($this->services['customer_address.repository'] ?? $this->getCustomerAddress_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\AddressValidationFactory'] ?? $this->getAddressValidationFactoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] ?? $this->getStoreApiCustomFieldMapperService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition
     */
    protected function getDocumentBaseConfigSalesChannelDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentBaseConfigSalesChannel/DocumentBaseConfigSalesChannelDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition
     */
    protected function getDocumentBaseConfigDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentBaseConfig/DocumentBaseConfigDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition
     */
    protected function getDocumentTypeTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentTypeTranslation/DocumentTypeTranslationDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition
     */
    protected function getDocumentTypeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentType/DocumentTypeDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Document\Controller\DocumentController' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Controller\DocumentController
     */
    protected function getDocumentControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Controller/DocumentController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/DocumentMerger.php';
        include_once \dirname(__DIR__, 4).'/vendor/tecnickcom/tcpdf/tcpdf.php';
        include_once \dirname(__DIR__, 4).'/vendor/setasign/fpdi/src/FpdiTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/setasign/fpdi/src/Tcpdf/Fpdi.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? $this->getDocumentGeneratorService());
        $b = ($this->services['document.repository'] ?? $this->getDocument_RepositoryService());

        $this->services['Shopware\\Core\\Checkout\\Document\\Controller\\DocumentController'] = $instance = new \Shopware\Core\Checkout\Document\Controller\DocumentController(($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService()), $a, new \Shopware\Core\Checkout\Document\Service\DocumentMerger($b, ($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService()), $a, new \setasign\Fpdi\Tcpdf\Fpdi()), $b);

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Document\DocumentDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentDefinition
     */
    protected function getDocumentDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Document\\DocumentDefinition'] = $instance = new \Shopware\Core\Checkout\Document\DocumentDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Document\DocumentGeneratorController' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentGeneratorController
     */
    protected function getDocumentGeneratorControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGeneratorController.php';

        $this->services['Shopware\\Core\\Checkout\\Document\\DocumentGeneratorController'] = $instance = new \Shopware\Core\Checkout\Document\DocumentGeneratorController(($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? $this->getDocumentGeneratorService()), ($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Document\SalesChannel\DocumentRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\SalesChannel\DocumentRoute
     */
    protected function getDocumentRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/SalesChannel/AbstractDocumentRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/SalesChannel/DocumentRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Document\\SalesChannel\\DocumentRoute'] = new \Shopware\Core\Checkout\Document\SalesChannel\DocumentRoute(($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? $this->getDocumentGeneratorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition
     */
    protected function getOrderAddressDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition
     */
    protected function getOrderCustomerDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderCustomer/OrderCustomerDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition
     */
    protected function getOrderDeliveryPositionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderDeliveryPosition/OrderDeliveryPositionDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition
     */
    protected function getOrderDeliveryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderDelivery/OrderDeliveryDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition
     */
    protected function getOrderLineItemDownloadDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderLineItemDownload/OrderLineItemDownloadDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition
     */
    protected function getOrderLineItemDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderLineItem/OrderLineItemDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition
     */
    protected function getOrderTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTag/OrderTagDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition
     */
    protected function getOrderTransactionCaptureRefundPositionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefundPosition/OrderTransactionCaptureRefundPositionDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition
     */
    protected function getOrderTransactionCaptureRefundDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefund/OrderTransactionCaptureRefundDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition
     */
    protected function getOrderTransactionCaptureDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCapture/OrderTransactionCaptureDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition
     */
    protected function getOrderTransactionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransaction/OrderTransactionDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\Api\OrderActionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Api\OrderActionController
     */
    protected function getOrderActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Api/OrderActionController.php';

        $this->services['Shopware\\Core\\Checkout\\Order\\Api\\OrderActionController'] = $instance = new \Shopware\Core\Checkout\Order\Api\OrderActionController(($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? $this->getOrderServiceService()), ($this->privates['Shopware\\Core\\Framework\\Api\\Converter\\ApiVersionConverter'] ?? $this->getApiVersionConverterService()), ($this->services['Shopware\\Core\\System\\StateMachine\\StateMachineDefinition'] ?? $this->getStateMachineDefinitionService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentRefundProcessor'] ?? $this->getPaymentRefundProcessorService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\OrderDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\OrderDefinition
     */
    protected function getOrderDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] = $instance = new \Shopware\Core\Checkout\Order\OrderDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\SalesChannel\CancelOrderRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\SalesChannel\CancelOrderRoute
     */
    protected function getCancelOrderRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/AbstractCancelOrderRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/CancelOrderRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\CancelOrderRoute'] = new \Shopware\Core\Checkout\Order\SalesChannel\CancelOrderRoute(($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? $this->getOrderServiceService()), ($this->services['order.repository'] ?? $this->getOrder_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\SalesChannel\OrderRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\SalesChannel\OrderRoute
     */
    protected function getOrderRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/AbstractOrderRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/OrderRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute'] = new \Shopware\Core\Checkout\Order\SalesChannel\OrderRoute(($this->services['order.repository'] ?? $this->getOrder_RepositoryService()), ($this->services['promotion.repository'] ?? $this->getPromotion_RepositoryService()), ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Order\SalesChannel\SetPaymentOrderRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\SalesChannel\SetPaymentOrderRoute
     */
    protected function getSetPaymentOrderRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/AbstractSetPaymentOrderRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/SetPaymentOrderRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\SetPaymentOrderRoute'] = new \Shopware\Core\Checkout\Order\SalesChannel\SetPaymentOrderRoute(($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? $this->getOrderServiceService()), ($this->services['order.repository'] ?? $this->getOrder_RepositoryService()), ($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? $this->getSortedPaymentMethodRouteService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? $this->getCartRuleLoaderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? $this->getInitialStateIdLoaderService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition
     */
    protected function getPaymentMethodTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Aggregate/PaymentMethodTranslation/PaymentMethodTranslationDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Payment\Cart\PaymentRefundProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentRefundProcessor
     */
    protected function getPaymentRefundProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentRefundProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefund/OrderTransactionCaptureRefundStateHandler.php';

        return $this->services['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentRefundProcessor'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentRefundProcessor(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundStateHandler(($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? $this->getStateMachineRegistryService())), ($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] ?? $this->getPaymentHandlerRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Payment\Controller\PaymentController' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Controller\PaymentController
     */
    protected function getPaymentControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Controller/PaymentController.php';

        $this->services['Shopware\\Core\\Checkout\\Payment\\Controller\\PaymentController'] = $instance = new \Shopware\Core\Checkout\Payment\Controller\PaymentController(($this->privates['Shopware\\Core\\Checkout\\Payment\\PaymentService'] ?? $this->getPaymentServiceService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService()), ($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\Token\\JWTFactoryV2'] ?? $this->getJWTFactoryV2Service()), ($this->services['order.repository'] ?? $this->getOrder_RepositoryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Payment\PaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\PaymentMethodDefinition
     */
    protected function getPaymentMethodDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition'] = $instance = new \Shopware\Core\Checkout\Payment\PaymentMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Payment\SalesChannel\CachedPaymentMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\SalesChannel\CachedPaymentMethodRoute
     */
    protected function getCachedPaymentMethodRouteService()
    {
        $a = ($this->services['sales_channel.payment_method.repository'] ?? $this->getSalesChannel_PaymentMethod_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'] = new \Shopware\Core\Checkout\Payment\SalesChannel\CachedPaymentMethodRoute(new \Shopware\Core\Checkout\Payment\SalesChannel\PaymentMethodRoute($a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $b, $c, []);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Payment\SalesChannel\HandlePaymentMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\SalesChannel\HandlePaymentMethodRoute
     */
    protected function getHandlePaymentMethodRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/AbstractHandlePaymentMethodRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/HandlePaymentMethodRoute.php';

        return $this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\HandlePaymentMethodRoute'] = new \Shopware\Core\Checkout\Payment\SalesChannel\HandlePaymentMethodRoute(($this->privates['Shopware\\Core\\Checkout\\Payment\\PaymentService'] ?? $this->getPaymentServiceService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Payment\SalesChannel\SalesChannelPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\SalesChannel\SalesChannelPaymentMethodDefinition
     */
    protected function getSalesChannelPaymentMethodDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition'] = $instance = new \Shopware\Core\Checkout\Payment\SalesChannel\SalesChannelPaymentMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Payment\SalesChannel\SortedPaymentMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\SalesChannel\SortedPaymentMethodRoute
     */
    protected function getSortedPaymentMethodRouteService()
    {
        $a = ($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'] ?? $this->getCachedPaymentMethodRouteService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] = new \Shopware\Core\Checkout\Payment\SalesChannel\SortedPaymentMethodRoute($a);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition
     */
    protected function getPromotionCartRuleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionCartRule/PromotionCartRuleDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition
     */
    protected function getPromotionDiscountPriceDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscountPrice/PromotionDiscountPriceDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition
     */
    protected function getPromotionDiscountRuleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscountRule/PromotionDiscountRuleDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition
     */
    protected function getPromotionDiscountDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscount/PromotionDiscountDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition
     */
    protected function getPromotionIndividualCodeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionIndividualCode/PromotionIndividualCodeDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition
     */
    protected function getPromotionOrderRuleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionOrderRule/PromotionOrderRuleDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition
     */
    protected function getPromotionPersonaCustomerDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionPersonaCustomer/PromotionPersonaCustomerDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition
     */
    protected function getPromotionPersonaRuleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionPersonaRule/PromotionPersonaRuleDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition
     */
    protected function getPromotionSalesChannelDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSalesChannel/PromotionSalesChannelDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition
     */
    protected function getPromotionSetGroupRuleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSetGroupRule/PromotionSetGroupRuleDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition
     */
    protected function getPromotionSetGroupDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSetGroup/PromotionSetGroupDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition
     */
    protected function getPromotionTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionTranslation/PromotionTranslationDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Api\PromotionActionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Api\PromotionActionController
     */
    protected function getPromotionActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Api/PromotionActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Util/PromotionCodesLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Util/PromotionCodesRemover.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Api\\PromotionActionController'] = $instance = new \Shopware\Core\Checkout\Promotion\Api\PromotionActionController(new \Shopware\Core\Checkout\Promotion\Util\PromotionCodesLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), new \Shopware\Core\Checkout\Promotion\Util\PromotionCodesRemover(($this->services['promotion_individual_code.repository'] ?? $this->getPromotionIndividualCode_RepositoryService())), ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupServiceRegistry'] ?? $this->getLineItemGroupServiceRegistryService()), ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\FilterServiceRegistry'] ?? $this->getFilterServiceRegistryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\Api\PromotionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Api\PromotionController
     */
    protected function getPromotionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Api/PromotionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Util/PromotionCodeService.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\Api\\PromotionController'] = $instance = new \Shopware\Core\Checkout\Promotion\Api\PromotionController(new \Shopware\Core\Checkout\Promotion\Util\PromotionCodeService(($this->services['promotion.repository'] ?? $this->getPromotion_RepositoryService()), ($this->services['promotion_individual_code.repository'] ?? $this->getPromotionIndividualCode_RepositoryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Promotion\PromotionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\PromotionDefinition
     */
    protected function getPromotionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/PromotionDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\PromotionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition
     */
    protected function getShippingMethodPriceDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodPrice/ShippingMethodPriceDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition
     */
    protected function getShippingMethodTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodTag/ShippingMethodTagDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition
     */
    protected function getShippingMethodTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodTranslation/ShippingMethodTranslationDefinition.php';

        $this->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Shipping\SalesChannel\CachedShippingMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\SalesChannel\CachedShippingMethodRoute
     */
    protected function getCachedShippingMethodRouteService()
    {
        $a = ($this->services['sales_channel.shipping_method.repository'] ?? $this->getSalesChannel_ShippingMethod_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'] = new \Shopware\Core\Checkout\Shipping\SalesChannel\CachedShippingMethodRoute(new \Shopware\Core\Checkout\Shipping\SalesChannel\ShippingMethodRoute($a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $b, $c, []);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Shipping\SalesChannel\SalesChannelShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\SalesChannel\SalesChannelShippingMethodDefinition
     */
    protected function getSalesChannelShippingMethodDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\SalesChannel\SalesChannelShippingMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Shipping\SalesChannel\SortedShippingMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\SalesChannel\SortedShippingMethodRoute
     */
    protected function getSortedShippingMethodRouteService()
    {
        $a = ($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'] ?? $this->getCachedShippingMethodRouteService());

        if (isset($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'])) {
            return $this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'];
        }

        return $this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'] = new \Shopware\Core\Checkout\Shipping\SalesChannel\SortedShippingMethodRoute($a);
    }

    /*
     * Gets the public 'Shopware\Core\Checkout\Shipping\ShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\ShippingMethodDefinition
     */
    protected function getShippingMethodDefinitionService()
    {
        $this->services['Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\ShippingMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition
     */
    protected function getCategoryTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Aggregate/CategoryTag/CategoryTagDefinition.php';

        $this->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition'] = $instance = new \Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition
     */
    protected function getCategoryTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Aggregate/CategoryTranslation/CategoryTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition'] = $instance = new \Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\CategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\CategoryDefinition
     */
    protected function getCategoryDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] = $instance = new \Shopware\Core\Content\Category\CategoryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\CategoryHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Category\CategoryHydrator
     */
    protected function getCategoryHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/CategoryHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Category\\CategoryHydrator'] = new \Shopware\Core\Content\Category\CategoryHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\CachedCategoryRoute' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\CachedCategoryRoute
     */
    protected function getCachedCategoryRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/AbstractCategoryRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/CachedCategoryRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/CategoryRoute.php';

        return $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute'] = new \Shopware\Core\Content\Category\SalesChannel\CachedCategoryRoute(new \Shopware\Core\Content\Category\SalesChannel\CategoryRoute(($this->services['sales_channel.category.repository'] ?? $this->getSalesChannel_Category_RepositoryService()), ($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? $this->getSalesChannelCmsPageLoaderService()), ($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition'] ?? $this->getSalesChannelCategoryDefinitionService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\CachedNavigationRoute' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\CachedNavigationRoute
     */
    protected function getCachedNavigationRouteService()
    {
        $a = ($this->services['sales_channel.category.repository'] ?? $this->getSalesChannel_Category_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'];
        }

        return $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'] = new \Shopware\Core\Content\Category\SalesChannel\CachedNavigationRoute(new \Shopware\Core\Content\Category\SalesChannel\NavigationRoute(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $b, $c, []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\CategoryListRoute' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\CategoryListRoute
     */
    protected function getCategoryListRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/AbstractCategoryListRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/CategoryListRoute.php';

        return $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CategoryListRoute'] = new \Shopware\Core\Content\Category\SalesChannel\CategoryListRoute(($this->services['sales_channel.category.repository'] ?? $this->getSalesChannel_Category_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\SalesChannelCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\SalesChannelCategoryDefinition
     */
    protected function getSalesChannelCategoryDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition'] = $instance = new \Shopware\Core\Content\Category\SalesChannel\SalesChannelCategoryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\TreeBuildingNavigationRoute' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\TreeBuildingNavigationRoute
     */
    protected function getTreeBuildingNavigationRouteService()
    {
        $a = ($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'] ?? $this->getCachedNavigationRouteService());

        if (isset($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute'];
        }

        return $this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute'] = new \Shopware\Core\Content\Category\SalesChannel\TreeBuildingNavigationRoute($a);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition
     */
    protected function getCmsBlockDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsBlock/CmsBlockDefinition.php';

        $this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition
     */
    protected function getCmsPageTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsPageTranslation/CmsPageTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition
     */
    protected function getCmsSectionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSection/CmsSectionDefinition.php';

        $this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition
     */
    protected function getCmsSlotTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSlotTranslation/CmsSlotTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition
     */
    protected function getCmsSlotDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSlot/CmsSlotDefinition.php';

        $this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\CmsPageDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\CmsPageDefinition
     */
    protected function getCmsPageDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Cms\\CmsPageDefinition'] = $instance = new \Shopware\Core\Content\Cms\CmsPageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\DataAbstractionLayer\FieldSerializer\SlotConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Content\Cms\DataAbstractionLayer\FieldSerializer\SlotConfigFieldSerializer
     */
    protected function getSlotConfigFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataAbstractionLayer/FieldSerializer/SlotConfigFieldSerializer.php';

        return $this->services['Shopware\\Core\\Content\\Cms\\DataAbstractionLayer\\FieldSerializer\\SlotConfigFieldSerializer'] = new \Shopware\Core\Content\Cms\DataAbstractionLayer\FieldSerializer\SlotConfigFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\DataResolver\CmsSlotsDataResolver' shared service.
     *
     * @return \Shopware\Core\Content\Cms\DataResolver\CmsSlotsDataResolver
     */
    protected function getCmsSlotsDataResolverService()
    {
        $a = ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver'])) {
            return $this->services['Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver'];
        }

        return $this->services['Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver'] = new \Shopware\Core\Content\Cms\DataResolver\CmsSlotsDataResolver(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Media\\Cms\\ImageCmsElementResolver'] ?? $this->getImageCmsElementResolverService());
            yield 1 => ($this->privates['Shopware\\Core\\Content\\Media\\Cms\\Type\\ImageSliderTypeDataResolver'] ?? $this->getImageSliderTypeDataResolverService());
            yield 2 => ($this->privates['Shopware\\Core\\Content\\Media\\Cms\\Type\\ImageGalleryTypeDataResolver'] ?? $this->getImageGalleryTypeDataResolverService());
            yield 3 => ($this->privates['Shopware\\Core\\Content\\Media\\Cms\\YoutubeVideoCmsElementResolver'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\Cms\\YoutubeVideoCmsElementResolver'] = new \Shopware\Core\Content\Media\Cms\YoutubeVideoCmsElementResolver()));
            yield 4 => ($this->privates['Shopware\\Core\\Content\\Media\\Cms\\VimeoVideoCmsElementResolver'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\Cms\\VimeoVideoCmsElementResolver'] = new \Shopware\Core\Content\Media\Cms\VimeoVideoCmsElementResolver()));
            yield 5 => ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductBoxCmsElementResolver'] ?? $this->getProductBoxCmsElementResolverService());
            yield 6 => ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductListingCmsElementResolver'] ?? $this->getProductListingCmsElementResolverService());
            yield 7 => ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductSliderCmsElementResolver'] ?? $this->getProductSliderCmsElementResolverService());
            yield 8 => ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductNameCmsElementResolver'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductNameCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductNameCmsElementResolver()));
            yield 9 => ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ManufacturerLogoCmsElementResolver'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ManufacturerLogoCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ManufacturerLogoCmsElementResolver()));
            yield 10 => ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\CrossSellingCmsElementResolver'] ?? $this->getCrossSellingCmsElementResolverService());
            yield 11 => ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductDescriptionReviewsCmsElementResolver'] ?? $this->getProductDescriptionReviewsCmsElementResolverService());
            yield 12 => ($this->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'] ?? $this->getBuyBoxCmsElementResolverService());
            yield 13 => ($this->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\TextCmsElementResolver'] ?? $this->getTextCmsElementResolverService());
            yield 14 => ($this->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\FormCmsElementResolver'] ?? $this->getFormCmsElementResolverService());
        }, 15), ['product' => $a], ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\SalesChannel\CmsRoute' shared service.
     *
     * @return \Shopware\Core\Content\Cms\SalesChannel\CmsRoute
     */
    protected function getCmsRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/SalesChannel/AbstractCmsRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/SalesChannel/CmsRoute.php';

        return $this->services['Shopware\\Core\\Content\\Cms\\SalesChannel\\CmsRoute'] = new \Shopware\Core\Content\Cms\SalesChannel\CmsRoute(($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? $this->getSalesChannelCmsPageLoaderService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageRepository' shared service.
     *
     * @return \Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageRepository
     *
     * @deprecated Since shopware/core 6.5.0: tag:v6.5.0 "Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageRepository" service alias is deprecated, it will be removed in 6.5.0.
     */
    protected function getSalesChannelCmsPageRepositoryService()
    {
        trigger_deprecation('shopware/core', '6.5.0', 'tag:v6.5.0 "Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageRepository" service alias is deprecated, it will be removed in 6.5.0.');

        return $this->services['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageRepository'] = new \Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageRepository(($this->services['cms_page.repository'] ?? $this->getCmsPage_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\ContactForm\SalesChannel\ContactFormRoute' shared service.
     *
     * @return \Shopware\Core\Content\ContactForm\SalesChannel\ContactFormRoute
     */
    protected function getContactFormRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ContactForm/SalesChannel/AbstractContactFormRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ContactForm/SalesChannel/ContactFormRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ContactForm/Validation/ContactFormValidationFactory.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
        $b = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        return $this->services['Shopware\\Core\\Content\\ContactForm\\SalesChannel\\ContactFormRoute'] = new \Shopware\Core\Content\ContactForm\SalesChannel\ContactFormRoute(new \Shopware\Core\Content\ContactForm\Validation\ContactFormValidationFactory($a, $b), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), $a, $b, ($this->services['cms_slot.repository'] ?? $this->getCmsSlot_RepositoryService()), ($this->services['salutation.repository'] ?? $this->getSalutation_RepositoryService()), ($this->services['category.repository'] ?? $this->getCategory_RepositoryService()), ($this->services['landing_page.repository'] ?? $this->getLandingPage_RepositoryService()), ($this->services['product.repository'] ?? $this->getProduct_RepositoryService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition
     */
    protected function getFlowSequenceDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Aggregate/FlowSequence/FlowSequenceDefinition.php';

        $this->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition'] = $instance = new \Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition
     */
    protected function getFlowTemplateDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Aggregate/FlowTemplate/FlowTemplateDefinition.php';

        $this->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition'] = $instance = new \Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Flow\DataAbstractionLayer\FieldSerializer\FlowTemplateConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\DataAbstractionLayer\FieldSerializer\FlowTemplateConfigFieldSerializer
     */
    protected function getFlowTemplateConfigFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/DataAbstractionLayer/FieldSerializer/FlowTemplateConfigFieldSerializer.php';

        return $this->services['Shopware\\Core\\Content\\Flow\\DataAbstractionLayer\\FieldSerializer\\FlowTemplateConfigFieldSerializer'] = new \Shopware\Core\Content\Flow\DataAbstractionLayer\FieldSerializer\FlowTemplateConfigFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Flow\Dispatching\CachedFlowLoader' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\CachedFlowLoader
     */
    protected function getCachedFlowLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/AbstractFlowLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/CachedFlowLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowLoader.php';

        return $this->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'] = new \Shopware\Core\Content\Flow\Dispatching\CachedFlowLoader(new \Shopware\Core\Content\Flow\Dispatching\FlowLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Flow\Dispatching\FlowExecutor' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\FlowExecutor
     */
    protected function getFlowExecutorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowExecutor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Rule/FlowRuleScopeBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Delivery/DeliveryBuilder.php';

        return $this->services['Shopware\\Core\\Content\\Flow\\Dispatching\\FlowExecutor'] = new \Shopware\Core\Content\Flow\Dispatching\FlowExecutor(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\App\\FlowAction\\AppFlowActionProvider'] ?? $this->getAppFlowActionProviderService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'] ?? $this->getCachedRuleLoaderService()), new \Shopware\Core\Content\Flow\Rule\FlowRuleScopeBuilder(($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryBuilder'] = new \Shopware\Core\Checkout\Cart\Delivery\DeliveryBuilder())), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'] ?? $this->getProductCartProcessorService());
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'] ?? $this->getPromotionCollectorService());
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\CustomCartProcessor'] ?? $this->getCustomCartProcessorService());
            yield 3 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'] ?? $this->getDeliveryProcessorService());
        }, 4)), new RewindableGenerator(function () {
            yield 'action.add.order.tag' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'] ?? $this->getAddOrderTagActionService());
            yield 'action.add.customer.tag' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'] ?? $this->getAddCustomerTagActionService());
            yield 'action.remove.order.tag' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'] ?? $this->getRemoveOrderTagActionService());
            yield 'action.remove.customer.tag' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'] ?? $this->getRemoveCustomerTagActionService());
            yield 'action.change.customer.group' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'] ?? $this->getChangeCustomerGroupActionService());
            yield 'action.change.customer.status' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'] ?? $this->getChangeCustomerStatusActionService());
            yield 'action.generate.document' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'] ?? $this->getGenerateDocumentActionService());
            yield 'action.grant.download.access' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'] ?? $this->getGrantDownloadAccessActionService());
            yield 'action.mail.send' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'] ?? $this->getSendMailActionService());
            yield 'action.set.order.state' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'] ?? $this->getSetOrderStateActionService());
            yield 'action.set.customer.custom.field' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'] ?? $this->getSetCustomerCustomFieldActionService());
            yield 'action.set.customer.group.custom.field' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'] ?? $this->getSetCustomerGroupCustomFieldActionService());
            yield 'action.add.customer.affiliate.and.campaign.code' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'] ?? $this->getAddCustomerAffiliateAndCampaignCodeActionService());
            yield 'action.add.order.affiliate.and.campaign.code' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'] ?? $this->getAddOrderAffiliateAndCampaignCodeActionService());
            yield 'action.set.order.custom.field' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'] ?? $this->getSetOrderCustomFieldActionService());
            yield 'action.stop.flow' => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\StopFlowAction'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\StopFlowAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\StopFlowAction()));
        }, 16));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Flow\Dispatching\FlowFactory' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\FlowFactory
     */
    protected function getFlowFactoryService()
    {
        return $this->services['Shopware\\Core\\Content\\Flow\\Dispatching\\FlowFactory'] = new \Shopware\Core\Content\Flow\Dispatching\FlowFactory(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'] ?? $this->getOrderStorerService());
            yield 1 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'] ?? $this->getCustomerStorerService());
            yield 2 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\MailStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\MailStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\MailStorer()));
            yield 3 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'] ?? $this->getUserStorerService());
            yield 4 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'] ?? $this->getCustomerGroupStorerService());
            yield 5 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'] ?? $this->getCustomerRecoveryStorerService());
            yield 6 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'] ?? $this->getOrderTransactionStorerService());
            yield 7 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'] ?? $this->getNewsletterRecipientStorerService());
            yield 8 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContactFormDataStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContactFormDataStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\ContactFormDataStorer()));
            yield 9 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ConfirmUrlStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ConfirmUrlStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\ConfirmUrlStorer()));
            yield 10 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContentsStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContentsStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\ContentsStorer()));
            yield 11 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContextTokenStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContextTokenStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\ContextTokenStorer()));
            yield 12 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\EmailStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\EmailStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\EmailStorer()));
            yield 13 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\MessageStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\MessageStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\MessageStorer()));
            yield 14 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NameStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NameStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\NameStorer()));
            yield 15 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\RecipientsStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\RecipientsStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\RecipientsStorer()));
            yield 16 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ResetUrlStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ResetUrlStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\ResetUrlStorer()));
            yield 17 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ShopNameStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ShopNameStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\ShopNameStorer()));
            yield 18 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\SubjectStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\SubjectStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\SubjectStorer()));
            yield 19 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\TemplateDataStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\TemplateDataStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\TemplateDataStorer()));
            yield 20 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UrlStorer'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UrlStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\UrlStorer()));
        }, 21));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Flow\FlowDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\FlowDefinition
     */
    protected function getFlowDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/FlowDefinition.php';

        $this->services['Shopware\\Core\\Content\\Flow\\FlowDefinition'] = $instance = new \Shopware\Core\Content\Flow\FlowDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition
     */
    protected function getImportExportFileDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php';

        $this->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition
     */
    protected function getImportExportLogDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Aggregate/ImportExportLog/ImportExportLogDefinition.php';

        $this->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ImportExport\Controller\ImportExportActionController' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Controller\ImportExportActionController
     */
    protected function getImportExportActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Controller/ImportExportActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/SupportedFeaturesService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/DownloadService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/AbstractMappingService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/MappingService.php';

        $a = ($this->services['import_export_profile.repository'] ?? $this->getImportExportProfile_RepositoryService());
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService());

        $this->services['Shopware\\Core\\Content\\ImportExport\\Controller\\ImportExportActionController'] = $instance = new \Shopware\Core\Content\ImportExport\Controller\ImportExportActionController(new \Shopware\Core\Content\ImportExport\Service\SupportedFeaturesService($this->parameters['import_export.supported_entities'], $this->parameters['import_export.supported_file_types']), ($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'] ?? $this->getImportExportServiceService()), new \Shopware\Core\Content\ImportExport\Service\DownloadService(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), ($this->services['import_export_file.repository'] ?? $this->getImportExportFile_RepositoryService())), $a, ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition'] ?? $this->getImportExportLogDefinitionService()), ($this->privates['Shopware\\Core\\Framework\\Api\\Converter\\ApiVersionConverter'] ?? $this->getApiVersionConverterService()), ($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'] ?? $this->getImportExportFactoryService()), $b, ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService()), new \Shopware\Core\Content\ImportExport\Service\MappingService(($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'] ?? $this->getFileServiceService()), $a, $b));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ImportExport\ImportExportFactory' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportFactory
     */
    protected function getImportExportFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportFactory.php';

        $a = ($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'] ?? $this->getImportExportServiceService());

        if (isset($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'])) {
            return $this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'])) {
            return $this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'];
        }
        $c = ($this->services['import_export_log.repository'] ?? $this->getImportExportLog_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'])) {
            return $this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'];
        }
        $d = ($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'] ?? $this->getFileServiceService());

        if (isset($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'])) {
            return $this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'];
        }

        return $this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'] = new \Shopware\Core\Content\ImportExport\ImportExportFactory($a, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), $b, $c, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $d, new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Reader\\CsvReaderFactory'] ?? ($this->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Reader\\CsvReaderFactory'] = new \Shopware\Core\Content\ImportExport\Processing\Reader\CsvReaderFactory()));
        }, 1), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Writer\\CsvFileWriterFactory'] ?? $this->getCsvFileWriterFactoryService());
        }, 1), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Pipe\\PipeFactory'] ?? $this->getPipeFactoryService());
        }, 1));
    }

    /*
     * Gets the public 'Shopware\Core\Content\ImportExport\ImportExportProfileDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportProfileDefinition
     */
    protected function getImportExportProfileDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportProfileDefinition.php';

        $this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\ImportExportProfileDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition
     */
    protected function getImportExportProfileTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportProfileTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ImportExport\Message\ImportExportHandler' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Message\ImportExportHandler
     */
    protected function getImportExportHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Message/ImportExportHandler.php';

        $a = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'])) {
            return $this->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'];
        }
        $b = ($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'] ?? $this->getImportExportFactoryService());

        if (isset($this->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'])) {
            return $this->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'];
        }

        return $this->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'] = new \Shopware\Core\Content\ImportExport\Message\ImportExportHandler($a, $b);
    }

    /*
     * Gets the public 'Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition
     */
    protected function getLandingPageSalesChannelDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageSalesChannel/LandingPageSalesChannelDefinition.php';

        $this->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition
     */
    protected function getLandingPageTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageTag/LandingPageTagDefinition.php';

        $this->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition
     */
    protected function getLandingPageTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageTranslation/LandingPageTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\LandingPage\LandingPageDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\LandingPageDefinition
     */
    protected function getLandingPageDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/LandingPageDefinition.php';

        $this->services['Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\LandingPageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\LandingPage\SalesChannel\CachedLandingPageRoute' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\SalesChannel\CachedLandingPageRoute
     */
    protected function getCachedLandingPageRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/SalesChannel/AbstractLandingPageRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/SalesChannel/CachedLandingPageRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/SalesChannel/LandingPageRoute.php';

        return $this->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\CachedLandingPageRoute'] = new \Shopware\Core\Content\LandingPage\SalesChannel\CachedLandingPageRoute(new \Shopware\Core\Content\LandingPage\SalesChannel\LandingPageRoute(($this->services['sales_channel.landing_page.repository'] ?? $this->getSalesChannel_LandingPage_RepositoryService()), ($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? $this->getSalesChannelCmsPageLoaderService()), ($this->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition'] ?? $this->getSalesChannelLandingPageDefinitionService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\LandingPage\SalesChannel\SalesChannelLandingPageDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\SalesChannel\SalesChannelLandingPageDefinition
     */
    protected function getSalesChannelLandingPageDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/LandingPageDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/SalesChannel/SalesChannelLandingPageDefinition.php';

        $this->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\SalesChannel\SalesChannelLandingPageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition
     */
    protected function getMailHeaderFooterTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailHeaderFooterTranslation/MailHeaderFooterTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition
     */
    protected function getMailHeaderFooterDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailHeaderFooter/MailHeaderFooterDefinition.php';

        $this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition
     */
    protected function getMailTemplateMediaDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateMedia/MailTemplateMediaDefinition.php';

        $this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition
     */
    protected function getMailTemplateTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateTranslation/MailTemplateTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition
     */
    protected function getMailTemplateTypeTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateTypeTranslation/MailTemplateTypeTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition
     */
    protected function getMailTemplateTypeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateType/MailTemplateTypeDefinition.php';

        $this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\MailTemplate\Api\MailActionController' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Api\MailActionController
     */
    protected function getMailActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Api/MailActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Service/AttachmentLoader.php';

        $this->services['Shopware\\Core\\Content\\MailTemplate\\Api\\MailActionController'] = $instance = new \Shopware\Core\Content\MailTemplate\Api\MailActionController(($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] ?? $this->getMailServiceService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? $this->getStringTemplateRendererService()), new \Shopware\Core\Content\MailTemplate\Service\AttachmentLoader(($this->services['document.repository'] ?? $this->getDocument_RepositoryService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? $this->getDocumentGeneratorService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService())));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\MailTemplate\MailTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\MailTemplateDefinition
     */
    protected function getMailTemplateDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/MailTemplateDefinition.php';

        $this->services['Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\MailTemplateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Mail\Service\MailFactory' shared service.
     *
     * @return \Shopware\Core\Content\Mail\Service\MailFactory
     */
    protected function getMailFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/AbstractMailFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailFactory.php';

        $a = ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService());

        if (isset($this->services['Shopware\\Core\\Content\\Mail\\Service\\MailFactory'])) {
            return $this->services['Shopware\\Core\\Content\\Mail\\Service\\MailFactory'];
        }

        return $this->services['Shopware\\Core\\Content\\Mail\\Service\\MailFactory'] = new \Shopware\Core\Content\Mail\Service\MailFactory($a);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Mail\Service\MailSender' shared service.
     *
     * @return \Shopware\Core\Content\Mail\Service\MailSender
     */
    protected function getMailSenderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/AbstractMailSender.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailSender.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/MailerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Mailer.php';

        $a = ($this->privates['mailer.transports'] ?? $this->getMailer_TransportsService());

        if (isset($this->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'])) {
            return $this->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'])) {
            return $this->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'];
        }
        $c = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'])) {
            return $this->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'];
        }

        return $this->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'] = new \Shopware\Core\Content\Mail\Service\MailSender(new \Symfony\Component\Mailer\Mailer($a, NULL, $b), $c);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition
     */
    protected function getMediaDefaultFolderDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaDefaultFolder/MediaDefaultFolderDefinition.php';

        $this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition
     */
    protected function getMediaFolderConfigurationMediaThumbnailSizeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolderConfigurationMediaThumbnailSize/MediaFolderConfigurationMediaThumbnailSizeDefinition.php';

        $this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition
     */
    protected function getMediaFolderConfigurationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolderConfiguration/MediaFolderConfigurationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition
     */
    protected function getMediaFolderDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolder/MediaFolderDefinition.php';

        $this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition
     */
    protected function getMediaTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaTag/MediaTagDefinition.php';

        $this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition
     */
    protected function getMediaThumbnailSizeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaThumbnailSize/MediaThumbnailSizeDefinition.php';

        $this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition
     */
    protected function getMediaThumbnailDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaThumbnail/MediaThumbnailDefinition.php';

        $this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition
     */
    protected function getMediaTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaTranslation/MediaTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Api\MediaFolderController' shared service.
     *
     * @return \Shopware\Core\Content\Media\Api\MediaFolderController
     */
    protected function getMediaFolderControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Api/MediaFolderController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/MediaFolderService.php';

        $this->services['Shopware\\Core\\Content\\Media\\Api\\MediaFolderController'] = $instance = new \Shopware\Core\Content\Media\Api\MediaFolderController(new \Shopware\Core\Content\Media\MediaFolderService(($this->services['media.repository'] ?? $this->getMedia_RepositoryService()), ($this->services['media_folder.repository'] ?? $this->getMediaFolder_RepositoryService()), ($this->services['media_folder_configuration.repository'] ?? $this->getMediaFolderConfiguration_RepositoryService())));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\Api\MediaUploadController' shared service.
     *
     * @return \Shopware\Core\Content\Media\Api\MediaUploadController
     */
    protected function getMediaUploadControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Api/MediaUploadController.php';

        $this->services['Shopware\\Core\\Content\\Media\\Api\\MediaUploadController'] = $instance = new \Shopware\Core\Content\Media\Api\MediaUploadController(($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService()), ($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? $this->getFileSaverService()), ($this->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'] ?? $this->getFileNameProviderService()), ($this->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] ?? $this->getMediaDefinitionService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\File\FileSaver' shared service.
     *
     * @return \Shopware\Core\Content\Media\File\FileSaver
     */
    protected function getFileSaverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileSaver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Metadata/MetadataLoader.php';

        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }
        $b = ($this->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'] ?? $this->getThumbnailServiceService());

        if (isset($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }
        $c = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }

        return $this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] = new \Shopware\Core\Content\Media\File\FileSaver($a, ($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? $this->getUrlGeneratorInterfaceService()), $b, new \Shopware\Core\Content\Media\Metadata\MetadataLoader(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Media\\Metadata\\MetadataLoader\\ImageMetadataLoader'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\Metadata\\MetadataLoader\\ImageMetadataLoader'] = new \Shopware\Core\Content\Media\Metadata\MetadataLoader\ImageMetadataLoader()));
        }, 1)), ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\TypeDetector'] ?? $this->getTypeDetectorService()), $c, $d, $this->parameters['shopware.filesystem.allowed_extensions'], $this->parameters['shopware.filesystem.private_allowed_extensions']);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Media\MediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\MediaDefinition
     */
    protected function getMediaDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] = $instance = new \Shopware\Core\Content\Media\MediaDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition
     */
    protected function getNewsletterRecipientTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Aggregate/NewsletterRecipientTag/NewsletterRecipientTagDefinition.php';

        $this->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition'] = $instance = new \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipient\NewsletterRecipientDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipient\NewsletterRecipientDefinition
     */
    protected function getNewsletterRecipientDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Aggregate/NewsletterRecipient/NewsletterRecipientDefinition.php';

        $this->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition'] = $instance = new \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipient\NewsletterRecipientDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Newsletter\SalesChannel\NewsletterConfirmRoute' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterConfirmRoute
     */
    protected function getNewsletterConfirmRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/AbstractNewsletterConfirmRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/NewsletterConfirmRoute.php';

        return $this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterConfirmRoute'] = new \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterConfirmRoute(($this->services['newsletter_recipient.repository'] ?? $this->getNewsletterRecipient_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute
     */
    protected function getNewsletterSubscribeRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/AbstractNewsletterSubscribeRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php';

        return $this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute'] = new \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute(($this->services['newsletter_recipient.repository'] ?? $this->getNewsletterRecipient_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Newsletter\SalesChannel\NewsletterUnsubscribeRoute' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterUnsubscribeRoute
     */
    protected function getNewsletterUnsubscribeRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/AbstractNewsletterUnsubscribeRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRoute.php';

        return $this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute'] = new \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterUnsubscribeRoute(($this->services['newsletter_recipient.repository'] ?? $this->getNewsletterRecipient_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Newsletter\SalesChannel\SalesChannelNewsletterRecipientDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\SalesChannel\SalesChannelNewsletterRecipientDefinition
     */
    protected function getSalesChannelNewsletterRecipientDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Aggregate/NewsletterRecipient/NewsletterRecipientDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/SalesChannelNewsletterRecipientDefinition.php';

        $this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition'] = $instance = new \Shopware\Core\Content\Newsletter\SalesChannel\SalesChannelNewsletterRecipientDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductExport\Api\ProductExportController' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Api\ProductExportController
     */
    protected function getProductExportControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Api/ProductExportController.php';

        $this->services['Shopware\\Core\\Content\\ProductExport\\Api\\ProductExportController'] = $instance = new \Shopware\Core\Content\ProductExport\Api\ProductExportController(($this->services['sales_channel_domain.repository'] ?? $this->getSalesChannelDomain_RepositoryService()), ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()), ($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'] ?? $this->getProductExportGeneratorService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductExport\ProductExportDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ProductExportDefinition
     */
    protected function getProductExportDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ProductExportDefinition.php';

        $this->services['Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition'] = $instance = new \Shopware\Core\Content\ProductExport\ProductExportDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductExport\ProductExportHydrator' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ProductExportHydrator
     */
    protected function getProductExportHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ProductExportHydrator.php';

        return $this->services['Shopware\\Core\\Content\\ProductExport\\ProductExportHydrator'] = new \Shopware\Core\Content\ProductExport\ProductExportHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductExport\SalesChannel\ExportController' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\SalesChannel\ExportController
     */
    protected function getExportControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/SalesChannel/ExportController.php';

        return $this->services['Shopware\\Core\\Content\\ProductExport\\SalesChannel\\ExportController'] = new \Shopware\Core\Content\ProductExport\SalesChannel\ExportController(($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExporter'] ?? $this->getProductExporterService()), ($this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] ?? $this->getProductExportFileHandlerService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['product_export.repository'] ?? $this->getProductExport_RepositoryService()), ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductExport\Service\ProductExportGenerator' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Service\ProductExportGenerator
     */
    protected function getProductExportGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportValidator.php';

        $a = ($this->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] ?? $this->getProductStreamBuilderService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $b = ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $c = ($this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'] ?? $this->getProductExportRendererService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $e = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $f = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $g = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $h = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TwigVariableParser'] ?? $this->getTwigVariableParserService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }

        return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'] = new \Shopware\Core\Content\ProductExport\Service\ProductExportGenerator($a, $b, $c, $d, new \Shopware\Core\Content\ProductExport\Service\ProductExportValidator(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\ProductExport\\Validator\\XmlValidator'] ?? ($this->privates['Shopware\\Core\\Content\\ProductExport\\Validator\\XmlValidator'] = new \Shopware\Core\Content\ProductExport\Validator\XmlValidator()));
        }, 1)), $e, $f, $g, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), 100, ($this->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? $this->getSeoUrlPlaceholderHandlerInterfaceService()), $h, ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()), ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductExport\Service\ProductExporter' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Service\ProductExporter
     */
    protected function getProductExporterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExporterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExporter.php';

        return $this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExporter'] = new \Shopware\Core\Content\ProductExport\Service\ProductExporter(($this->services['product_export.repository'] ?? $this->getProductExport_RepositoryService()), ($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'] ?? $this->getProductExportGeneratorService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] ?? $this->getProductExportFileHandlerService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition
     */
    protected function getProductStreamFilterDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamFilter/ProductStreamFilterDefinition.php';

        $this->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterHydrator' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterHydrator
     */
    protected function getProductStreamFilterHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamFilter/ProductStreamFilterHydrator.php';

        return $this->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterHydrator'] = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition
     */
    protected function getProductStreamTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamTranslation/ProductStreamTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductStream\ProductStreamDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\ProductStreamDefinition
     */
    protected function getProductStreamDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/ProductStreamDefinition.php';

        $this->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\ProductStreamDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductStream\ProductStreamHydrator' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\ProductStreamHydrator
     */
    protected function getProductStreamHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/ProductStreamHydrator.php';

        return $this->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamHydrator'] = new \Shopware\Core\Content\ProductStream\ProductStreamHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\ProductStream\Service\ProductStreamBuilder' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Service\ProductStreamBuilder
     */
    protected function getProductStreamBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Service/ProductStreamBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Service/ProductStreamBuilder.php';

        $a = ($this->services['product_stream.repository'] ?? $this->getProductStream_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'])) {
            return $this->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'];
        }

        return $this->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] = new \Shopware\Core\Content\ProductStream\Service\ProductStreamBuilder($a, ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition
     */
    protected function getProductCategoryTreeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCategoryTree/ProductCategoryTreeDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition
     */
    protected function getProductCategoryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCategory/ProductCategoryDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition
     */
    protected function getProductConfiguratorSettingDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductConfiguratorSetting/ProductConfiguratorSettingDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingHydrator
     */
    protected function getProductConfiguratorSettingHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductConfiguratorSetting/ProductConfiguratorSettingHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition
     */
    protected function getProductCrossSellingAssignedProductsDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingAssignedProducts/ProductCrossSellingAssignedProductsDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsHydrator
     */
    protected function getProductCrossSellingAssignedProductsHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingAssignedProducts/ProductCrossSellingAssignedProductsHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition
     */
    protected function getProductCrossSellingTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingTranslation/ProductCrossSellingTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition
     */
    protected function getProductCrossSellingDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSelling/ProductCrossSellingDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingHydrator
     */
    protected function getProductCrossSellingHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSelling/ProductCrossSellingHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition
     */
    protected function getProductCustomFieldSetDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCustomFieldSet/ProductCustomFieldSetDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition
     */
    protected function getProductDownloadDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition
     */
    protected function getProductFeatureSetTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSetTranslation/ProductFeatureSetTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition
     */
    protected function getProductFeatureSetDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSet/ProductFeatureSetDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetHydrator
     */
    protected function getProductFeatureSetHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSet/ProductFeatureSetHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition
     */
    protected function getProductKeywordDictionaryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductKeywordDictionary/ProductKeywordDictionaryDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryHydrator
     */
    protected function getProductKeywordDictionaryHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductKeywordDictionary/ProductKeywordDictionaryHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition
     */
    protected function getProductManufacturerTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturerTranslation/ProductManufacturerTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition
     */
    protected function getProductManufacturerDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturer/ProductManufacturerDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerHydrator
     */
    protected function getProductManufacturerHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturer/ProductManufacturerHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition
     */
    protected function getProductMediaDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductMedia/ProductMediaDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaHydrator
     */
    protected function getProductMediaHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductMedia/ProductMediaHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition
     */
    protected function getProductOptionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductOption/ProductOptionDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition
     */
    protected function getProductPriceDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductPrice/ProductPriceDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceHydrator
     */
    protected function getProductPriceHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductPrice/ProductPriceHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition
     */
    protected function getProductPropertyDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductProperty/ProductPropertyDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition
     */
    protected function getProductReviewDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductReview/ProductReviewDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewHydrator
     */
    protected function getProductReviewHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductReview/ProductReviewHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition
     */
    protected function getProductSearchConfigFieldDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfigField/ProductSearchConfigFieldDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldHydrator
     */
    protected function getProductSearchConfigFieldHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfigField/ProductSearchConfigFieldHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition
     */
    protected function getProductSearchConfigDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfig/ProductSearchConfigDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigHydrator
     */
    protected function getProductSearchConfigHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfig/ProductSearchConfigHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition
     */
    protected function getProductSearchKeywordDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchKeyword/ProductSearchKeywordDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordHydrator
     */
    protected function getProductSearchKeywordHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchKeyword/ProductSearchKeywordHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition
     */
    protected function getProductStreamMappingDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductStreamMapping/ProductStreamMappingDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition
     */
    protected function getProductTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductTag/ProductTagDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition
     */
    protected function getProductTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductTranslation/ProductTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition
     */
    protected function getProductVisibilityDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductVisibility/ProductVisibilityDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityHydrator
     */
    protected function getProductVisibilityHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductVisibility/ProductVisibilityHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\Api\ProductActionController' shared service.
     *
     * @return \Shopware\Core\Content\Product\Api\ProductActionController
     */
    protected function getProductActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Api/ProductActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Util/VariantCombinationLoader.php';

        $this->services['Shopware\\Core\\Content\\Product\\Api\\ProductActionController'] = $instance = new \Shopware\Core\Content\Product\Api\ProductActionController(new \Shopware\Core\Content\Product\Util\VariantCombinationLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPrice\CheapestPriceAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPrice\CheapestPriceAccessorBuilder
     */
    protected function getCheapestPriceAccessorBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/CheapestPrice/CheapestPriceAccessorBuilder.php';

        return $this->services['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\CheapestPrice\\CheapestPriceAccessorBuilder'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPrice\CheapestPriceAccessorBuilder(100, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\ProductDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\ProductDefinition
     */
    protected function getProductDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] = $instance = new \Shopware\Core\Content\Product\ProductDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\ProductHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\ProductHydrator
     */
    protected function getProductHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/ProductHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\ProductHydrator'] = new \Shopware\Core\Content\Product\ProductHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\CrossSelling\CachedProductCrossSellingRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\CrossSelling\CachedProductCrossSellingRoute
     */
    protected function getCachedProductCrossSellingRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/CrossSelling/AbstractProductCrossSellingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/CrossSelling/CachedProductCrossSellingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/CrossSelling/ProductCrossSellingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        $a = ($this->services['product_cross_selling.repository'] ?? $this->getProductCrossSelling_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $c = ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $d = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $e = ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] ?? $this->getProductListingLoaderService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $f = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'] = new \Shopware\Core\Content\Product\SalesChannel\CrossSelling\CachedProductCrossSellingRoute(new \Shopware\Core\Content\Product\SalesChannel\CrossSelling\ProductCrossSellingRoute($a, $b, ($this->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] ?? $this->getProductStreamBuilderService()), $c, $d, $e, ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] = new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory()))), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $f, $b, []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Detail\CachedProductDetailRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Detail\CachedProductDetailRoute
     */
    protected function getCachedProductDetailRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/AbstractProductDetailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/CachedProductDetailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/ProductDetailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Detail\CachedProductDetailRoute(new \Shopware\Core\Content\Product\SalesChannel\Detail\ProductDetailRoute(($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'] ?? $this->getProductPageConfiguratorLoaderService()), ($this->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'] ?? $this->getCategoryBreadcrumbBuilderService()), ($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? $this->getSalesChannelCmsPageLoaderService()), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition'] ?? $this->getSalesChannelProductDefinitionService()), ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] = new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory()))), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\FindVariant\FindProductVariantRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\FindVariant\FindProductVariantRoute
     */
    protected function getFindProductVariantRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/FindVariant/AbstractFindProductVariantRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/FindVariant/FindProductVariantRoute.php';

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute'] = new \Shopware\Core\Content\Product\SalesChannel\FindVariant\FindProductVariantRoute(($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Listing\CachedProductListingRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\CachedProductListingRoute
     */
    protected function getCachedProductListingRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/AbstractProductListingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/CachedProductListingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/ProductListingRoute.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] ?? $this->getProductListingLoaderService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'];
        }
        $c = ($this->services['category.repository'] ?? $this->getCategory_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'];
        }
        $d = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'];
        }

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\CachedProductListingRoute(new \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingRoute($a, $b, $c, ($this->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] ?? $this->getProductStreamBuilderService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $d, $b, []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Listing\ResolveCriteriaProductListingRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\ResolveCriteriaProductListingRoute
     */
    protected function getResolveCriteriaProductListingRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/AbstractProductListingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/ResolveCriteriaProductListingRoute.php';

        $a = ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'] ?? $this->getCachedProductListingRouteService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'];
        }

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\ResolveCriteriaProductListingRoute($a, $b);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\ProductListRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\ProductListRoute
     */
    protected function getProductListRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductListRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductListRoute.php';

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductListRoute'] = new \Shopware\Core\Content\Product\SalesChannel\ProductListRoute(($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Review\CachedProductReviewRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Review\CachedProductReviewRoute
     */
    protected function getCachedProductReviewRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/AbstractProductReviewRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/CachedProductReviewRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/ProductReviewRoute.php';

        $a = ($this->services['product_review.repository'] ?? $this->getProductReview_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'])) {
            return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'];
        }

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Review\CachedProductReviewRoute(new \Shopware\Core\Content\Product\SalesChannel\Review\ProductReviewRoute($a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $b, $c, []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Review\ProductReviewSaveRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Review\ProductReviewSaveRoute
     */
    protected function getProductReviewSaveRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/AbstractProductReviewSaveRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/ProductReviewSaveRoute.php';

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\ProductReviewSaveRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Review\ProductReviewSaveRoute(($this->services['product_review.repository'] ?? $this->getProductReview_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\SalesChannelProductDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\SalesChannelProductDefinition
     */
    protected function getSalesChannelProductDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\SalesChannelProductDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Search\CachedProductSearchRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Search\CachedProductSearchRoute
     */
    protected function getCachedProductSearchRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/AbstractProductSearchRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/CachedProductSearchRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/ProductSearchRoute.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\CachedProductSearchRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Search\CachedProductSearchRoute(new \Shopware\Core\Content\Product\SalesChannel\Search\ProductSearchRoute(($this->privates['Shopware\\Elasticsearch\\Product\\ProductSearchBuilder'] ?? $this->getProductSearchBuilderService()), $a, ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] ?? $this->getProductListingLoaderService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), $a, []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Search\ResolvedCriteriaProductSearchRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Search\ResolvedCriteriaProductSearchRoute
     */
    protected function getResolvedCriteriaProductSearchRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/AbstractProductSearchRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/ResolvedCriteriaProductSearchRoute.php';

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Search\ResolvedCriteriaProductSearchRoute(($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\CachedProductSearchRoute'] ?? $this->getCachedProductSearchRouteService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition
     */
    protected function getProductSortingDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingHydrator
     */
    protected function getProductSortingHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingHydrator'] = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition
     */
    protected function getProductSortingTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Suggest\CachedProductSuggestRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Suggest\CachedProductSuggestRoute
     */
    protected function getCachedProductSuggestRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Suggest/AbstractProductSuggestRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Suggest/CachedProductSuggestRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Suggest/ProductSuggestRoute.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        return $this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\CachedProductSuggestRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Suggest\CachedProductSuggestRoute(new \Shopware\Core\Content\Product\SalesChannel\Suggest\ProductSuggestRoute(($this->privates['Shopware\\Elasticsearch\\Product\\ProductSearchBuilder'] ?? $this->getProductSearchBuilderService()), $a, ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] ?? $this->getProductListingLoaderService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), $a, []);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition
     */
    protected function getPropertyGroupOptionTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOptionTranslation/PropertyGroupOptionTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition
     */
    protected function getPropertyGroupOptionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOption/PropertyGroupOptionDefinition.php';

        $this->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionHydrator
     */
    protected function getPropertyGroupOptionHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOption/PropertyGroupOptionHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionHydrator'] = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition
     */
    protected function getPropertyGroupTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupTranslation/PropertyGroupTranslationDefinition.php';

        $this->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Property\PropertyGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\PropertyGroupDefinition
     */
    protected function getPropertyGroupDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/PropertyGroupDefinition.php';

        $this->services['Shopware\\Core\\Content\\Property\\PropertyGroupDefinition'] = $instance = new \Shopware\Core\Content\Property\PropertyGroupDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Property\PropertyGroupHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Property\PropertyGroupHydrator
     */
    protected function getPropertyGroupHydratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/PropertyGroupHydrator.php';

        return $this->services['Shopware\\Core\\Content\\Property\\PropertyGroupHydrator'] = new \Shopware\Core\Content\Property\PropertyGroupHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition
     */
    protected function getRuleConditionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/Aggregate/RuleCondition/RuleConditionDefinition.php';

        $this->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition'] = $instance = new \Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition
     */
    protected function getRuleTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/Aggregate/RuleTag/RuleTagDefinition.php';

        $this->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition'] = $instance = new \Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Rule\RuleDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\RuleDefinition
     */
    protected function getRuleDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] = $instance = new \Shopware\Core\Content\Rule\RuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\Api\SeoActionController' shared service.
     *
     * @return \Shopware\Core\Content\Seo\Api\SeoActionController
     */
    protected function getSeoActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Api/SeoActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Validation/SeoUrlDataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Validation/SeoUrlValidationFactory.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService());

        $this->services['Shopware\\Core\\Content\\Seo\\Api\\SeoActionController'] = $instance = new \Shopware\Core\Content\Seo\Api\SeoActionController(($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlGenerator'] ?? $this->getSeoUrlGeneratorService()), ($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'] ?? $this->getSeoUrlPersisterService()), $a, ($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteRegistry'] ?? $this->getSeoUrlRouteRegistryService()), new \Shopware\Core\Content\Seo\Validation\SeoUrlValidationFactory(), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()), $a);

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\CachedSeoResolver' shared service.
     *
     * @return \Shopware\Core\Content\Seo\CachedSeoResolver
     */
    protected function getCachedSeoResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/AbstractSeoResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/CachedSeoResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoResolver.php';

        return $this->services['Shopware\\Core\\Content\\Seo\\CachedSeoResolver'] = new \Shopware\Core\Content\Seo\CachedSeoResolver(new \Shopware\Core\Content\Seo\SeoResolver(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\EmptyPathInfoResolver' shared service.
     *
     * @return \Shopware\Core\Content\Seo\EmptyPathInfoResolver
     */
    protected function getEmptyPathInfoResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/AbstractSeoResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/EmptyPathInfoResolver.php';

        return $this->services['Shopware\\Core\\Content\\Seo\\EmptyPathInfoResolver'] = new \Shopware\Core\Content\Seo\EmptyPathInfoResolver(($this->services['Shopware\\Core\\Content\\Seo\\CachedSeoResolver'] ?? $this->getCachedSeoResolverService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\Entity\Dbal\SeoUrlAssociationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Content\Seo\Entity\Dbal\SeoUrlAssociationFieldResolver
     */
    protected function getSeoUrlAssociationFieldResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Entity/Dbal/SeoUrlAssociationFieldResolver.php';

        return $this->services['Shopware\\Core\\Content\\Seo\\Entity\\Dbal\\SeoUrlAssociationFieldResolver'] = new \Shopware\Core\Content\Seo\Entity\Dbal\SeoUrlAssociationFieldResolver(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\Entity\Serializer\SeoUrlFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Content\Seo\Entity\Serializer\SeoUrlFieldSerializer
     */
    protected function getSeoUrlFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/OneToManyAssociationFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Entity/Serializer/SeoUrlFieldSerializer.php';

        return $this->services['Shopware\\Core\\Content\\Seo\\Entity\\Serializer\\SeoUrlFieldSerializer'] = new \Shopware\Core\Content\Seo\Entity\Serializer\SeoUrlFieldSerializer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? $this->getWriteCommandExtractorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\MainCategory\MainCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\MainCategory\MainCategoryDefinition
     */
    protected function getMainCategoryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/MainCategory/MainCategoryDefinition.php';

        $this->services['Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition'] = $instance = new \Shopware\Core\Content\Seo\MainCategory\MainCategoryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\MainCategory\SalesChannel\SalesChannelMainCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\MainCategory\SalesChannel\SalesChannelMainCategoryDefinition
     */
    protected function getSalesChannelMainCategoryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/MainCategory/MainCategoryDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/MainCategory/SalesChannel/SalesChannelMainCategoryDefinition.php';

        $this->services['Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition'] = $instance = new \Shopware\Core\Content\Seo\MainCategory\SalesChannel\SalesChannelMainCategoryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\SalesChannel\SeoUrlRoute' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SalesChannel\SeoUrlRoute
     */
    protected function getSeoUrlRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SalesChannel/AbstractSeoUrlRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SalesChannel/SeoUrlRoute.php';

        return $this->services['Shopware\\Core\\Content\\Seo\\SalesChannel\\SeoUrlRoute'] = new \Shopware\Core\Content\Seo\SalesChannel\SeoUrlRoute(($this->services['sales_channel.seo_url.repository'] ?? $this->getSalesChannel_SeoUrl_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\SeoUrlPlaceholderHandlerInterface' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlPlaceholderHandler
     */
    protected function getSeoUrlPlaceholderHandlerInterfaceService()
    {
        return $this->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] = new \Shopware\Core\Content\Seo\SeoUrlPlaceholderHandler(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['router.default'] ?? $this->getRouter_DefaultService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition
     */
    protected function getSeoUrlTemplateDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlTemplate/SeoUrlTemplateDefinition.php';

        $this->services['Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition'] = $instance = new \Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\SeoUrl\SalesChannel\SalesChannelSeoUrlDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrl\SalesChannel\SalesChannelSeoUrlDefinition
     */
    protected function getSalesChannelSeoUrlDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition'] = $instance = new \Shopware\Core\Content\Seo\SeoUrl\SalesChannel\SalesChannelSeoUrlDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Seo\SeoUrl\SeoUrlDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrl\SeoUrlDefinition
     */
    protected function getSeoUrlDefinitionService()
    {
        $this->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition'] = $instance = new \Shopware\Core\Content\Seo\SeoUrl\SeoUrlDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Content\Sitemap\SalesChannel\CachedSitemapRoute' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\SalesChannel\CachedSitemapRoute
     */
    protected function getCachedSitemapRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/SalesChannel/AbstractSitemapRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/SalesChannel/CachedSitemapRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/SalesChannel/SitemapRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapListerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapLister.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        return $this->services['Shopware\\Core\\Content\\Sitemap\\SalesChannel\\CachedSitemapRoute'] = new \Shopware\Core\Content\Sitemap\SalesChannel\CachedSitemapRoute(new \Shopware\Core\Content\Sitemap\SalesChannel\SitemapRoute(new \Shopware\Core\Content\Sitemap\Service\SitemapLister(($this->services['shopware.filesystem.sitemap'] ?? $this->getShopware_Filesystem_SitemapService()), ($this->privates['shopware.asset.sitemap'] ?? $this->getShopware_Asset_SitemapService())), $a, ($this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'] ?? $this->getSitemapExporterService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), [], $a);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Adapter\Asset\AssetPackageService' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\AssetPackageService
     */
    protected function getAssetPackageServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Asset/AssetPackageService.php';

        return $this->services['Shopware\\Core\\Framework\\Adapter\\Asset\\AssetPackageService'] = new \Shopware\Core\Framework\Adapter\Asset\AssetPackageService(($this->privates['assets.packages'] ?? $this->getAssets_PackagesService()), new \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage([0 => ''], ($this->privates['assets.empty_version_strategy'] ?? ($this->privates['assets.empty_version_strategy'] = new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy()))), ($this->privates['shopware.asset.asset.version_strategy'] ?? $this->getShopware_Asset_Asset_VersionStrategyService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Adapter\Cache\CacheIdLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheIdLoader
     */
    protected function getCacheIdLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheIdLoader.php';

        return $this->services['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheIdLoader'] = new \Shopware\Core\Framework\Adapter\Cache\CacheIdLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Adapter\Cache\Script\Facade\CacheInvalidatorFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\Script\Facade\CacheInvalidatorFacadeHookFactory
     */
    protected function getCacheInvalidatorFacadeHookFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/Script/Facade/CacheInvalidatorFacadeHookFactory.php';

        return $this->services['Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\Facade\\CacheInvalidatorFacadeHookFactory'] = new \Shopware\Core\Framework\Adapter\Cache\Script\Facade\CacheInvalidatorFacadeHookFactory(($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Adapter\Twig\AppTemplateIterator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\AppTemplateIterator
     */
    protected function getAppTemplateIteratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/AppTemplateIterator.php';

        return $this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\AppTemplateIterator'] = new \Shopware\Core\Framework\Adapter\Twig\AppTemplateIterator(($this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateIterator'] ?? $this->getTemplateIteratorService()), ($this->services['app_template.repository'] ?? $this->getAppTemplate_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Adapter\Twig\TemplateFinder' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\TemplateFinder
     */
    protected function getTemplateFinderService()
    {
        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'])) {
            return $this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'];
        }

        return $this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] = new \Shopware\Core\Framework\Adapter\Twig\TemplateFinder($a, ($this->privates['twig.loader.chain'] ?? $this->getTwig_Loader_ChainService()), $this->targetDir.'', new \Shopware\Core\Framework\Adapter\Twig\NamespaceHierarchy\NamespaceHierarchyBuilder(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\NamespaceHierarchy\\BundleHierarchyBuilder'] ?? $this->getBundleHierarchyBuilderService());
            yield 1 => ($this->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? $this->getThemeNamespaceHierarchyBuilderService());
        }, 2)));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Adapter\Twig\TemplateIterator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\TemplateIterator
     */
    protected function getTemplateIteratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TemplateIterator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/TemplateIterator.php';

        return $this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateIterator'] = new \Shopware\Core\Framework\Adapter\Twig\TemplateIterator(new \Symfony\Bundle\TwigBundle\TemplateIterator(($this->services['kernel'] ?? $this->get('kernel', 1)), [(\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email') => 'email'], (\dirname(__DIR__, 4).'/templates')), $this->parameters['kernel.bundles']);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Acl\AclCriteriaValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\AclCriteriaValidator
     */
    protected function getAclCriteriaValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/AclCriteriaValidator.php';

        return $this->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] = new \Shopware\Core\Framework\Api\Acl\AclCriteriaValidator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition
     */
    protected function getAclRoleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/Role/AclRoleDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition'] = $instance = new \Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition
     */
    protected function getAclUserRoleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/Role/AclUserRoleDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition'] = $instance = new \Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\AccessKeyController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\AccessKeyController
     */
    protected function getAccessKeyControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/AccessKeyController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\AccessKeyController'] = $instance = new \Shopware\Core\Framework\Api\Controller\AccessKeyController();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\AclController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\AclController
     */
    protected function getAclControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/AclController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\AclController'] = $instance = new \Shopware\Core\Framework\Api\Controller\AclController(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['router'] ?? $this->getRouterService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\ApiController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\ApiController
     */
    protected function getApiControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/ApiController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/RequestCriteriaBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityProtection/EntityProtectionValidator.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\ApiController'] = $instance = new \Shopware\Core\Framework\Api\Controller\ApiController(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()), new \Shopware\Core\Framework\DataAbstractionLayer\Search\RequestCriteriaBuilder(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\AggregationParser())), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\ApiCriteriaValidator'] ?? $this->getApiCriteriaValidatorService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CriteriaArrayConverter'] ?? $this->getCriteriaArrayConverterService())), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CompositeEntitySearcher'] ?? $this->getCompositeEntitySearcherService()), ($this->privates['Shopware\\Core\\Framework\\Api\\Converter\\ApiVersionConverter'] ?? $this->getApiVersionConverterService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityProtection\EntityProtectionValidator())), ($this->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] ?? $this->getAclCriteriaValidatorService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\AuthController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\AuthController
     */
    protected function getAuthControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/AuthController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\AuthController'] = $instance = new \Shopware\Core\Framework\Api\Controller\AuthController(($this->privates['shopware.api.authorization_server'] ?? $this->getShopware_Api_AuthorizationServerService()), ($this->privates['Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory'] ?? $this->getPsrHttpFactoryService()), ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\CacheController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\CacheController
     */
    protected function getCacheControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/CacheController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\CacheController'] = $instance = new \Shopware\Core\Framework\Api\Controller\CacheController(($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmer'] ?? $this->getCacheWarmer2Service()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService()));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'message_bus' => ['services', 'messenger.default_bus', 'getMessenger_DefaultBusService', false],
            'messenger.default_bus' => ['services', 'messenger.default_bus', 'getMessenger_DefaultBusService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
            'security.csrf.token_manager' => ['services', '.container.private.security.csrf.token_manager', 'get_Container_Private_Security_Csrf_TokenManagerService', false],
            'serializer' => ['services', '.container.private.serializer', 'get_Container_Private_SerializerService', false],
            'session' => ['privates', '.session.deprecated', 'get_Session_DeprecatedService', false],
            'twig' => ['services', '.container.private.twig', 'get_Container_Private_TwigService', false],
        ], [
            'http_kernel' => '?',
            'message_bus' => '?',
            'messenger.default_bus' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
            'security.csrf.token_manager' => '?',
            'serializer' => '?',
            'session' => '.session.deprecated',
            'twig' => '?',
        ]))->withContext('Shopware\\Core\\Framework\\Api\\Controller\\CacheController', $this));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\CustomSnippetFormatController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\CustomSnippetFormatController
     */
    protected function getCustomSnippetFormatControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/CustomSnippetFormatController.php';

        return $this->services['Shopware\\Core\\Framework\\Api\\Controller\\CustomSnippetFormatController'] = new \Shopware\Core\Framework\Api\Controller\CustomSnippetFormatController(($this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] ?? $this->getKernelPluginCollectionService()), ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\FallbackController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\FallbackController
     */
    protected function getFallbackControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/FallbackController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\FallbackController'] = $instance = new \Shopware\Core\Framework\Api\Controller\FallbackController();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\IndexingController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\IndexingController
     */
    protected function getIndexingControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/IndexingController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\IndexingController'] = $instance = new \Shopware\Core\Framework\Api\Controller\IndexingController(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService()), ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\InfoController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\InfoController
     */
    protected function getInfoControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/InfoController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/AppUrlVerifier.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\InfoController'] = $instance = new \Shopware\Core\Framework\Api\Controller\InfoController(($this->privates['Shopware\\Core\\Framework\\Api\\ApiDefinition\\DefinitionService'] ?? $this->getDefinitionServiceService()), ($this->privates['parameter_bag'] ?? ($this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this))), ($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->privates['assets.packages'] ?? $this->getAssets_PackagesService()), ($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? $this->getBusinessEventCollectorService()), ($this->services['shopware.increment.gateway.registry'] ?? $this->getShopware_Increment_Gateway_RegistryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), new \Shopware\Core\Maintenance\System\Service\AppUrlVerifier(new \GuzzleHttp\Client(), ($this->services['app.repository'] ?? $this->getApp_RepositoryService()), 'prod', $this->getEnv('bool:APP_URL_CHECK_DISABLED')), ($this->privates['Shopware\\Core\\Content\\Flow\\Api\\FlowActionCollector'] ?? $this->getFlowActionCollectorService()), true, $this->parameters['shopware.security.csp_templates']);

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\IntegrationController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\IntegrationController
     */
    protected function getIntegrationControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/IntegrationController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\IntegrationController'] = $instance = new \Shopware\Core\Framework\Api\Controller\IntegrationController(($this->services['integration.repository'] ?? $this->getIntegration_RepositoryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\SalesChannelProxyController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\SalesChannelProxyController
     */
    protected function getSalesChannelProxyControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/SalesChannelProxyController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/ApiOrderCartService.php';

        $a = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService());
        $b = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService());

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\SalesChannelProxyController'] = $instance = new \Shopware\Core\Framework\Api\Controller\SalesChannelProxyController(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), $a, ($this->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'] ?? $this->getSalesChannelRequestContextResolverService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), new \Shopware\Core\Checkout\Cart\ApiOrderCartService($b, $a), ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'] ?? $this->getCartOrderRouteService()), $b, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\SyncController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\SyncController
     */
    protected function getSyncControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/SyncController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\SyncController'] = $instance = new \Shopware\Core\Framework\Api\Controller\SyncController(($this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] ?? $this->getSyncServiceService()), ($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Controller\UserController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\UserController
     */
    protected function getUserControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/UserController.php';

        $this->services['Shopware\\Core\\Framework\\Api\\Controller\\UserController'] = $instance = new \Shopware\Core\Framework\Api\Controller\UserController(($this->services['user.repository'] ?? $this->getUser_RepositoryService()), ($this->services['acl_user_role.repository'] ?? $this->getAclUserRole_RepositoryService()), ($this->services['acl_role.repository'] ?? $this->getAclRole_RepositoryService()), ($this->services['user_access_key.repository'] ?? $this->getUserAccessKey_RepositoryService()), ($this->services['Shopware\\Core\\System\\User\\UserDefinition'] ?? $this->getUserDefinitionService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Api\Sync\SyncService' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Sync\SyncService
     */
    protected function getSyncServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Sync/SyncServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Sync/SyncService.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService());

        if (isset($this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'])) {
            return $this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'])) {
            return $this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'];
        }

        return $this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] = new \Shopware\Core\Framework\Api\Sync\SyncService(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\Api\\Converter\\ApiVersionConverter'] ?? $this->getApiVersionConverterService()), $a, $b);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition
     */
    protected function getActionButtonTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/ActionButtonTranslation/ActionButtonTranslationDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition
     */
    protected function getActionButtonDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/ActionButton/ActionButtonDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition
     */
    protected function getAppPaymentMethodDefinitionService()
    {
        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition
     */
    protected function getAppScriptConditionTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppScriptConditionTranslation/AppScriptConditionTranslationDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition
     */
    protected function getAppScriptConditionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppScriptCondition/AppScriptConditionDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition
     */
    protected function getAppTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppTranslation/AppTranslationDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition
     */
    protected function getAppCmsBlockTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/CmsBlockTranslation/AppCmsBlockTranslationDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition
     */
    protected function getAppCmsBlockDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/CmsBlock/AppCmsBlockDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition
     */
    protected function getAppFlowActionTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowActionTranslation/AppFlowActionTranslationDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition
     */
    protected function getAppFlowActionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowAction/AppFlowActionDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Api\AppActionController' shared service.
     *
     * @return \Shopware\Core\Framework\App\Api\AppActionController
     */
    protected function getAppActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Api/AppActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/ActionButtonLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/AppActionLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Manifest/ModuleLoader.php';

        $a = ($this->services['app_action_button.repository'] ?? $this->getAppActionButton_RepositoryService());
        $b = ($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? $this->getShopIdProviderService());

        $this->services['Shopware\\Core\\Framework\\App\\Api\\AppActionController'] = $instance = new \Shopware\Core\Framework\App\Api\AppActionController(new \Shopware\Core\Framework\App\ActionButton\ActionButtonLoader($a), new \Shopware\Core\Framework\App\ActionButton\AppActionLoader($this->getEnv('APP_URL'), $a, $b), ($this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Executor'] ?? $this->getExecutorService()), new \Shopware\Core\Framework\App\Manifest\ModuleLoader(($this->services['app.repository'] ?? $this->getApp_RepositoryService()), $b, ($this->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] ?? $this->getQuerySignerService())));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Api\AppCmsController' shared service.
     *
     * @return \Shopware\Core\Framework\App\Api\AppCmsController
     */
    protected function getAppCmsControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Api/AppCmsController.php';

        $this->services['Shopware\\Core\\Framework\\App\\Api\\AppCmsController'] = $instance = new \Shopware\Core\Framework\App\Api\AppCmsController(($this->services['app_cms_block.repository'] ?? $this->getAppCmsBlock_RepositoryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Api\AppUrlChangeController' shared service.
     *
     * @return \Shopware\Core\Framework\App\Api\AppUrlChangeController
     */
    protected function getAppUrlChangeControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Api/AppUrlChangeController.php';

        $this->services['Shopware\\Core\\Framework\\App\\Api\\AppUrlChangeController'] = $instance = new \Shopware\Core\Framework\App\Api\AppUrlChangeController(($this->services['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\Resolver'] ?? $this->getResolverService()), ($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? $this->getShopIdProviderService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\AppDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppDefinition
     */
    protected function getAppDefinitionService()
    {
        $this->services['Shopware\\Core\\Framework\\App\\AppDefinition'] = $instance = new \Shopware\Core\Framework\App\AppDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\AppLocaleProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppLocaleProvider
     */
    protected function getAppLocaleProviderService()
    {
        $a = ($this->services['user.repository'] ?? $this->getUser_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Framework\\App\\AppLocaleProvider'])) {
            return $this->services['Shopware\\Core\\Framework\\App\\AppLocaleProvider'];
        }

        return $this->services['Shopware\\Core\\Framework\\App\\AppLocaleProvider'] = new \Shopware\Core\Framework\App\AppLocaleProvider($a, ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\AppUrlChangeResolver\Resolver' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppUrlChangeResolver\Resolver
     */
    protected function getResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/Resolver.php';

        return $this->services['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\Resolver'] = new \Shopware\Core\Framework\App\AppUrlChangeResolver\Resolver(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\MoveShopPermanentlyStrategy'] ?? $this->getMoveShopPermanentlyStrategyService());
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\ReinstallAppsStrategy'] ?? $this->getReinstallAppsStrategyService());
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\UninstallAppsStrategy'] ?? $this->getUninstallAppsStrategyService());
        }, 3));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\FlowAction\AppFlowActionProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\FlowAction\AppFlowActionProvider
     */
    protected function getAppFlowActionProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/FlowAction/AppFlowActionProvider.php';

        return $this->services['Shopware\\Core\\Framework\\App\\FlowAction\\AppFlowActionProvider'] = new \Shopware\Core\Framework\App\FlowAction\AppFlowActionProvider(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'] ?? $this->getBusinessEventEncoderService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? $this->getStringTemplateRendererService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\ShopId\ShopIdProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\ShopId\ShopIdProvider
     */
    protected function getShopIdProviderService()
    {
        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'])) {
            return $this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'];
        }
        $b = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'])) {
            return $this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'];
        }

        return $this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] = new \Shopware\Core\Framework\App\ShopId\ShopIdProvider($a, $b);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Template\TemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Template\TemplateDefinition
     */
    protected function getTemplateDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/TemplateDefinition.php';

        $this->services['Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition'] = $instance = new \Shopware\Core\Framework\App\Template\TemplateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\App\Template\TemplateStateService' shared service.
     *
     * @return \Shopware\Core\Framework\App\Template\TemplateStateService
     */
    protected function getTemplateStateServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/TemplateStateService.php';

        $a = ($this->services['app_template.repository'] ?? $this->getAppTemplate_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Framework\\App\\Template\\TemplateStateService'])) {
            return $this->services['Shopware\\Core\\Framework\\App\\Template\\TemplateStateService'];
        }

        return $this->services['Shopware\\Core\\Framework\\App\\Template\\TemplateStateService'] = new \Shopware\Core\Framework\App\Template\TemplateStateService($a);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator
     */
    protected function getEntityCacheKeyGeneratorService()
    {
        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityHydrator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityHydrator
     */
    protected function getEntityHydratorService()
    {
        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityHydrator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityHydrator($this);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\ConfigJsonFieldAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\ConfigJsonFieldAccessorBuilder
     */
    protected function getConfigJsonFieldAccessorBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/JsonFieldAccessorBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/ConfigJsonFieldAccessorBuilder.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\ConfigJsonFieldAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\ConfigJsonFieldAccessorBuilder(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\CustomFieldsAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\CustomFieldsAccessorBuilder
     */
    protected function getCustomFieldsAccessorBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/JsonFieldAccessorBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/CustomFieldsAccessorBuilder.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\CustomFieldsAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\CustomFieldsAccessorBuilder(($this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? $this->getCustomFieldServiceService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\DefaultFieldAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\DefaultFieldAccessorBuilder
     */
    protected function getDefaultFieldAccessorBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/DefaultFieldAccessorBuilder.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\DefaultFieldAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\DefaultFieldAccessorBuilder();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\JsonFieldAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\JsonFieldAccessorBuilder
     */
    protected function getJsonFieldAccessorBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/JsonFieldAccessorBuilder.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\JsonFieldAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\JsonFieldAccessorBuilder(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\PriceFieldAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\PriceFieldAccessorBuilder
     */
    protected function getPriceFieldAccessorBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/PriceFieldAccessorBuilder.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\PriceFieldAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\PriceFieldAccessorBuilder(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToManyAssociationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToManyAssociationFieldResolver
     */
    protected function getManyToManyAssociationFieldResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/ManyToManyAssociationFieldResolver.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\ManyToManyAssociationFieldResolver'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToManyAssociationFieldResolver();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToOneAssociationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToOneAssociationFieldResolver
     */
    protected function getManyToOneAssociationFieldResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/ManyToOneAssociationFieldResolver.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\ManyToOneAssociationFieldResolver'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToOneAssociationFieldResolver(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\OneToManyAssociationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\OneToManyAssociationFieldResolver
     */
    protected function getOneToManyAssociationFieldResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/OneToManyAssociationFieldResolver.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\OneToManyAssociationFieldResolver'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\OneToManyAssociationFieldResolver();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\TranslationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\TranslationFieldResolver
     */
    protected function getTranslationFieldResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/TranslationFieldResolver.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\TranslationFieldResolver'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\TranslationFieldResolver();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\JoinGroupBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\JoinGroupBuilder
     */
    protected function getJoinGroupBuilderService()
    {
        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\JoinGroupBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\JoinGroupBuilder();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\DefinitionInstanceRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\DefinitionInstanceRegistry
     */
    protected function getDefinitionInstanceRegistryService()
    {
        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] = new \Shopware\Core\Framework\DataAbstractionLayer\DefinitionInstanceRegistry($this, ['log_entry' => 'Shopware\\Core\\Framework\\Log\\LogEntryDefinition', 'acl_role' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition', 'acl_user_role' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition', 'app' => 'Shopware\\Core\\Framework\\App\\AppDefinition', 'app_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition', 'app_action_button' => 'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition', 'app_action_button_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition', 'app_template' => 'Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition', 'app_payment_method' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition', 'app_script_condition' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition', 'app_script_condition_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition', 'app_cms_block' => 'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition', 'app_cms_block_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition', 'app_flow_action' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition', 'app_flow_action_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition', 'custom_field' => 'Shopware\\Core\\System\\CustomField\\CustomFieldDefinition', 'custom_field_set' => 'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition', 'custom_field_set_relation' => 'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition', 'version' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition', 'version_commit' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition', 'version_commit_data' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition', 'event_action' => 'Shopware\\Core\\Framework\\Event\\EventAction\\EventActionDefinition', 'event_action_rule' => 'Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionRule\\EventActionRuleDefinition', 'event_action_sales_channel' => 'Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionSalesChannel\\EventActionSalesChannelDefinition', 'dead_message' => 'Shopware\\Core\\Framework\\MessageQueue\\DeadMessage\\DeadMessageDefinition', 'message_queue_stats' => 'Shopware\\Core\\Framework\\MessageQueue\\MessageQueueStatsDefinition', 'plugin' => 'Shopware\\Core\\Framework\\Plugin\\PluginDefinition', 'plugin_translation' => 'Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition', 'scheduled_task' => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition', 'script' => 'Shopware\\Core\\Framework\\Script\\ScriptDefinition', 'language' => 'Shopware\\Core\\System\\Language\\LanguageDefinition', 'seo_url' => 'Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition', 'seo_url_template' => 'Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition', 'main_category' => 'Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition', 'webhook' => 'Shopware\\Core\\Framework\\Webhook\\WebhookDefinition', 'webhook_event_log' => 'Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition', 'sales_channel' => 'Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition', 'sales_channel_translation' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition', 'sales_channel_country' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition', 'sales_channel_currency' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition', 'sales_channel_domain' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition', 'sales_channel_language' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition', 'sales_channel_payment_method' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition', 'sales_channel_shipping_method' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition', 'sales_channel_type' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition', 'sales_channel_type_translation' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition', 'sales_channel_analytics' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition', 'country' => 'Shopware\\Core\\System\\Country\\CountryDefinition', 'country_state' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition', 'country_state_translation' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition', 'country_translation' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition', 'currency' => 'Shopware\\Core\\System\\Currency\\CurrencyDefinition', 'currency_country_rounding' => 'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition', 'currency_translation' => 'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition', 'custom_entity' => 'Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition', 'locale' => 'Shopware\\Core\\System\\Locale\\LocaleDefinition', 'locale_translation' => 'Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition', 'snippet_set' => 'Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition', 'snippet' => 'Shopware\\Core\\System\\Snippet\\SnippetDefinition', 'salutation' => 'Shopware\\Core\\System\\Salutation\\SalutationDefinition', 'salutation_translation' => 'Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition', 'tax' => 'Shopware\\Core\\System\\Tax\\TaxDefinition', 'tax_rule' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition', 'tax_rule_type' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition', 'tax_rule_type_translation' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition', 'unit' => 'Shopware\\Core\\System\\Unit\\UnitDefinition', 'unit_translation' => 'Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition', 'user' => 'Shopware\\Core\\System\\User\\UserDefinition', 'user_config' => 'Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition', 'user_access_key' => 'Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition', 'user_recovery' => 'Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition', 'integration' => 'Shopware\\Core\\System\\Integration\\IntegrationDefinition', 'integration_role' => 'Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition', 'state_machine' => 'Shopware\\Core\\System\\StateMachine\\StateMachineDefinition', 'state_machine_translation' => 'Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition', 'state_machine_state' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition', 'state_machine_state_translation' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition', 'state_machine_transition' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition', 'state_machine_history' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition', 'system_config' => 'Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition', 'number_range' => 'Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition', 'number_range_sales_channel' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition', 'number_range_state' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition', 'number_range_type' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition', 'number_range_type_translation' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition', 'number_range_translation' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition', 'tag' => 'Shopware\\Core\\System\\Tag\\TagDefinition', 'category' => 'Shopware\\Core\\Content\\Category\\CategoryDefinition', 'category_translation' => 'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition', 'category_tag' => 'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition', 'media' => 'Shopware\\Core\\Content\\Media\\MediaDefinition', 'media_default_folder' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition', 'media_thumbnail' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition', 'media_translation' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition', 'media_folder' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition', 'media_thumbnail_size' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition', 'media_folder_configuration' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition', 'media_folder_configuration_media_thumbnail_size' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition', 'media_tag' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition', 'product' => 'Shopware\\Core\\Content\\Product\\ProductDefinition', 'product_stream_mapping' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition', 'product_category' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition', 'product_custom_field_set' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition', 'product_tag' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition', 'product_configurator_setting' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition', 'product_price' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition', 'product_property' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition', 'product_search_keyword' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition', 'product_keyword_dictionary' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition', 'product_review' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition', 'product_manufacturer' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition', 'product_manufacturer_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition', 'product_media' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition', 'product_download' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition', 'product_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition', 'product_option' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition', 'product_category_tree' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition', 'product_cross_selling' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition', 'product_cross_selling_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition', 'product_cross_selling_assigned_products' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition', 'product_feature_set' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition', 'product_feature_set_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition', 'product_sorting' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition', 'product_sorting_translation' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition', 'product_search_config' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition', 'product_search_config_field' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition', 'product_visibility' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition', 'delivery_time' => 'Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition', 'newsletter_recipient' => 'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition', 'newsletter_recipient_tag' => 'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition', 'rule' => 'Shopware\\Core\\Content\\Rule\\RuleDefinition', 'rule_condition' => 'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition', 'rule_tag' => 'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition', 'product_stream' => 'Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition', 'product_stream_translation' => 'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition', 'product_stream_filter' => 'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition', 'product_export' => 'Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition', 'property_group' => 'Shopware\\Core\\Content\\Property\\PropertyGroupDefinition', 'property_group_option' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition', 'property_group_option_translation' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition', 'property_group_translation' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition', 'cms_page' => 'Shopware\\Core\\Content\\Cms\\CmsPageDefinition', 'cms_page_translation' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition', 'cms_section' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition', 'cms_block' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition', 'cms_slot' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition', 'cms_slot_translation' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition', 'mail_template' => 'Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition', 'mail_template_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition', 'mail_template_type' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition', 'mail_template_type_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition', 'mail_template_media' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition', 'mail_header_footer' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition', 'mail_header_footer_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition', 'delivery_time_translation' => 'Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition', 'import_export_profile' => 'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition', 'import_export_log' => 'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition', 'import_export_file' => 'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition', 'import_export_profile_translation' => 'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition', 'landing_page' => 'Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition', 'landing_page_translation' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition', 'landing_page_tag' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition', 'landing_page_sales_channel' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition', 'flow' => 'Shopware\\Core\\Content\\Flow\\FlowDefinition', 'flow_sequence' => 'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition', 'flow_template' => 'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition', 'customer' => 'Shopware\\Core\\Checkout\\Customer\\CustomerDefinition', 'customer_group_translation' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition', 'customer_address' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition', 'customer_recovery' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition', 'customer_group' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition', 'customer_group_registration_sales_channels' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition', 'customer_tag' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition', 'customer_wishlist' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition', 'customer_wishlist_product' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition', 'document' => 'Shopware\\Core\\Checkout\\Document\\DocumentDefinition', 'document_type' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition', 'document_type_translation' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition', 'document_base_config' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition', 'document_base_config_sales_channel' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition', 'order' => 'Shopware\\Core\\Checkout\\Order\\OrderDefinition', 'order_address' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition', 'order_customer' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition', 'order_delivery' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition', 'order_delivery_position' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition', 'order_line_item' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition', 'order_line_item_download' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition', 'order_tag' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition', 'order_transaction' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition', 'order_transaction_capture' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition', 'order_transaction_capture_refund' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition', 'order_transaction_capture_refund_position' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition', 'payment_method' => 'Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition', 'payment_method_translation' => 'Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition', 'promotion' => 'Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition', 'promotion_sales_channel' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition', 'promotion_individual_code' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition', 'promotion_discount' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition', 'promotion_discount_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition', 'promotion_setgroup' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition', 'promotion_setgroup_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition', 'promotion_order_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition', 'promotion_persona_customer' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition', 'promotion_persona_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition', 'promotion_cart_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition', 'promotion_translation' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition', 'promotion_discount_prices' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition', 'shipping_method' => 'Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition', 'shipping_method_tag' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition', 'shipping_method_price' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition', 'shipping_method_translation' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition', 'app_administration_snippet' => 'Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition', 'notification' => 'Shopware\\Administration\\Notification\\NotificationDefinition', 'theme' => 'Shopware\\Storefront\\Theme\\ThemeDefinition', 'theme_translation' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition', 'theme_sales_channel' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition', 'theme_media' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition', 'theme_child' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'], ['log_entry' => 'log_entry.repository', 'acl_role' => 'acl_role.repository', 'acl_user_role' => 'acl_user_role.repository', 'app' => 'app.repository', 'app_translation' => 'app_translation.repository', 'app_action_button' => 'app_action_button.repository', 'app_action_button_translation' => 'app_action_button_translation.repository', 'app_template' => 'app_template.repository', 'app_payment_method' => 'app_payment_method.repository', 'app_script_condition' => 'app_script_condition.repository', 'app_script_condition_translation' => 'app_script_condition_translation.repository', 'app_cms_block' => 'app_cms_block.repository', 'app_cms_block_translation' => 'app_cms_block_translation.repository', 'app_flow_action' => 'app_flow_action.repository', 'app_flow_action_translation' => 'app_flow_action_translation.repository', 'custom_field' => 'custom_field.repository', 'custom_field_set' => 'custom_field_set.repository', 'custom_field_set_relation' => 'custom_field_set_relation.repository', 'version' => 'version.repository', 'version_commit' => 'version_commit.repository', 'version_commit_data' => 'version_commit_data.repository', 'event_action' => 'event_action.repository', 'event_action_rule' => 'event_action_rule.repository', 'event_action_sales_channel' => 'event_action_sales_channel.repository', 'dead_message' => 'dead_message.repository', 'message_queue_stats' => 'message_queue_stats.repository', 'plugin' => 'plugin.repository', 'plugin_translation' => 'plugin_translation.repository', 'scheduled_task' => 'scheduled_task.repository', 'script' => 'script.repository', 'language' => 'language.repository', 'seo_url' => 'seo_url.repository', 'seo_url_template' => 'seo_url_template.repository', 'main_category' => 'main_category.repository', 'webhook' => 'webhook.repository', 'webhook_event_log' => 'webhook_event_log.repository', 'sales_channel' => 'sales_channel.repository', 'sales_channel_translation' => 'sales_channel_translation.repository', 'sales_channel_country' => 'sales_channel_country.repository', 'sales_channel_currency' => 'sales_channel_currency.repository', 'sales_channel_domain' => 'sales_channel_domain.repository', 'sales_channel_language' => 'sales_channel_language.repository', 'sales_channel_payment_method' => 'sales_channel_payment_method.repository', 'sales_channel_shipping_method' => 'sales_channel_shipping_method.repository', 'sales_channel_type' => 'sales_channel_type.repository', 'sales_channel_type_translation' => 'sales_channel_type_translation.repository', 'sales_channel_analytics' => 'sales_channel_analytics.repository', 'country' => 'country.repository', 'country_state' => 'country_state.repository', 'country_state_translation' => 'country_state_translation.repository', 'country_translation' => 'country_translation.repository', 'currency' => 'currency.repository', 'currency_country_rounding' => 'currency_country_rounding.repository', 'currency_translation' => 'currency_translation.repository', 'custom_entity' => 'custom_entity.repository', 'locale' => 'locale.repository', 'locale_translation' => 'locale_translation.repository', 'snippet_set' => 'snippet_set.repository', 'snippet' => 'snippet.repository', 'salutation' => 'salutation.repository', 'salutation_translation' => 'salutation_translation.repository', 'tax' => 'tax.repository', 'tax_rule' => 'tax_rule.repository', 'tax_rule_type' => 'tax_rule_type.repository', 'tax_rule_type_translation' => 'tax_rule_type_translation.repository', 'unit' => 'unit.repository', 'unit_translation' => 'unit_translation.repository', 'user' => 'user.repository', 'user_config' => 'user_config.repository', 'user_access_key' => 'user_access_key.repository', 'user_recovery' => 'user_recovery.repository', 'integration' => 'integration.repository', 'integration_role' => 'integration_role.repository', 'state_machine' => 'state_machine.repository', 'state_machine_translation' => 'state_machine_translation.repository', 'state_machine_state' => 'state_machine_state.repository', 'state_machine_state_translation' => 'state_machine_state_translation.repository', 'state_machine_transition' => 'state_machine_transition.repository', 'state_machine_history' => 'state_machine_history.repository', 'system_config' => 'system_config.repository', 'number_range' => 'number_range.repository', 'number_range_sales_channel' => 'number_range_sales_channel.repository', 'number_range_state' => 'number_range_state.repository', 'number_range_type' => 'number_range_type.repository', 'number_range_type_translation' => 'number_range_type_translation.repository', 'number_range_translation' => 'number_range_translation.repository', 'tag' => 'tag.repository', 'category' => 'category.repository', 'category_translation' => 'category_translation.repository', 'category_tag' => 'category_tag.repository', 'media' => 'media.repository', 'media_default_folder' => 'media_default_folder.repository', 'media_thumbnail' => 'media_thumbnail.repository', 'media_translation' => 'media_translation.repository', 'media_folder' => 'media_folder.repository', 'media_thumbnail_size' => 'media_thumbnail_size.repository', 'media_folder_configuration' => 'media_folder_configuration.repository', 'media_folder_configuration_media_thumbnail_size' => 'media_folder_configuration_media_thumbnail_size.repository', 'media_tag' => 'media_tag.repository', 'product' => 'product.repository', 'product_stream_mapping' => 'product_stream_mapping.repository', 'product_category' => 'product_category.repository', 'product_custom_field_set' => 'product_custom_field_set.repository', 'product_tag' => 'product_tag.repository', 'product_configurator_setting' => 'product_configurator_setting.repository', 'product_price' => 'product_price.repository', 'product_property' => 'product_property.repository', 'product_search_keyword' => 'product_search_keyword.repository', 'product_keyword_dictionary' => 'product_keyword_dictionary.repository', 'product_review' => 'product_review.repository', 'product_manufacturer' => 'product_manufacturer.repository', 'product_manufacturer_translation' => 'product_manufacturer_translation.repository', 'product_media' => 'product_media.repository', 'product_download' => 'product_download.repository', 'product_translation' => 'product_translation.repository', 'product_option' => 'product_option.repository', 'product_category_tree' => 'product_category_tree.repository', 'product_cross_selling' => 'product_cross_selling.repository', 'product_cross_selling_translation' => 'product_cross_selling_translation.repository', 'product_cross_selling_assigned_products' => 'product_cross_selling_assigned_products.repository', 'product_feature_set' => 'product_feature_set.repository', 'product_feature_set_translation' => 'product_feature_set_translation.repository', 'product_sorting' => 'product_sorting.repository', 'product_sorting_translation' => 'product_sorting_translation.repository', 'product_search_config' => 'product_search_config.repository', 'product_search_config_field' => 'product_search_config_field.repository', 'product_visibility' => 'product_visibility.repository', 'delivery_time' => 'delivery_time.repository', 'newsletter_recipient' => 'newsletter_recipient.repository', 'newsletter_recipient_tag' => 'newsletter_recipient_tag.repository', 'rule' => 'rule.repository', 'rule_condition' => 'rule_condition.repository', 'rule_tag' => 'rule_tag.repository', 'product_stream' => 'product_stream.repository', 'product_stream_translation' => 'product_stream_translation.repository', 'product_stream_filter' => 'product_stream_filter.repository', 'product_export' => 'product_export.repository', 'property_group' => 'property_group.repository', 'property_group_option' => 'property_group_option.repository', 'property_group_option_translation' => 'property_group_option_translation.repository', 'property_group_translation' => 'property_group_translation.repository', 'cms_page' => 'cms_page.repository', 'cms_page_translation' => 'cms_page_translation.repository', 'cms_section' => 'cms_section.repository', 'cms_block' => 'cms_block.repository', 'cms_slot' => 'cms_slot.repository', 'cms_slot_translation' => 'cms_slot_translation.repository', 'mail_template' => 'mail_template.repository', 'mail_template_translation' => 'mail_template_translation.repository', 'mail_template_type' => 'mail_template_type.repository', 'mail_template_type_translation' => 'mail_template_type_translation.repository', 'mail_template_media' => 'mail_template_media.repository', 'mail_header_footer' => 'mail_header_footer.repository', 'mail_header_footer_translation' => 'mail_header_footer_translation.repository', 'delivery_time_translation' => 'delivery_time_translation.repository', 'import_export_profile' => 'import_export_profile.repository', 'import_export_log' => 'import_export_log.repository', 'import_export_file' => 'import_export_file.repository', 'import_export_profile_translation' => 'import_export_profile_translation.repository', 'landing_page' => 'landing_page.repository', 'landing_page_translation' => 'landing_page_translation.repository', 'landing_page_tag' => 'landing_page_tag.repository', 'landing_page_sales_channel' => 'landing_page_sales_channel.repository', 'flow' => 'flow.repository', 'flow_sequence' => 'flow_sequence.repository', 'flow_template' => 'flow_template.repository', 'customer' => 'customer.repository', 'customer_group_translation' => 'customer_group_translation.repository', 'customer_address' => 'customer_address.repository', 'customer_recovery' => 'customer_recovery.repository', 'customer_group' => 'customer_group.repository', 'customer_group_registration_sales_channels' => 'customer_group_registration_sales_channels.repository', 'customer_tag' => 'customer_tag.repository', 'customer_wishlist' => 'customer_wishlist.repository', 'customer_wishlist_product' => 'customer_wishlist_product.repository', 'document' => 'document.repository', 'document_type' => 'document_type.repository', 'document_type_translation' => 'document_type_translation.repository', 'document_base_config' => 'document_base_config.repository', 'document_base_config_sales_channel' => 'document_base_config_sales_channel.repository', 'order' => 'order.repository', 'order_address' => 'order_address.repository', 'order_customer' => 'order_customer.repository', 'order_delivery' => 'order_delivery.repository', 'order_delivery_position' => 'order_delivery_position.repository', 'order_line_item' => 'order_line_item.repository', 'order_line_item_download' => 'order_line_item_download.repository', 'order_tag' => 'order_tag.repository', 'order_transaction' => 'order_transaction.repository', 'order_transaction_capture' => 'order_transaction_capture.repository', 'order_transaction_capture_refund' => 'order_transaction_capture_refund.repository', 'order_transaction_capture_refund_position' => 'order_transaction_capture_refund_position.repository', 'payment_method' => 'payment_method.repository', 'payment_method_translation' => 'payment_method_translation.repository', 'promotion' => 'promotion.repository', 'promotion_sales_channel' => 'promotion_sales_channel.repository', 'promotion_individual_code' => 'promotion_individual_code.repository', 'promotion_discount' => 'promotion_discount.repository', 'promotion_discount_rule' => 'promotion_discount_rule.repository', 'promotion_setgroup' => 'promotion_setgroup.repository', 'promotion_setgroup_rule' => 'promotion_setgroup_rule.repository', 'promotion_order_rule' => 'promotion_order_rule.repository', 'promotion_persona_customer' => 'promotion_persona_customer.repository', 'promotion_persona_rule' => 'promotion_persona_rule.repository', 'promotion_cart_rule' => 'promotion_cart_rule.repository', 'promotion_translation' => 'promotion_translation.repository', 'promotion_discount_prices' => 'promotion_discount_prices.repository', 'shipping_method' => 'shipping_method.repository', 'shipping_method_tag' => 'shipping_method_tag.repository', 'shipping_method_price' => 'shipping_method_price.repository', 'shipping_method_translation' => 'shipping_method_translation.repository', 'app_administration_snippet' => 'app_administration_snippet.repository', 'notification' => 'notification.repository', 'theme' => 'theme.repository', 'theme_translation' => 'theme_translation.repository', 'theme_sales_channel' => 'theme_sales_channel.repository', 'theme_media' => 'theme_media.repository', 'theme_child' => 'theme_child.repository']);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Event\EntityLoadedEventFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Event\EntityLoadedEventFactory
     */
    protected function getEntityLoadedEventFactoryService()
    {
        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Event\EntityLoadedEventFactory(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\ExtensionRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\ExtensionRegistry
     */
    protected function getExtensionRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/ExtensionRegistry.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\ExtensionRegistry'] = new \Shopware\Core\Framework\DataAbstractionLayer\ExtensionRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Administration\\Notification\\Extension\\IntegrationExtension'] ?? ($this->privates['Shopware\\Administration\\Notification\\Extension\\IntegrationExtension'] = new \Shopware\Administration\Notification\Extension\IntegrationExtension()));
            yield 1 => ($this->privates['Shopware\\Administration\\Notification\\Extension\\UserExtension'] ?? ($this->privates['Shopware\\Administration\\Notification\\Extension\\UserExtension'] = new \Shopware\Administration\Notification\Extension\UserExtension()));
            yield 2 => ($this->privates['Shopware\\Storefront\\Theme\\Extension\\SalesChannelExtension'] ?? ($this->privates['Shopware\\Storefront\\Theme\\Extension\\SalesChannelExtension'] = new \Shopware\Storefront\Theme\Extension\SalesChannelExtension()));
            yield 3 => ($this->privates['Shopware\\Storefront\\Theme\\Extension\\LanguageExtension'] ?? ($this->privates['Shopware\\Storefront\\Theme\\Extension\\LanguageExtension'] = new \Shopware\Storefront\Theme\Extension\LanguageExtension()));
            yield 4 => ($this->privates['Shopware\\Storefront\\Theme\\Extension\\MediaExtension'] ?? ($this->privates['Shopware\\Storefront\\Theme\\Extension\\MediaExtension'] = new \Shopware\Storefront\Theme\Extension\MediaExtension()));
        }, 5));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryFacadeHookFactory
     */
    protected function getRepositoryFacadeHookFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Facade/RepositoryFacadeHookFactory.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\RepositoryFacadeHookFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryFacadeHookFactory(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\AppContextCreator'] ?? $this->getAppContextCreatorService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()), ($this->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] ?? $this->getAclCriteriaValidatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryWriterFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryWriterFacadeHookFactory
     */
    protected function getRepositoryWriterFacadeHookFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Facade/RepositoryWriterFacadeHookFactory.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\RepositoryWriterFacadeHookFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryWriterFacadeHookFactory(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\AppContextCreator'] ?? $this->getAppContextCreatorService()), ($this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] ?? $this->getSyncServiceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Facade\SalesChannelRepositoryFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Facade\SalesChannelRepositoryFacadeHookFactory
     */
    protected function getSalesChannelRepositoryFacadeHookFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Facade/SalesChannelRepositoryFacadeHookFactory.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\SalesChannelRepositoryFacadeHookFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Facade\SalesChannelRepositoryFacadeHookFactory(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BlobFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BlobFieldSerializer
     */
    protected function getBlobFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/BlobFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\BlobFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BlobFieldSerializer();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BoolFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BoolFieldSerializer
     */
    protected function getBoolFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/BoolFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\BoolFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BoolFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CalculatedPriceFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CalculatedPriceFieldSerializer
     */
    protected function getCalculatedPriceFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CalculatedPriceFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CalculatedPriceFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CalculatedPriceFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CartPriceFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CartPriceFieldSerializer
     */
    protected function getCartPriceFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CartPriceFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CartPriceFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CartPriceFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CashRoundingConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CashRoundingConfigFieldSerializer
     */
    protected function getCashRoundingConfigFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CashRoundingConfigFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CashRoundingConfigFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CashRoundingConfigFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ConfigJsonFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ConfigJsonFieldSerializer
     */
    protected function getConfigJsonFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ConfigJsonFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ConfigJsonFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ConfigJsonFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedAtFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedAtFieldSerializer
     */
    protected function getCreatedAtFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateTimeFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CreatedAtFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CreatedAtFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedAtFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedByFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedByFieldSerializer
     */
    protected function getCreatedByFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FkFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CreatedByFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CreatedByFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedByFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CustomFieldsSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CustomFieldsSerializer
     */
    protected function getCustomFieldsSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CustomFieldsSerializer.php';

        $a = ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'];
        }
        $b = ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? $this->getWriteCommandExtractorService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'];
        }

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CustomFieldsSerializer(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), $a, ($this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? $this->getCustomFieldServiceService()), $b);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateFieldSerializer
     */
    protected function getDateFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateTimeFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateTimeFieldSerializer
     */
    protected function getDateTimeFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateTimeFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateTimeFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateTimeFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\EmailFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\EmailFieldSerializer
     */
    protected function getEmailFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/EmailFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\EmailFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\EmailFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FkFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FkFieldSerializer
     */
    protected function getFkFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FkFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\FkFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FkFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FloatFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FloatFieldSerializer
     */
    protected function getFloatFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FloatFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\FloatFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FloatFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IdFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IdFieldSerializer
     */
    protected function getIdFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/IdFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\IdFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IdFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IntFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IntFieldSerializer
     */
    protected function getIntFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/IntFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\IntFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IntFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\JsonFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\JsonFieldSerializer
     */
    protected function getJsonFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\JsonFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\JsonFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ListFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ListFieldSerializer
     */
    protected function getListFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ListFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ListFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ListFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\LongTextFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\LongTextFieldSerializer
     */
    protected function getLongTextFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/LongTextFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\LongTextFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\LongTextFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? $this->getHtmlSanitizerService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToManyAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToManyAssociationFieldSerializer
     */
    protected function getManyToManyAssociationFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ManyToManyAssociationFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ManyToManyAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToManyAssociationFieldSerializer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? $this->getWriteCommandExtractorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToOneAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToOneAssociationFieldSerializer
     */
    protected function getManyToOneAssociationFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ManyToOneAssociationFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ManyToOneAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToOneAssociationFieldSerializer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? $this->getWriteCommandExtractorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToManyAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToManyAssociationFieldSerializer
     */
    protected function getOneToManyAssociationFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/OneToManyAssociationFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\OneToManyAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToManyAssociationFieldSerializer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? $this->getWriteCommandExtractorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? $this->getEntityWriteGatewayInterfaceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToOneAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToOneAssociationFieldSerializer
     */
    protected function getOneToOneAssociationFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/OneToOneAssociationFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\OneToOneAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToOneAssociationFieldSerializer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? $this->getWriteCommandExtractorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PHPUnserializeFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PHPUnserializeFieldSerializer
     */
    protected function getPHPUnserializeFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/PHPUnserializeFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PHPUnserializeFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PHPUnserializeFieldSerializer();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PasswordFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PasswordFieldSerializer
     */
    protected function getPasswordFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PasswordFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PasswordFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceDefinitionFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceDefinitionFieldSerializer
     */
    protected function getPriceDefinitionFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/PriceDefinitionFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceDefinitionFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceDefinitionFieldSerializer(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] ?? $this->getRuleConditionRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceFieldSerializer
     */
    protected function getPriceFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/PriceFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceFieldSerializer(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ReferenceVersionFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ReferenceVersionFieldSerializer
     */
    protected function getReferenceVersionFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ReferenceVersionFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ReferenceVersionFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ReferenceVersionFieldSerializer();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\RemoteAddressFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\RemoteAddressFieldSerializer
     */
    protected function getRemoteAddressFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/RemoteAddressFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\RemoteAddressFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\RemoteAddressFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StateMachineStateFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StateMachineStateFieldSerializer
     */
    protected function getStateMachineStateFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FkFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/StateMachineStateFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\StateMachineStateFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StateMachineStateFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StringFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StringFieldSerializer
     */
    protected function getStringFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/StringFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\StringFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StringFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? $this->getHtmlSanitizerService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TaxFreeConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TaxFreeConfigFieldSerializer
     */
    protected function getTaxFreeConfigFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/TaxFreeConfigFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TaxFreeConfigFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TaxFreeConfigFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TimeZoneFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TimeZoneFieldSerializer
     */
    protected function getTimeZoneFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/TimeZoneFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TimeZoneFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TimeZoneFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslatedFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslatedFieldSerializer
     */
    protected function getTranslatedFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/TranslatedFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TranslatedFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslatedFieldSerializer();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslationsAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslationsAssociationFieldSerializer
     */
    protected function getTranslationsAssociationFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/TranslationsAssociationFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TranslationsAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslationsAssociationFieldSerializer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? $this->getWriteCommandExtractorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? $this->getEntityWriteGatewayInterfaceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedAtFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedAtFieldSerializer
     */
    protected function getUpdatedAtFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateTimeFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/UpdatedAtFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\UpdatedAtFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedAtFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedByFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedByFieldSerializer
     */
    protected function getUpdatedByFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FkFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/UpdatedByFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\UpdatedByFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedByFieldSerializer(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VariantListingConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VariantListingConfigFieldSerializer
     */
    protected function getVariantListingConfigFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/VariantListingConfigFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VariantListingConfigFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VariantListingConfigFieldSerializer(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionDataPayloadFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionDataPayloadFieldSerializer
     */
    protected function getVersionDataPayloadFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/VersionDataPayloadFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VersionDataPayloadFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionDataPayloadFieldSerializer();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionFieldSerializer
     */
    protected function getVersionFieldSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/VersionFieldSerializer.php';

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VersionFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionFieldSerializer();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\EntityIndexerRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\EntityIndexerRegistry
     */
    protected function getEntityIndexerRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexerRegistry.php';

        $a = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'];
        }

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\EntityIndexerRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'] ?? $this->getLandingPageIndexerService());
            yield 1 => ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'] ?? $this->getProductIndexerService());
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'] ?? $this->getCustomerIndexerService());
            yield 3 => ($this->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'] ?? $this->getSalesChannelIndexerService());
            yield 4 => ($this->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'] ?? $this->getCategoryIndexerService());
            yield 5 => ($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'] ?? $this->getMediaIndexerService());
            yield 6 => ($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'] ?? $this->getMediaFolderConfigurationIndexerService());
            yield 7 => ($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'] ?? $this->getMediaFolderIndexerService());
            yield 8 => ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'] ?? $this->getProductStreamUpdaterService());
            yield 9 => ($this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'] ?? $this->getNewsletterRecipientIndexerService());
            yield 10 => ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] ?? $this->getRuleIndexerService());
            yield 11 => ($this->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'] ?? $this->getProductStreamIndexerService());
            yield 12 => ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
            yield 13 => ($this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'] ?? $this->getPaymentMethodIndexerService());
            yield 14 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'] ?? $this->getPromotionIndexerService());
            yield 15 => ($this->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'] ?? $this->getThemeIndexerService());
        }, 16), $a, $b);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Read\EntityReaderInterface' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityReader
     */
    protected function getEntityReaderInterfaceService()
    {
        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityReader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityHydrator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityHydrator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityHydrator($this))), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\SqlQueryParser'] ?? $this->getSqlQueryParserService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] ?? $this->getCriteriaQueryBuilderService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Search\EntityAggregatorInterface' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntityAggregator
     */
    protected function getEntityAggregatorInterfaceService()
    {
        $a = ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService());

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] = new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntityAggregator($a, ($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityAggregator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())), $c, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] ?? $this->getCriteriaQueryBuilderService()), $this->getEnv('bool:SHOPWARE_DBAL_TIMEZONE_SUPPORT_ENABLED'), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\SearchTermInterpreter'] ?? $this->getSearchTermInterpreterService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\EntityScoreQueryBuilder'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\EntityScoreQueryBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\EntityScoreQueryBuilder()))), new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntityAggregatorHydrator($c), $b);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Search\EntitySearcherInterface' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntitySearcher
     */
    protected function getEntitySearcherInterfaceService()
    {
        $a = ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'];
        }

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] = new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntitySearcher(($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntitySearcher(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] ?? $this->getCriteriaQueryBuilderService())), $a, ($this->privates['Shopware\\Elasticsearch\\Framework\\DataAbstractionLayer\\CriteriaParser'] ?? $this->getCriteriaParserService()), new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntitySearchHydrator(), $b);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\VersionManager' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\VersionManager
     */
    protected function getVersionManagerService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? $this->getEntityWriteGatewayInterfaceService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] = new \Shopware\Core\Framework\DataAbstractionLayer\VersionManager($a, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $b, $c, $d, ($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] ?? $this->getVersionCommitDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] ?? $this->getVersionCommitDataDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] ?? $this->getVersionDefinitionService()), ($this->privates['lock.default.factory'] ?? $this->getLock_Default_FactoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition
     */
    protected function getVersionCommitDataDefinitionService()
    {
        $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition
     */
    protected function getVersionCommitDefinitionService()
    {
        $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition
     */
    protected function getVersionDefinitionService()
    {
        $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriteGatewayInterface' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityWriteGateway
     */
    protected function getEntityWriteGatewayInterfaceService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'];
        }

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityWriteGateway(125, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\ExceptionHandlerRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\System\\Language\\LanguageExceptionHandler'] ?? ($this->privates['Shopware\\Core\\System\\Language\\LanguageExceptionHandler'] = new \Shopware\Core\System\Language\LanguageExceptionHandler()));
            yield 1 => ($this->privates['Shopware\\Core\\System\\SalesChannel\\SalesChannelExceptionHandler'] ?? ($this->privates['Shopware\\Core\\System\\SalesChannel\\SalesChannelExceptionHandler'] = new \Shopware\Core\System\SalesChannel\SalesChannelExceptionHandler()));
            yield 2 => ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductExceptionHandler'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductExceptionHandler'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\ProductExceptionHandler()));
            yield 3 => ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingExceptionHandler'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingExceptionHandler'] = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingExceptionHandler()));
            yield 4 => ($this->privates['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldExceptionHandler'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldExceptionHandler'] = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldExceptionHandler()));
            yield 5 => ($this->privates['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigExceptionHandler'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigExceptionHandler'] = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigExceptionHandler()));
            yield 6 => ($this->privates['Shopware\\Core\\Content\\Newsletter\\NewsletterExceptionHandler'] ?? ($this->privates['Shopware\\Core\\Content\\Newsletter\\NewsletterExceptionHandler'] = new \Shopware\Core\Content\Newsletter\NewsletterExceptionHandler()));
            yield 7 => ($this->privates['Shopware\\Core\\Content\\ProductExport\\DataAbstractionLayer\\ProductExportExceptionHandler'] ?? ($this->privates['Shopware\\Core\\Content\\ProductExport\\DataAbstractionLayer\\ProductExportExceptionHandler'] = new \Shopware\Core\Content\ProductExport\DataAbstractionLayer\ProductExportExceptionHandler()));
            yield 8 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerWishlistProductExceptionHandler'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerWishlistProductExceptionHandler'] = new \Shopware\Core\Checkout\Customer\DataAbstractionLayer\CustomerWishlistProductExceptionHandler()));
            yield 9 => ($this->privates['Shopware\\Core\\Checkout\\Order\\OrderExceptionHandler'] ?? ($this->privates['Shopware\\Core\\Checkout\\Order\\OrderExceptionHandler'] = new \Shopware\Core\Checkout\Order\OrderExceptionHandler()));
        }, 10)), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriter' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriter
     */
    protected function getEntityWriterService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? $this->getWriteCommandExtractorService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? $this->getEntityWriteGatewayInterfaceService());

        if (isset($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'])) {
            return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'];
        }
        $c = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());
        $d = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService());

        return $this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] = new \Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriter($a, new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityForeignKeyResolver($c, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()))), $b, ($this->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? $this->getCachedLanguageLoaderService()), $d, new \Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriteResultFactory($d, $c));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Event\BusinessEventRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\Event\BusinessEventRegistry
     */
    protected function getBusinessEventRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/BusinessEventRegistry.php';

        $this->services['Shopware\\Core\\Framework\\Event\\BusinessEventRegistry'] = $instance = new \Shopware\Core\Framework\Event\BusinessEventRegistry();

        $instance->addClasses([0 => 'Shopware\\Core\\Framework\\Event\\BusinessEvent', 1 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerBeforeLoginEvent', 2 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLoginEvent', 3 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLogoutEvent', 4 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerDeletedEvent', 5 => 'Shopware\\Core\\System\\User\\Recovery\\UserRecoveryRequestEvent', 6 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerChangedPaymentMethodEvent', 7 => 'Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', 8 => 'Shopware\\Core\\Checkout\\Order\\Event\\OrderPaymentMethodChangedEvent', 9 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerAccountRecoverRequestEvent', 10 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerDoubleOptInRegistrationEvent', 11 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerGroupRegistrationAccepted', 12 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerGroupRegistrationDeclined', 13 => 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerRegisterEvent', 14 => 'Shopware\\Core\\Checkout\\Customer\\Event\\DoubleOptInGuestOrderEvent', 15 => 'Shopware\\Core\\Checkout\\Customer\\Event\\GuestCustomerRegisterEvent', 16 => 'Shopware\\Core\\Content\\ContactForm\\Event\\ContactFormEvent', 17 => 'Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailBeforeSentEvent', 18 => 'Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailBeforeValidateEvent', 19 => 'Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailSentEvent', 20 => 'Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterConfirmEvent', 21 => 'Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterRegisterEvent', 22 => 'Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterUnsubscribeEvent', 23 => 'Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterUpdateEvent', 24 => 'Shopware\\Core\\Content\\ProductExport\\Event\\ProductExportLoggingEvent']);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionRule\EventActionRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionRule\EventActionRuleDefinition
     */
    protected function getEventActionRuleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/EventAction/Aggregate/EventActionRule/EventActionRuleDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionRule\\EventActionRuleDefinition'] = $instance = new \Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionRule\EventActionRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionSalesChannel\EventActionSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionSalesChannel\EventActionSalesChannelDefinition
     */
    protected function getEventActionSalesChannelDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/EventAction/Aggregate/EventActionSalesChannel/EventActionSalesChannelDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionSalesChannel\\EventActionSalesChannelDefinition'] = $instance = new \Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionSalesChannel\EventActionSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Event\EventAction\EventActionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Event\EventAction\EventActionDefinition
     */
    protected function getEventActionDefinitionService()
    {
        $this->services['Shopware\\Core\\Framework\\Event\\EventAction\\EventActionDefinition'] = $instance = new \Shopware\Core\Framework\Event\EventAction\EventActionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Increment\Controller\IncrementApiController' shared service.
     *
     * @return \Shopware\Core\Framework\Increment\Controller\IncrementApiController
     */
    protected function getIncrementApiControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/Controller/IncrementApiController.php';

        return $this->services['Shopware\\Core\\Framework\\Increment\\Controller\\IncrementApiController'] = new \Shopware\Core\Framework\Increment\Controller\IncrementApiController(($this->services['shopware.increment.gateway.registry'] ?? $this->getShopware_Increment_Gateway_RegistryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Log\LogEntryDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Log\LogEntryDefinition
     */
    protected function getLogEntryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/LogEntryDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Log\\LogEntryDefinition'] = $instance = new \Shopware\Core\Framework\Log\LogEntryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\MessageQueue\Api\ConsumeMessagesController' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Api\ConsumeMessagesController
     */
    protected function getConsumeMessagesControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Api/ConsumeMessagesController.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/StopWorkerOnSigtermSignalListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/DispatchPcntlSignalListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Subscriber/EarlyReturnMessagesListener.php';

        $this->services['Shopware\\Core\\Framework\\MessageQueue\\Api\\ConsumeMessagesController'] = $instance = new \Shopware\Core\Framework\MessageQueue\Api\ConsumeMessagesController(($this->privates['messenger.receiver_locator'] ?? $this->getMessenger_ReceiverLocatorService()), ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService()), 20, ($this->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $this->getMessenger_Listener_StopWorkerOnRestartSignalListenerService()), new \Symfony\Component\Messenger\EventListener\StopWorkerOnSigtermSignalListener(($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService())), new \Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener(), new \Shopware\Core\Framework\MessageQueue\Subscriber\EarlyReturnMessagesListener(), 'default', '128M');

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\MessageQueue\DeadMessage\DeadMessageDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\DeadMessage\DeadMessageDefinition
     */
    protected function getDeadMessageDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/DeadMessage/DeadMessageDefinition.php';

        $this->services['Shopware\\Core\\Framework\\MessageQueue\\DeadMessage\\DeadMessageDefinition'] = $instance = new \Shopware\Core\Framework\MessageQueue\DeadMessage\DeadMessageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\MessageQueue\MessageQueueStatsDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\MessageQueueStatsDefinition
     */
    protected function getMessageQueueStatsDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/MessageQueueStatsDefinition.php';

        $this->services['Shopware\\Core\\Framework\\MessageQueue\\MessageQueueStatsDefinition'] = $instance = new \Shopware\Core\Framework\MessageQueue\MessageQueueStatsDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Api\ScheduledTaskController' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Api\ScheduledTaskController
     */
    protected function getScheduledTaskControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Api/ScheduledTaskController.php';

        $this->services['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Api\\ScheduledTaskController'] = $instance = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Api\ScheduledTaskController(($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Scheduler\\TaskScheduler'] ?? $this->getTaskSchedulerService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition
     */
    protected function getScheduledTaskDefinitionService()
    {
        $this->services['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition'] = $instance = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Migration\Api\MigrationController' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Api\MigrationController
     */
    protected function getMigrationControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Api/MigrationController.php';

        $this->services['Shopware\\Core\\Framework\\Migration\\Api\\MigrationController'] = $instance = new \Shopware\Core\Framework\Migration\Api\MigrationController(($this->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] ?? $this->getMigrationCollectionLoaderService()), '6.4.20.0');

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Migration\IndexerQueuer' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\IndexerQueuer
     */
    protected function getIndexerQueuerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/IndexerQueuer.php';

        return $this->services['Shopware\\Core\\Framework\\Migration\\IndexerQueuer'] = new \Shopware\Core\Framework\Migration\IndexerQueuer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Migration\MigrationCollectionLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationCollectionLoader
     */
    protected function getMigrationCollectionLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationCollectionLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationRuntime.php';

        $a = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());
        $b = ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService());

        return $this->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] = new \Shopware\Core\Framework\Migration\MigrationCollectionLoader($a, new \Shopware\Core\Framework\Migration\MigrationRuntime($a, $b), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core'] ?? ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core'] = new \Shopware\Core\Framework\Migration\MigrationSource('core')));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_3'] ?? $this->getMigrationSource_Core_V63Service());
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_4'] ?? $this->getMigrationSource_Core_V64Service());
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_5'] ?? $this->getMigrationSource_Core_V65Service());
            yield 4 => ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.null'] ?? ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.null'] = new \Shopware\Core\Framework\Migration\MigrationSource('null', [])));
            yield 5 => ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Framework'] ?? ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Framework'] = new \Shopware\Core\Framework\Migration\MigrationSource('Framework', [(\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration') => 'Shopware\\Core\\Framework\\Migration'])));
            yield 6 => ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Administration'] ?? ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Administration'] = new \Shopware\Core\Framework\Migration\MigrationSource('Administration', [(\dirname(__DIR__, 4).'/vendor/shopware/administration/Migration') => 'Shopware\\Administration\\Migration'])));
            yield 7 => ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Storefront'] ?? ($this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Storefront'] = new \Shopware\Core\Framework\Migration\MigrationSource('Storefront', [(\dirname(__DIR__, 4).'/vendor/shopware/storefront/Migration') => 'Shopware\\Storefront\\Migration'])));
        }, 8), $b);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition
     */
    protected function getPluginTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Aggregate/PluginTranslation/PluginTranslationDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition'] = $instance = new \Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Plugin\KernelPluginCollection' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\KernelPluginCollection
     */
    protected function getKernelPluginCollectionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/KernelPluginCollection.php';

        return $this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] = ($this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader'] ?? $this->getKernelPluginLoaderService())->getPluginInstances();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Plugin\KernelPluginLoader\KernelPluginLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\KernelPluginLoader\KernelPluginLoader
     */
    protected function getKernelPluginLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ContainerAwareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Bundle/BundleInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ContainerAwareTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Bundle/Bundle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/KernelPluginLoader/KernelPluginLoader.php';

        return $this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader'] = ($this->services['kernel'] ?? $this->get('kernel', 1))->getPluginLoader();
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Plugin\PluginDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginDefinition
     */
    protected function getPluginDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Plugin\\PluginDefinition'] = $instance = new \Shopware\Core\Framework\Plugin\PluginDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Plugin\Util\PluginIdProvider' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Util\PluginIdProvider
     */
    protected function getPluginIdProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/PluginIdProvider.php';

        return $this->services['Shopware\\Core\\Framework\\Plugin\\Util\\PluginIdProvider'] = new \Shopware\Core\Framework\Plugin\Util\PluginIdProvider(($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Routing\CanonicalRedirectService' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\CanonicalRedirectService
     */
    protected function getCanonicalRedirectServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/CanonicalRedirectService.php';

        return $this->services['Shopware\\Core\\Framework\\Routing\\CanonicalRedirectService'] = new \Shopware\Core\Framework\Routing\CanonicalRedirectService(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Routing\RequestTransformerInterface' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\RequestTransformer
     */
    protected function getRequestTransformerInterfaceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RequestTransformerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/RequestTransformer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RequestTransformer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/AbstractDomainLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/CachedDomainLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/DomainLoader.php';

        return $this->services['Shopware\\Core\\Framework\\Routing\\RequestTransformerInterface'] = new \Shopware\Storefront\Framework\Routing\RequestTransformer(new \Shopware\Core\Framework\Routing\RequestTransformer(), ($this->services['Shopware\\Core\\Content\\Seo\\EmptyPathInfoResolver'] ?? $this->getEmptyPathInfoResolverService()), $this->getParameter('shopware.routing.registered_api_prefixes'), new \Shopware\Storefront\Framework\Routing\CachedDomainLoader(new \Shopware\Storefront\Framework\Routing\DomainLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService())));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Rule\Api\RuleConfigController' shared service.
     *
     * @return \Shopware\Core\Framework\Rule\Api\RuleConfigController
     */
    protected function getRuleConfigControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Rule/Api/RuleConfigController.php';

        $this->services['Shopware\\Core\\Framework\\Rule\\Api\\RuleConfigController'] = $instance = new \Shopware\Core\Framework\Rule\Api\RuleConfigController(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\AndRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\AndRule'] = new \Shopware\Core\Framework\Rule\Container\AndRule()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\NotRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\NotRule'] = new \Shopware\Core\Framework\Rule\Container\NotRule()));
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\OrRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\OrRule'] = new \Shopware\Core\Framework\Rule\Container\OrRule()));
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\XorRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\XorRule'] = new \Shopware\Core\Framework\Rule\Container\XorRule()));
            yield 4 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\MatchAllLineItemsRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\MatchAllLineItemsRule'] = new \Shopware\Core\Framework\Rule\Container\MatchAllLineItemsRule()));
            yield 5 => ($this->privates['Shopware\\Core\\Framework\\Rule\\ScriptRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\ScriptRule'] = new \Shopware\Core\Framework\Rule\ScriptRule()));
            yield 6 => ($this->privates['Shopware\\Core\\Framework\\Rule\\DateRangeRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\DateRangeRule'] = new \Shopware\Core\Framework\Rule\DateRangeRule()));
            yield 7 => ($this->privates['Shopware\\Core\\Framework\\Rule\\SimpleRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\SimpleRule'] = new \Shopware\Core\Framework\Rule\SimpleRule()));
            yield 8 => ($this->privates['Shopware\\Core\\Framework\\Rule\\SalesChannelRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\SalesChannelRule'] = new \Shopware\Core\Framework\Rule\SalesChannelRule()));
            yield 9 => ($this->privates['Shopware\\Core\\Framework\\Rule\\TimeRangeRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\TimeRangeRule'] = new \Shopware\Core\Framework\Rule\TimeRangeRule()));
            yield 10 => ($this->privates['Shopware\\Core\\Framework\\Rule\\WeekdayRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\WeekdayRule'] = new \Shopware\Core\Framework\Rule\WeekdayRule()));
            yield 11 => ($this->privates['Shopware\\Core\\System\\Language\\Rule\\LanguageRule'] ?? ($this->privates['Shopware\\Core\\System\\Language\\Rule\\LanguageRule'] = new \Shopware\Core\System\Language\Rule\LanguageRule()));
            yield 12 => ($this->privates['Shopware\\Core\\System\\Currency\\Rule\\CurrencyRule'] ?? ($this->privates['Shopware\\Core\\System\\Currency\\Rule\\CurrencyRule'] = new \Shopware\Core\System\Currency\Rule\CurrencyRule()));
            yield 13 => ($this->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTagRule'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTagRule'] = new \Shopware\Core\Content\Flow\Rule\OrderTagRule()));
            yield 14 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartAmountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartAmountRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartAmountRule()));
            yield 15 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartPositionPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartPositionPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartPositionPriceRule()));
            yield 16 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsCountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsCountRule'] = new \Shopware\Core\Checkout\Cart\Rule\GoodsCountRule()));
            yield 17 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\GoodsPriceRule()));
            yield 18 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfTypeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfTypeRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemOfTypeRule()));
            yield 19 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemRule()));
            yield 20 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionLineItemRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionLineItemRule'] = new \Shopware\Core\Checkout\Promotion\Rule\PromotionLineItemRule()));
            yield 21 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionCodeOfTypeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionCodeOfTypeRule'] = new \Shopware\Core\Checkout\Promotion\Rule\PromotionCodeOfTypeRule()));
            yield 22 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionValueRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionValueRule'] = new \Shopware\Core\Checkout\Promotion\Rule\PromotionValueRule()));
            yield 23 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionsInCartCountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionsInCartCountRule'] = new \Shopware\Core\Checkout\Promotion\Rule\PromotionsInCartCountRule()));
            yield 24 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemsInCartRule()));
            yield 25 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTotalPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTotalPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemTotalPriceRule()));
            yield 26 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemUnitPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemUnitPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemUnitPriceRule()));
            yield 27 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWithQuantityRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWithQuantityRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemWithQuantityRule()));
            yield 28 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWrapperRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWrapperRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemWrapperRule()));
            yield 29 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartWeightRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartWeightRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartWeightRule()));
            yield 30 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartVolumeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartVolumeRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartVolumeRule()));
            yield 31 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartHasDeliveryFreeItemRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartHasDeliveryFreeItemRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartHasDeliveryFreeItemRule()));
            yield 32 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCountryRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCountryRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingCountryRule()));
            yield 33 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStreetRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStreetRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingStreetRule()));
            yield 34 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingZipCodeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingZipCodeRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingZipCodeRule()));
            yield 35 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerGroupRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerGroupRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerGroupRule()));
            yield 36 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerTagRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerTagRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerTagRule()));
            yield 37 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerNumberRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerNumberRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerNumberRule()));
            yield 38 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DifferentAddressesRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DifferentAddressesRule'] = new \Shopware\Core\Checkout\Customer\Rule\DifferentAddressesRule()));
            yield 39 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\EmailRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\EmailRule'] = new \Shopware\Core\Checkout\Customer\Rule\EmailRule()));
            yield 40 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewCustomerRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewCustomerRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsNewCustomerRule()));
            yield 41 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsActiveRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsActiveRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsActiveRule()));
            yield 42 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\LastNameRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\LastNameRule'] = new \Shopware\Core\Checkout\Customer\Rule\LastNameRule()));
            yield 43 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsCompanyRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsCompanyRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsCompanyRule()));
            yield 44 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartTaxDisplayRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartTaxDisplayRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartTaxDisplayRule()));
            yield 45 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsGuestCustomerRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsGuestCustomerRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsGuestCustomerRule()));
            yield 46 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewsletterRecipientRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewsletterRecipientRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsNewsletterRecipientRule()));
            yield 47 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCountryRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCountryRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingCountryRule()));
            yield 48 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStreetRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStreetRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingStreetRule()));
            yield 49 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCityRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCityRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingCityRule()));
            yield 50 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCityRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCityRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingCityRule()));
            yield 51 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStateRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStateRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingStateRule()));
            yield 52 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStateRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStateRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingStateRule()));
            yield 53 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingZipCodeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingZipCodeRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingZipCodeRule()));
            yield 54 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerLoggedInRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerLoggedInRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerLoggedInRule()));
            yield 55 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartCountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartCountRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemsInCartCountRule()));
            yield 56 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderCountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderCountRule'] = new \Shopware\Core\Checkout\Customer\Rule\OrderCountRule()));
            yield 57 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastOrderRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastOrderRule'] = new \Shopware\Core\Checkout\Customer\Rule\DaysSinceLastOrderRule()));
            yield 58 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTagRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTagRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemTagRule()));
            yield 59 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\AlwaysValidRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\AlwaysValidRule'] = new \Shopware\Core\Checkout\Cart\Rule\AlwaysValidRule()));
            yield 60 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPropertyRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPropertyRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemPropertyRule()));
            yield 61 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemIsNewRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemIsNewRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemIsNewRule()));
            yield 62 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfManufacturerRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfManufacturerRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemOfManufacturerRule()));
            yield 63 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPurchasePriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPurchasePriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemPurchasePriceRule()));
            yield 64 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCreationDateRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCreationDateRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemCreationDateRule()));
            yield 65 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemReleaseDateRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemReleaseDateRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemReleaseDateRule()));
            yield 66 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemClearanceSaleRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemClearanceSaleRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemClearanceSaleRule()));
            yield 67 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPromotedRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPromotedRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemPromotedRule()));
            yield 68 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInCategoryRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInCategoryRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemInCategoryRule()));
            yield 69 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInProductStreamRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInProductStreamRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemInProductStreamRule()));
            yield 70 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTaxationRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTaxationRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemTaxationRule()));
            yield 71 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWidthRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWidthRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionWidthRule()));
            yield 72 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionHeightRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionHeightRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionHeightRule()));
            yield 73 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionLengthRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionLengthRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionLengthRule()));
            yield 74 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWeightRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWeightRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionWeightRule()));
            yield 75 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionVolumeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionVolumeRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionVolumeRule()));
            yield 76 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemListPriceRule()));
            yield 77 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRatioRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRatioRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemListPriceRatioRule()));
            yield 78 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCustomFieldRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCustomFieldRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemCustomFieldRule()));
            yield 79 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemStockRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemStockRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemStockRule()));
            yield 80 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemActualStockRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemActualStockRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemActualStockRule()));
            yield 81 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\PaymentMethodRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\PaymentMethodRule'] = new \Shopware\Core\Checkout\Cart\Rule\PaymentMethodRule()));
            yield 82 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\ShippingMethodRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\ShippingMethodRule'] = new \Shopware\Core\Checkout\Cart\Rule\ShippingMethodRule()));
            yield 83 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemGoodsTotalRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemGoodsTotalRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemGoodsTotalRule()));
            yield 84 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderTotalAmountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderTotalAmountRule'] = new \Shopware\Core\Checkout\Customer\Rule\OrderTotalAmountRule()));
            yield 85 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerCustomFieldRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerCustomFieldRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerCustomFieldRule()));
            yield 86 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerBirthdayRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerBirthdayRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerBirthdayRule()));
            yield 87 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemProductStatesRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemProductStatesRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemProductStatesRule()));
            yield 88 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerAgeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerAgeRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerAgeRule()));
            yield 89 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastLoginRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastLoginRule'] = new \Shopware\Core\Checkout\Customer\Rule\DaysSinceLastLoginRule()));
            yield 90 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\AffiliateCodeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\AffiliateCodeRule'] = new \Shopware\Core\Checkout\Customer\Rule\AffiliateCodeRule()));
            yield 91 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CampaignCodeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CampaignCodeRule'] = new \Shopware\Core\Checkout\Customer\Rule\CampaignCodeRule()));
        }, 92));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Script\Api\ScriptApiRoute' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Api\ScriptApiRoute
     */
    protected function getScriptApiRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Api/ScriptApiRoute.php';

        return $this->services['Shopware\\Core\\Framework\\Script\\Api\\ScriptApiRoute'] = new \Shopware\Core\Framework\Script\Api\ScriptApiRoute(($this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? $this->getScriptExecutorService()), ($this->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'] ?? $this->getScriptLoaderService()), ($this->privates['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseEncoder'] ?? $this->getScriptResponseEncoderService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Script\Api\ScriptResponseFactoryFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Api\ScriptResponseFactoryFacadeHookFactory
     */
    protected function getScriptResponseFactoryFacadeHookFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Api/ScriptResponseFactoryFacadeHookFactory.php';

        return $this->services['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseFactoryFacadeHookFactory'] = new \Shopware\Core\Framework\Script\Api\ScriptResponseFactoryFacadeHookFactory(($this->services['router'] ?? $this->getRouterService()), ($this->services['Shopware\\Storefront\\Controller\\ScriptController'] ?? $this->getScriptControllerService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Script\Api\ScriptStoreApiRoute' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Api\ScriptStoreApiRoute
     */
    protected function getScriptStoreApiRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Api/ScriptStoreApiRoute.php';

        return $this->services['Shopware\\Core\\Framework\\Script\\Api\\ScriptStoreApiRoute'] = new \Shopware\Core\Framework\Script\Api\ScriptStoreApiRoute(($this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? $this->getScriptExecutorService()), ($this->privates['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseEncoder'] ?? $this->getScriptResponseEncoderService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Script\Execution\ScriptExecutor' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Execution\ScriptExecutor
     */
    protected function getScriptExecutorService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'] ?? $this->getScriptLoaderService());

        if (isset($this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'])) {
            return $this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'];
        }
        $b = ($this->privates['twig.extension.trans'] ?? $this->getTwig_Extension_TransService());

        if (isset($this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'])) {
            return $this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'];
        }

        return $this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] = new \Shopware\Core\Framework\Script\Execution\ScriptExecutor($a, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), ($this->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'] ?? ($this->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'] = new \Shopware\Core\Framework\Script\Debugging\ScriptTraces())), $this, $b);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Script\ScriptDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Script\ScriptDefinition
     */
    protected function getScriptDefinitionService()
    {
        $this->services['Shopware\\Core\\Framework\\Script\\ScriptDefinition'] = $instance = new \Shopware\Core\Framework\Script\ScriptDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Api\ExtensionStoreActionsController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\ExtensionStoreActionsController
     */
    protected function getExtensionStoreActionsControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/ExtensionStoreActionsController.php';

        $this->services['Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreActionsController'] = $instance = new \Shopware\Core\Framework\Store\Api\ExtensionStoreActionsController(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLifecycleService'] ?? $this->getExtensionLifecycleServiceService()), ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'] ?? $this->getExtensionDownloaderService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? $this->getPluginServiceService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? $this->getPluginManagementServiceService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Api\ExtensionStoreDataController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\ExtensionStoreDataController
     */
    protected function getExtensionStoreDataControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/ExtensionStoreDataController.php';

        $this->services['Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreDataController'] = $instance = new \Shopware\Core\Framework\Store\Api\ExtensionStoreDataController(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] ?? $this->getAbstractExtensionDataProviderService()), ($this->services['user.repository'] ?? $this->getUser_RepositoryService()), ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Api\ExtensionStoreLicensesController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\ExtensionStoreLicensesController
     */
    protected function getExtensionStoreLicensesControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/ExtensionStoreLicensesController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/AbstractExtensionStoreLicensesService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionStoreLicensesService.php';

        $this->services['Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreLicensesController'] = $instance = new \Shopware\Core\Framework\Store\Api\ExtensionStoreLicensesController(new \Shopware\Core\Framework\Store\Services\ExtensionStoreLicensesService(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService())));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Api\FirstRunWizardController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\FirstRunWizardController
     */
    protected function getFirstRunWizardControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/FirstRunWizardController.php';

        $this->services['Shopware\\Core\\Framework\\Store\\Api\\FirstRunWizardController'] = $instance = new \Shopware\Core\Framework\Store\Api\FirstRunWizardController(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\FirstRunWizardClient'] ?? $this->getFirstRunWizardClientService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Api\StoreController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\StoreController
     */
    protected function getStoreControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/StoreController.php';

        $this->services['Shopware\\Core\\Framework\\Store\\Api\\StoreController'] = $instance = new \Shopware\Core\Framework\Store\Api\StoreController(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? $this->getPluginManagementServiceService()), ($this->services['user.repository'] ?? $this->getUser_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] ?? $this->getAbstractExtensionDataProviderService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Authentication\StoreRequestOptionsProvider' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Authentication\StoreRequestOptionsProvider
     */
    protected function getStoreRequestOptionsProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/AbstractStoreRequestOptionsProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/StoreRequestOptionsProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';

        $a = ($this->services['user.repository'] ?? $this->getUser_RepositoryService());

        if (isset($this->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'])) {
            return $this->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'])) {
            return $this->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'];
        }

        return $this->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'] = new \Shopware\Core\Framework\Store\Authentication\StoreRequestOptionsProvider($a, $b, ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ?? ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] = new \Shopware\Core\Framework\Store\Services\InstanceService('6.4.20.0', $this->getEnv('INSTANCE_ID')))), ($this->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'] ?? $this->getLocaleProviderService()));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Services\ShopSecretInvalidMiddleware' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ShopSecretInvalidMiddleware
     */
    protected function getShopSecretInvalidMiddlewareService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ShopSecretInvalidMiddleware.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->services['Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware'])) {
            return $this->services['Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware'];
        }

        return $this->services['Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware'] = new \Shopware\Core\Framework\Store\Services\ShopSecretInvalidMiddleware(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Services\StoreSessionExpiredMiddleware' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreSessionExpiredMiddleware
     */
    protected function getStoreSessionExpiredMiddlewareService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/StoreSessionExpiredMiddleware.php';

        return $this->services['Shopware\\Core\\Framework\\Store\\Services\\StoreSessionExpiredMiddleware'] = new \Shopware\Core\Framework\Store\Services\StoreSessionExpiredMiddleware(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Store\Services\VerifyResponseSignatureMiddleware' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\VerifyResponseSignatureMiddleware
     */
    protected function getVerifyResponseSignatureMiddlewareService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/VerifyResponseSignatureMiddleware.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/OpenSSLVerifier.php';

        return $this->services['Shopware\\Core\\Framework\\Store\\Services\\VerifyResponseSignatureMiddleware'] = new \Shopware\Core\Framework\Store\Services\VerifyResponseSignatureMiddleware(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\OpenSSLVerifier'] ?? ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\OpenSSLVerifier'] = new \Shopware\Core\Framework\Store\Services\OpenSSLVerifier([0 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/public.key')]))));
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Update\Api\UpdateController' shared service.
     *
     * @return \Shopware\Core\Framework\Update\Api\UpdateController
     */
    protected function getUpdateControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Api/UpdateController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Services/ApiClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Services/UpdateApiHttpClientFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Services/RequirementsValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Services/PluginCompatibility.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/OpenSSLVerifier.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        $this->services['Shopware\\Core\\Framework\\Update\\Api\\UpdateController'] = $instance = new \Shopware\Core\Framework\Update\Api\UpdateController(\dirname(__DIR__, 4), new \Shopware\Core\Framework\Update\Services\ApiClient('6.4.20.0', $a, ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\OpenSSLVerifier'] ?? ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\OpenSSLVerifier'] = new \Shopware\Core\Framework\Store\Services\OpenSSLVerifier([0 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/public.key')]))), (new \Shopware\Core\Framework\Update\Services\UpdateApiHttpClientFactory($a))->__invoke(), true), new \Shopware\Core\Framework\Update\Services\RequirementsValidator(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Update\\Checkers\\PhpVersionCheck'] ?? ($this->privates['Shopware\\Core\\Framework\\Update\\Checkers\\PhpVersionCheck'] = new \Shopware\Core\Framework\Update\Checkers\PhpVersionCheck()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Update\\Checkers\\LicenseCheck'] ?? $this->getLicenseCheckService());
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Update\\Checkers\\WriteableCheck'] ?? $this->getWriteableCheckService());
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\Update\\Checkers\\MysqlVersionCheck'] ?? $this->getMysqlVersionCheckService());
        }, 4)), new \Shopware\Core\Framework\Update\Services\PluginCompatibility(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] ?? $this->getAbstractExtensionDataProviderService())), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), $a, ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLifecycleService'] ?? $this->getExtensionLifecycleServiceService()), ($this->services['user.repository'] ?? $this->getUser_RepositoryService()), '6.4.20.0', $this->getEnv('bool:SHOPWARE_UPDATE_TEST'));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Util\HtmlSanitizer' shared service.
     *
     * @return \Shopware\Core\Framework\Util\HtmlSanitizer
     */
    protected function getHtmlSanitizerService()
    {
        return $this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] = new \Shopware\Core\Framework\Util\HtmlSanitizer($this->targetDir.'', true, $this->parameters['shopware.html_sanitizer.sets'], $this->parameters['shopware.html_sanitizer.fields']);
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition
     */
    protected function getWebhookEventLogDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/EventLog/WebhookEventLogDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition'] = $instance = new \Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Framework\Webhook\WebhookDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\WebhookDefinition
     */
    protected function getWebhookDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/WebhookDefinition.php';

        $this->services['Shopware\\Core\\Framework\\Webhook\\WebhookDefinition'] = $instance = new \Shopware\Core\Framework\Webhook\WebhookDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\Maintenance\SalesChannel\Service\SalesChannelCreator' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Service\SalesChannelCreator
     */
    protected function getSalesChannelCreatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Service/SalesChannelCreator.php';

        return $this->services['Shopware\\Core\\Maintenance\\SalesChannel\\Service\\SalesChannelCreator'] = new \Shopware\Core\Maintenance\SalesChannel\Service\SalesChannelCreator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()), ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService()), ($this->services['shipping_method.repository'] ?? $this->getShippingMethod_RepositoryService()), ($this->services['country.repository'] ?? $this->getCountry_RepositoryService()), ($this->services['category.repository'] ?? $this->getCategory_RepositoryService()));
    }

    /*
     * Gets the public 'Shopware\Core\Maintenance\User\Service\UserProvisioner' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\User\Service\UserProvisioner
     */
    protected function getUserProvisionerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/User/Service/UserProvisioner.php';

        return $this->services['Shopware\\Core\\Maintenance\\User\\Service\\UserProvisioner'] = new \Shopware\Core\Maintenance\User\Service\UserProvisioner(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition
     */
    protected function getCountryStateTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryStateTranslation/CountryStateTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Country\Aggregate\CountryState\CountryStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryState\CountryStateDefinition
     */
    protected function getCountryStateDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryState\CountryStateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Country\Aggregate\CountryState\SalesChannel\SalesChannelCountryStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryState\SalesChannel\SalesChannelCountryStateDefinition
     */
    protected function getSalesChannelCountryStateDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryState/SalesChannel/SalesChannelCountryStateDefinition.php';

        $this->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryState\SalesChannel\SalesChannelCountryStateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition
     */
    protected function getCountryTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryTranslation/CountryTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Country\CountryDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\CountryDefinition
     */
    protected function getCountryDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Country\\CountryDefinition'] = $instance = new \Shopware\Core\System\Country\CountryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Country\SalesChannel\CachedCountryRoute' shared service.
     *
     * @return \Shopware\Core\System\Country\SalesChannel\CachedCountryRoute
     */
    protected function getCachedCountryRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/AbstractCountryRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/CachedCountryRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/CountryRoute.php';

        return $this->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] = new \Shopware\Core\System\Country\SalesChannel\CachedCountryRoute(new \Shopware\Core\System\Country\SalesChannel\CountryRoute(($this->services['sales_channel.country.repository'] ?? $this->getSalesChannel_Country_RepositoryService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), []);
    }

    /*
     * Gets the public 'Shopware\Core\System\Country\SalesChannel\CachedCountryStateRoute' shared service.
     *
     * @return \Shopware\Core\System\Country\SalesChannel\CachedCountryStateRoute
     */
    protected function getCachedCountryStateRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/AbstractCountryStateRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/CachedCountryStateRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/CountryStateRoute.php';

        return $this->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryStateRoute'] = new \Shopware\Core\System\Country\SalesChannel\CachedCountryStateRoute(new \Shopware\Core\System\Country\SalesChannel\CountryStateRoute(($this->services['country_state.repository'] ?? $this->getCountryState_RepositoryService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), []);
    }

    /*
     * Gets the public 'Shopware\Core\System\Country\SalesChannel\SalesChannelCountryDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\SalesChannel\SalesChannelCountryDefinition
     */
    protected function getSalesChannelCountryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/SalesChannelCountryDefinition.php';

        $this->services['Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition'] = $instance = new \Shopware\Core\System\Country\SalesChannel\SalesChannelCountryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition
     */
    protected function getCurrencyCountryRoundingDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition'] = $instance = new \Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition
     */
    protected function getCurrencyTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/Aggregate/CurrencyTranslation/CurrencyTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition'] = $instance = new \Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Currency\CurrencyDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\CurrencyDefinition
     */
    protected function getCurrencyDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Currency\\CurrencyDefinition'] = $instance = new \Shopware\Core\System\Currency\CurrencyDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Currency\CurrencyFormatter' shared service.
     *
     * @return \Shopware\Core\System\Currency\CurrencyFormatter
     */
    protected function getCurrencyFormatterService()
    {
        return $this->services['Shopware\\Core\\System\\Currency\\CurrencyFormatter'] = new \Shopware\Core\System\Currency\CurrencyFormatter(($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService()));
    }

    /*
     * Gets the public 'Shopware\Core\System\Currency\SalesChannel\CachedCurrencyRoute' shared service.
     *
     * @return \Shopware\Core\System\Currency\SalesChannel\CachedCurrencyRoute
     */
    protected function getCachedCurrencyRouteService()
    {
        $a = ($this->services['sales_channel.currency.repository'] ?? $this->getSalesChannel_Currency_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'])) {
            return $this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'])) {
            return $this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'])) {
            return $this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'];
        }

        return $this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'] = new \Shopware\Core\System\Currency\SalesChannel\CachedCurrencyRoute(new \Shopware\Core\System\Currency\SalesChannel\CurrencyRoute($a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $b, $c, []);
    }

    /*
     * Gets the public 'Shopware\Core\System\Currency\SalesChannel\SalesChannelCurrencyDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\SalesChannel\SalesChannelCurrencyDefinition
     */
    protected function getSalesChannelCurrencyDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition'] = $instance = new \Shopware\Core\System\Currency\SalesChannel\SalesChannelCurrencyDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\CustomEntity\Api\CustomEntityApiController' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\Api\CustomEntityApiController
     */
    protected function getCustomEntityApiControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/ApiController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Api/CustomEntityApiController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityProtection/EntityProtectionValidator.php';

        $this->services['Shopware\\Core\\System\\CustomEntity\\Api\\CustomEntityApiController'] = $instance = new \Shopware\Core\System\CustomEntity\Api\CustomEntityApiController(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CompositeEntitySearcher'] ?? $this->getCompositeEntitySearcherService()), ($this->privates['Shopware\\Core\\Framework\\Api\\Converter\\ApiVersionConverter'] ?? $this->getApiVersionConverterService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityProtection\EntityProtectionValidator())), ($this->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] ?? $this->getAclCriteriaValidatorService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\CustomEntity\CustomEntityDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\CustomEntityDefinition
     */
    protected function getCustomEntityDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/CustomEntityDefinition.php';

        $this->services['Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition'] = $instance = new \Shopware\Core\System\CustomEntity\CustomEntityDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\CustomEntity\CustomEntityRegistrar' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\CustomEntityRegistrar
     */
    protected function getCustomEntityRegistrarService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/CustomEntityRegistrar.php';

        return $this->services['Shopware\\Core\\System\\CustomEntity\\CustomEntityRegistrar'] = new \Shopware\Core\System\CustomEntity\CustomEntityRegistrar($this);
    }

    /*
     * Gets the public 'Shopware\Core\System\CustomEntity\Schema\CustomEntitySchemaUpdater' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\Schema\CustomEntitySchemaUpdater
     */
    protected function getCustomEntitySchemaUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Schema/CustomEntitySchemaUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Schema/SchemaUpdater.php';

        return $this->services['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntitySchemaUpdater'] = new \Shopware\Core\System\CustomEntity\Schema\CustomEntitySchemaUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['lock.default.factory'] ?? $this->getLock_Default_FactoryService()), new \Shopware\Core\System\CustomEntity\Schema\SchemaUpdater());
    }

    /*
     * Gets the public 'Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition
     */
    protected function getCustomFieldSetRelationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Aggregate/CustomFieldSetRelation/CustomFieldSetRelationDefinition.php';

        $this->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition'] = $instance = new \Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition
     */
    protected function getCustomFieldSetDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Aggregate/CustomFieldSet/CustomFieldSetDefinition.php';

        $this->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition'] = $instance = new \Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\CustomField\Api\CustomFieldSetActionController' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Api\CustomFieldSetActionController
     */
    protected function getCustomFieldSetActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Api/CustomFieldSetActionController.php';

        $this->services['Shopware\\Core\\System\\CustomField\\Api\\CustomFieldSetActionController'] = $instance = new \Shopware\Core\System\CustomField\Api\CustomFieldSetActionController(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\CustomField\CustomFieldDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\CustomFieldDefinition
     */
    protected function getCustomFieldDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/CustomFieldDefinition.php';

        $this->services['Shopware\\Core\\System\\CustomField\\CustomFieldDefinition'] = $instance = new \Shopware\Core\System\CustomField\CustomFieldDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition
     */
    protected function getDeliveryTimeTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/DeliveryTime/Aggregate/DeliveryTimeTranslation/DeliveryTimeTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition'] = $instance = new \Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition' shared service.
     *
     * @return \Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition
     */
    protected function getDeliveryTimeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/DeliveryTime/DeliveryTimeDefinition.php';

        $this->services['Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition'] = $instance = new \Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition
     */
    protected function getIntegrationRoleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Integration/Aggregate/IntegrationRole/IntegrationRoleDefinition.php';

        $this->services['Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition'] = $instance = new \Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Integration\IntegrationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Integration\IntegrationDefinition
     */
    protected function getIntegrationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Integration/IntegrationDefinition.php';

        $this->services['Shopware\\Core\\System\\Integration\\IntegrationDefinition'] = $instance = new \Shopware\Core\System\Integration\IntegrationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Language\LanguageDefinition' shared service.
     *
     * @return \Shopware\Core\System\Language\LanguageDefinition
     */
    protected function getLanguageDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Language\\LanguageDefinition'] = $instance = new \Shopware\Core\System\Language\LanguageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Language\SalesChannel\CachedLanguageRoute' shared service.
     *
     * @return \Shopware\Core\System\Language\SalesChannel\CachedLanguageRoute
     */
    protected function getCachedLanguageRouteService()
    {
        $a = ($this->services['sales_channel.language.repository'] ?? $this->getSalesChannel_Language_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'])) {
            return $this->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'])) {
            return $this->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'];
        }

        return $this->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'] = new \Shopware\Core\System\Language\SalesChannel\CachedLanguageRoute(new \Shopware\Core\System\Language\SalesChannel\LanguageRoute($a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), $b, []);
    }

    /*
     * Gets the public 'Shopware\Core\System\Language\SalesChannel\SalesChannelLanguageDefinition' shared service.
     *
     * @return \Shopware\Core\System\Language\SalesChannel\SalesChannelLanguageDefinition
     */
    protected function getSalesChannelLanguageDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition'] = $instance = new \Shopware\Core\System\Language\SalesChannel\SalesChannelLanguageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition
     */
    protected function getLocaleTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/Aggregate/LocaleTranslation/LocaleTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition'] = $instance = new \Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Locale\LocaleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Locale\LocaleDefinition
     */
    protected function getLocaleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/LocaleDefinition.php';

        $this->services['Shopware\\Core\\System\\Locale\\LocaleDefinition'] = $instance = new \Shopware\Core\System\Locale\LocaleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition
     */
    protected function getNumberRangeSalesChannelDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeSalesChannel/NumberRangeSalesChannelDefinition.php';

        $this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition
     */
    protected function getNumberRangeStateDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeState/NumberRangeStateDefinition.php';

        $this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition
     */
    protected function getNumberRangeTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeTranslation/NumberRangeTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition
     */
    protected function getNumberRangeTypeTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeTypeTranslation/NumberRangeTypeTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition
     */
    protected function getNumberRangeTypeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeType/NumberRangeTypeDefinition.php';

        $this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\NumberRange\Api\NumberRangeController' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Api\NumberRangeController
     */
    protected function getNumberRangeControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Api/NumberRangeController.php';

        $this->services['Shopware\\Core\\System\\NumberRange\\Api\\NumberRangeController'] = $instance = new \Shopware\Core\System\NumberRange\Api\NumberRangeController(($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\NumberRange\NumberRangeDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\NumberRangeDefinition
     */
    protected function getNumberRangeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/NumberRangeDefinition.php';

        $this->services['Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition'] = $instance = new \Shopware\Core\System\NumberRange\NumberRangeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\NumberRange\ValueGenerator\NumberRangeValueGeneratorInterface' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\ValueGenerator\NumberRangeValueGenerator
     */
    protected function getNumberRangeValueGeneratorInterfaceService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'])) {
            return $this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'];
        }

        return $this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] = new \Shopware\Core\System\NumberRange\ValueGenerator\NumberRangeValueGenerator(new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\ValueGeneratorPatternIncrement'] ?? $this->getValueGeneratorPatternIncrementService());
            yield 1 => ($this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\ValueGeneratorPatternDate'] ?? ($this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\ValueGeneratorPatternDate'] = new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternDate()));
        }, 2)), $a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition
     */
    protected function getSalesChannelAnalyticsDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelAnalytics/SalesChannelAnalyticsDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition
     */
    protected function getSalesChannelCountryDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelCountry/SalesChannelCountryDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition
     */
    protected function getSalesChannelCurrencyDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelCurrency/SalesChannelCurrencyDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition
     */
    protected function getSalesChannelDomainDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition
     */
    protected function getSalesChannelLanguageDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelLanguage/SalesChannelLanguageDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition
     */
    protected function getSalesChannelPaymentMethodDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelPaymentMethod/SalesChannelPaymentMethodDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition
     */
    protected function getSalesChannelShippingMethodDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelShippingMethod/SalesChannelShippingMethodDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition
     */
    protected function getSalesChannelTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelTranslation/SalesChannelTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition
     */
    protected function getSalesChannelTypeTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelTypeTranslation/SalesChannelTypeTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition
     */
    protected function getSalesChannelTypeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelType/SalesChannelTypeDefinition.php';

        $this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Context\SalesChannelContextFactory' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\CachedSalesChannelContextFactory
     */
    protected function getSalesChannelContextFactoryService()
    {
        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $b = ($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $c = ($this->services['customer_address.repository'] ?? $this->getCustomerAddress_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $d = ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $e = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $f = ($this->services['currency_country_rounding.repository'] ?? $this->getCurrencyCountryRounding_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $g = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $h = ($this->services['currency.repository'] ?? $this->getCurrency_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $i = ($this->services['country.repository'] ?? $this->getCountry_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $j = ($this->services['tax.repository'] ?? $this->getTax_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $k = ($this->services['shipping_method.repository'] ?? $this->getShippingMethod_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $l = ($this->services['country_state.repository'] ?? $this->getCountryState_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $m = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $n = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService());

        return $this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] = new \Shopware\Core\System\SalesChannel\Context\CachedSalesChannelContextFactory(new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextFactory($a, $b, $c, $d, ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxDetector'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxDetector'] = new \Shopware\Core\Checkout\Cart\Tax\TaxDetector())), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\EntireCountryRuleTypeFilter'] ?? ($this->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\EntireCountryRuleTypeFilter'] = new \Shopware\Core\System\Tax\TaxRuleType\EntireCountryRuleTypeFilter()));
            yield 1 => ($this->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\IndividualStatesRuleTypeFilter'] ?? ($this->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\IndividualStatesRuleTypeFilter'] = new \Shopware\Core\System\Tax\TaxRuleType\IndividualStatesRuleTypeFilter()));
            yield 2 => ($this->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\ZipCodeRangeRuleTypeFilter'] ?? ($this->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\ZipCodeRangeRuleTypeFilter'] = new \Shopware\Core\System\Tax\TaxRuleType\ZipCodeRangeRuleTypeFilter()));
            yield 3 => ($this->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\ZipCodeRuleTypeFilter'] ?? ($this->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\ZipCodeRuleTypeFilter'] = new \Shopware\Core\System\Tax\TaxRuleType\ZipCodeRuleTypeFilter()));
        }, 4), $e, $f, new \Shopware\Core\System\SalesChannel\Context\CachedBaseContextFactory(new \Shopware\Core\System\SalesChannel\Context\BaseContextFactory($g, $h, $b, $i, $j, $d, $k, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $l, $f), $n, $m)), $n, $m);
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\Entity\SalesChannelDefinitionInstanceRegistry' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelDefinitionInstanceRegistry
     */
    protected function getSalesChannelDefinitionInstanceRegistryService()
    {
        return $this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelDefinitionInstanceRegistry('sales_channel_definition.', $this, ['log_entry' => 'Shopware\\Core\\Framework\\Log\\LogEntryDefinition', 'acl_role' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition', 'acl_user_role' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition', 'user_role_acl' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition', 'app' => 'Shopware\\Core\\Framework\\App\\AppDefinition', 'app_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition', 'app_action_button' => 'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition', 'app_action_button_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition', 'app_template' => 'Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition', 'app_payment_method' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition', 'app_script_condition' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition', 'app_script_condition_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition', 'app_cms_block' => 'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition', 'app_cms_block_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition', 'app_flow_action' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition', 'app_flow_action_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition', 'custom_field' => 'Shopware\\Core\\System\\CustomField\\CustomFieldDefinition', 'custom_field_set' => 'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition', 'custom_field_set_relation' => 'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition', 'version' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition', 'version_commit' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition', 'version_commit_data' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition', 'event_action' => 'Shopware\\Core\\Framework\\Event\\EventAction\\EventActionDefinition', 'event_action_rule' => 'Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionRule\\EventActionRuleDefinition', 'event_action_sales_channel' => 'Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionSalesChannel\\EventActionSalesChannelDefinition', 'dead_message' => 'Shopware\\Core\\Framework\\MessageQueue\\DeadMessage\\DeadMessageDefinition', 'message_queue_stats' => 'Shopware\\Core\\Framework\\MessageQueue\\MessageQueueStatsDefinition', 'plugin' => 'Shopware\\Core\\Framework\\Plugin\\PluginDefinition', 'plugin_translation' => 'Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition', 'scheduled_task' => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition', 'script' => 'Shopware\\Core\\Framework\\Script\\ScriptDefinition', 'language' => 'Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition', 'seo_url' => 'Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition', 'seo_url_template' => 'Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition', 'main_category' => 'Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition', 'webhook' => 'Shopware\\Core\\Framework\\Webhook\\WebhookDefinition', 'webhook_event_log' => 'Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition', 'sales_channel' => 'Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition', 'sales_channel_translation' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition', 'sales_channel_country' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition', 'sales_channel_currency' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition', 'sales_channel_domain' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition', 'sales_channel_language' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition', 'sales_channel_payment_method' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition', 'sales_channel_shipping_method' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition', 'sales_channel_type' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition', 'sales_channel_type_translation' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition', 'sales_channel_analytics' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition', 'country' => 'Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition', 'country_state' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition', 'country_state_translation' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition', 'country_translation' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition', 'currency' => 'Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition', 'currency_country_rounding' => 'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition', 'currency_translation' => 'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition', 'custom_entity' => 'Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition', 'locale' => 'Shopware\\Core\\System\\Locale\\LocaleDefinition', 'locale_translation' => 'Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition', 'snippet_set' => 'Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition', 'snippet' => 'Shopware\\Core\\System\\Snippet\\SnippetDefinition', 'salutation' => 'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition', 'salutation_translation' => 'Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition', 'tax' => 'Shopware\\Core\\System\\Tax\\TaxDefinition', 'tax_rule' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition', 'tax_rule_type' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition', 'tax_rule_type_translation' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition', 'unit' => 'Shopware\\Core\\System\\Unit\\UnitDefinition', 'unit_translation' => 'Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition', 'user' => 'Shopware\\Core\\System\\User\\UserDefinition', 'user_config' => 'Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition', 'user_access_key' => 'Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition', 'user_recovery' => 'Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition', 'integration' => 'Shopware\\Core\\System\\Integration\\IntegrationDefinition', 'integration_role' => 'Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition', 'state_machine' => 'Shopware\\Core\\System\\StateMachine\\StateMachineDefinition', 'state_machine_translation' => 'Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition', 'state_machine_state' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition', 'state_machine_state_translation' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition', 'state_machine_transition' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition', 'state_machine_history' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition', 'system_config' => 'Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition', 'number_range' => 'Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition', 'number_range_sales_channel' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition', 'number_range_state' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition', 'number_range_type' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition', 'number_range_type_translation' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition', 'number_range_translation' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition', 'tag' => 'Shopware\\Core\\System\\Tag\\TagDefinition', 'category' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition', 'category_translation' => 'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition', 'category_tag' => 'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition', 'media' => 'Shopware\\Core\\Content\\Media\\MediaDefinition', 'media_default_folder' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition', 'media_thumbnail' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition', 'media_translation' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition', 'media_folder' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition', 'media_thumbnail_size' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition', 'media_folder_configuration' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition', 'media_folder_configuration_media_thumbnail_size' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition', 'media_tag' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition', 'product' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition', 'product_stream_mapping' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition', 'product_category' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition', 'product_custom_field_set' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition', 'product_tag' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition', 'product_configurator_setting' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition', 'product_price' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition', 'product_property' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition', 'product_search_keyword' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition', 'product_keyword_dictionary' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition', 'product_review' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition', 'product_manufacturer' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition', 'product_manufacturer_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition', 'product_media' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition', 'product_download' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition', 'product_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition', 'product_option' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition', 'product_category_tree' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition', 'product_cross_selling' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition', 'product_cross_selling_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition', 'product_cross_selling_assigned_products' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition', 'product_feature_set' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition', 'product_feature_set_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition', 'product_sorting' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition', 'product_sorting_translation' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition', 'product_search_config' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition', 'product_search_config_field' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition', 'product_visibility' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition', 'delivery_time' => 'Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition', 'newsletter_recipient' => 'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition', 'newsletter_recipient_tag' => 'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition', 'rule' => 'Shopware\\Core\\Content\\Rule\\RuleDefinition', 'rule_condition' => 'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition', 'rule_tag' => 'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition', 'product_stream' => 'Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition', 'product_stream_translation' => 'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition', 'product_stream_filter' => 'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition', 'product_export' => 'Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition', 'property_group' => 'Shopware\\Core\\Content\\Property\\PropertyGroupDefinition', 'property_group_option' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition', 'property_group_option_translation' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition', 'property_group_translation' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition', 'cms_page' => 'Shopware\\Core\\Content\\Cms\\CmsPageDefinition', 'cms_page_translation' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition', 'cms_section' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition', 'cms_block' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition', 'cms_slot' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition', 'cms_slot_translation' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition', 'mail_template' => 'Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition', 'mail_template_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition', 'mail_template_type' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition', 'mail_template_type_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition', 'mail_template_media' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition', 'mail_header_footer' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition', 'mail_header_footer_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition', 'delivery_time_translation' => 'Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition', 'import_export_profile' => 'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition', 'import_export_log' => 'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition', 'import_export_file' => 'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition', 'import_export_profile_translation' => 'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition', 'landing_page' => 'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition', 'landing_page_translation' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition', 'landing_page_tag' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition', 'landing_page_sales_channel' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition', 'flow' => 'Shopware\\Core\\Content\\Flow\\FlowDefinition', 'flow_sequence' => 'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition', 'flow_template' => 'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition', 'customer' => 'Shopware\\Core\\Checkout\\Customer\\CustomerDefinition', 'customer_group_translation' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition', 'customer_address' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition', 'customer_recovery' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition', 'customer_group' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition', 'customer_group_registration_sales_channels' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition', 'customer_tag' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition', 'customer_wishlist' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition', 'customer_wishlist_product' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition', 'document' => 'Shopware\\Core\\Checkout\\Document\\DocumentDefinition', 'document_type' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition', 'document_type_translation' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition', 'document_base_config' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition', 'document_base_config_sales_channel' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition', 'order' => 'Shopware\\Core\\Checkout\\Order\\OrderDefinition', 'order_address' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition', 'order_customer' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition', 'order_delivery' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition', 'order_delivery_position' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition', 'order_line_item' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition', 'order_line_item_download' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition', 'order_tag' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition', 'order_transaction' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition', 'order_transaction_capture' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition', 'order_transaction_capture_refund' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition', 'order_transaction_capture_refund_position' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition', 'payment_method' => 'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition', 'payment_method_translation' => 'Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition', 'promotion' => 'Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition', 'promotion_sales_channel' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition', 'promotion_individual_code' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition', 'promotion_discount' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition', 'promotion_discount_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition', 'promotion_setgroup' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition', 'promotion_setgroup_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition', 'promotion_order_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition', 'promotion_persona_customer' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition', 'promotion_persona_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition', 'promotion_cart_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition', 'promotion_translation' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition', 'promotion_discount_prices' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition', 'shipping_method' => 'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition', 'shipping_method_tag' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition', 'shipping_method_price' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition', 'shipping_method_translation' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition', 'app_administration_snippet' => 'Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition', 'notification' => 'Shopware\\Administration\\Notification\\NotificationDefinition', 'theme' => 'Shopware\\Storefront\\Theme\\ThemeDefinition', 'theme_translation' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition', 'theme_sales_channel' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition', 'theme_media' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition', 'theme_child' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'], ['language' => 'sales_channel.language.repository', 'seo_url' => 'sales_channel.seo_url.repository', 'main_category' => 'sales_channel.main_category.repository', 'country' => 'sales_channel.country.repository', 'country_state' => 'sales_channel.country_state.repository', 'currency' => 'sales_channel.currency.repository', 'salutation' => 'sales_channel.salutation.repository', 'category' => 'sales_channel.category.repository', 'product' => 'sales_channel.product.repository', 'newsletter_recipient' => 'sales_channel.newsletter_recipient.repository', 'landing_page' => 'sales_channel.landing_page.repository', 'payment_method' => 'sales_channel.payment_method.repository', 'shipping_method' => 'sales_channel.shipping_method.repository']);
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\SalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannelDefinition
     */
    protected function getSalesChannelDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\SalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\SalesChannel\ContextSwitchRoute' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannel\ContextSwitchRoute
     */
    protected function getContextSwitchRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannel/AbstractContextSwitchRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannel/ContextSwitchRoute.php';

        return $this->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute'] = new \Shopware\Core\System\SalesChannel\SalesChannel\ContextSwitchRoute(($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Core\System\SalesChannel\SalesChannel\StoreApiInfoController' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannel\StoreApiInfoController
     */
    protected function getStoreApiInfoControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannel/StoreApiInfoController.php';

        return $this->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\StoreApiInfoController'] = new \Shopware\Core\System\SalesChannel\SalesChannel\StoreApiInfoController(($this->privates['Shopware\\Core\\Framework\\Api\\ApiDefinition\\DefinitionService'] ?? $this->getDefinitionServiceService()), ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()), $this->parameters['shopware.security.csp_templates']);
    }

    /*
     * Gets the public 'Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition
     */
    protected function getSalutationTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/Aggregate/SalutationTranslation/SalutationTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition'] = $instance = new \Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Salutation\SalesChannel\CachedSalutationRoute' shared service.
     *
     * @return \Shopware\Core\System\Salutation\SalesChannel\CachedSalutationRoute
     */
    protected function getCachedSalutationRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalesChannel/AbstractSalutationRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalesChannel/CachedSalutationRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalesChannel/SalutationRoute.php';

        $a = ($this->services['sales_channel.salutation.repository'] ?? $this->getSalesChannel_Salutation_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'])) {
            return $this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'])) {
            return $this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'])) {
            return $this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'];
        }

        return $this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] = new \Shopware\Core\System\Salutation\SalesChannel\CachedSalutationRoute(new \Shopware\Core\System\Salutation\SalesChannel\SalutationRoute($a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $b, $c, []);
    }

    /*
     * Gets the public 'Shopware\Core\System\Salutation\SalesChannel\SalesChannelSalutationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Salutation\SalesChannel\SalesChannelSalutationDefinition
     */
    protected function getSalesChannelSalutationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalutationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalesChannel/SalesChannelSalutationDefinition.php';

        $this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition'] = $instance = new \Shopware\Core\System\Salutation\SalesChannel\SalesChannelSalutationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Salutation\SalutationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Salutation\SalutationDefinition
     */
    protected function getSalutationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalutationDefinition.php';

        $this->services['Shopware\\Core\\System\\Salutation\\SalutationDefinition'] = $instance = new \Shopware\Core\System\Salutation\SalutationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition
     */
    protected function getSnippetSetDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition'] = $instance = new \Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Snippet\Api\SnippetController' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Api\SnippetController
     */
    protected function getSnippetControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Api/SnippetController.php';

        $this->services['Shopware\\Core\\System\\Snippet\\Api\\SnippetController'] = $instance = new \Shopware\Core\System\Snippet\Api\SnippetController(($this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'] ?? $this->getSnippetServiceService()), ($this->services['Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection'] ?? $this->getSnippetFileCollectionService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Snippet\Files\SnippetFileCollection' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Files\SnippetFileCollection
     */
    protected function getSnippetFileCollectionService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->services['Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection'] = $this->createProxy('SnippetFileCollection_08f09cc', function () {
                return \SnippetFileCollection_08f09cc::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getSnippetFileCollectionService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Files/SnippetFileCollectionFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Files/SnippetFileLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Files/SnippetFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Files/AppSnippetFileLoader.php';

        return (new \Shopware\Core\System\Snippet\Files\SnippetFileCollectionFactory(new \Shopware\Core\System\Snippet\Files\SnippetFileLoader(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), new \Shopware\Core\System\Snippet\Files\AppSnippetFileLoader(\dirname(__DIR__, 4)), ($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? $this->getActiveAppsLoaderService()))))->createSnippetFileCollection();
    }

    /*
     * Gets the public 'Shopware\Core\System\Snippet\Filter\SnippetFilterFactory' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Filter\SnippetFilterFactory
     */
    protected function getSnippetFilterFactoryService()
    {
        return $this->services['Shopware\\Core\\System\\Snippet\\Filter\\SnippetFilterFactory'] = new \Shopware\Core\System\Snippet\Filter\SnippetFilterFactory(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\AuthorFilter'] ?? ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\AuthorFilter'] = new \Shopware\Core\System\Snippet\Filter\AuthorFilter()));
            yield 1 => ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\AddedFilter'] ?? ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\AddedFilter'] = new \Shopware\Core\System\Snippet\Filter\AddedFilter()));
            yield 2 => ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\EditedFilter'] ?? ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\EditedFilter'] = new \Shopware\Core\System\Snippet\Filter\EditedFilter()));
            yield 3 => ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\EmptySnippetFilter'] ?? ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\EmptySnippetFilter'] = new \Shopware\Core\System\Snippet\Filter\EmptySnippetFilter()));
            yield 4 => ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\NamespaceFilter'] ?? ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\NamespaceFilter'] = new \Shopware\Core\System\Snippet\Filter\NamespaceFilter()));
            yield 5 => ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\TermFilter'] ?? ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\TermFilter'] = new \Shopware\Core\System\Snippet\Filter\TermFilter()));
            yield 6 => ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\TranslationKeyFilter'] ?? ($this->privates['Shopware\\Core\\System\\Snippet\\Filter\\TranslationKeyFilter'] = new \Shopware\Core\System\Snippet\Filter\TranslationKeyFilter()));
        }, 7));
    }

    /*
     * Gets the public 'Shopware\Core\System\Snippet\SnippetDefinition' shared service.
     *
     * @return \Shopware\Core\System\Snippet\SnippetDefinition
     */
    protected function getSnippetDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Snippet\\SnippetDefinition'] = $instance = new \Shopware\Core\System\Snippet\SnippetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition
     */
    protected function getStateMachineHistoryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineHistory/StateMachineHistoryDefinition.php';

        $this->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition
     */
    protected function getStateMachineStateDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineState/StateMachineStateDefinition.php';

        $this->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition
     */
    protected function getStateMachineStateTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineState/StateMachineStateTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition
     */
    protected function getStateMachineTransitionDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineTransition/StateMachineTransitionDefinition.php';

        $this->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\StateMachine\Api\StateMachineActionController' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Api\StateMachineActionController
     */
    protected function getStateMachineActionControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Api/StateMachineActionController.php';

        $this->services['Shopware\\Core\\System\\StateMachine\\Api\\StateMachineActionController'] = $instance = new \Shopware\Core\System\StateMachine\Api\StateMachineActionController(($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? $this->getStateMachineRegistryService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\StateMachine\StateMachineDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineDefinition
     */
    protected function getStateMachineDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineDefinition.php';

        $this->services['Shopware\\Core\\System\\StateMachine\\StateMachineDefinition'] = $instance = new \Shopware\Core\System\StateMachine\StateMachineDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\StateMachine\StateMachineTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineTranslationDefinition
     */
    protected function getStateMachineTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition'] = $instance = new \Shopware\Core\System\StateMachine\StateMachineTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SystemConfig\Api\SystemConfigController' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Api\SystemConfigController
     */
    protected function getSystemConfigControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Api/SystemConfigController.php';

        $this->services['Shopware\\Core\\System\\SystemConfig\\Api\\SystemConfigController'] = $instance = new \Shopware\Core\System\SystemConfig\Api\SystemConfigController(($this->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'] ?? $this->getConfigurationServiceService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SystemConfig\Facade\SystemConfigFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Facade\SystemConfigFacadeHookFactory
     */
    protected function getSystemConfigFacadeHookFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Facade/SystemConfigFacadeHookFactory.php';

        return $this->services['Shopware\\Core\\System\\SystemConfig\\Facade\\SystemConfigFacadeHookFactory'] = new \Shopware\Core\System\SystemConfig\Facade\SystemConfigFacadeHookFactory(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Core\System\SystemConfig\SystemConfigDefinition' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\SystemConfigDefinition
     */
    protected function getSystemConfigDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition'] = $instance = new \Shopware\Core\System\SystemConfig\SystemConfigDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\SystemConfig\SystemConfigService' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\SystemConfigService
     */
    protected function getSystemConfigServiceService()
    {
        $a = ($this->services['system_config.repository'] ?? $this->getSystemConfig_RepositoryService());

        if (isset($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'])) {
            return $this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'])) {
            return $this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'];
        }
        $c = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        return $this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] = new \Shopware\Core\System\SystemConfig\SystemConfigService($c, $a, ($this->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] ?? ($this->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] = new \Shopware\Core\System\SystemConfig\Util\ConfigReader())), new \Shopware\Core\System\SystemConfig\MemoizedSystemConfigLoader(new \Shopware\Core\System\SystemConfig\CachedSystemConfigLoader(new \Shopware\Core\System\SystemConfig\SystemConfigLoader($c, ($this->services['kernel'] ?? $this->get('kernel', 1))), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService())), ($this->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'] ?? ($this->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'] = new \Shopware\Core\System\SystemConfig\Store\MemoizedSystemConfigStore()))), $b);
    }

    /*
     * Gets the public 'Shopware\Core\System\Tag\Service\FilterTagIdsService' shared service.
     *
     * @return \Shopware\Core\System\Tag\Service\FilterTagIdsService
     */
    protected function getFilterTagIdsServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tag/Service/FilterTagIdsService.php';

        return $this->services['Shopware\\Core\\System\\Tag\\Service\\FilterTagIdsService'] = new \Shopware\Core\System\Tag\Service\FilterTagIdsService(($this->services['Shopware\\Core\\System\\Tag\\TagDefinition'] ?? $this->getTagDefinitionService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] ?? $this->getCriteriaQueryBuilderService()));
    }

    /*
     * Gets the public 'Shopware\Core\System\Tag\TagDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tag\TagDefinition
     */
    protected function getTagDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tag/TagDefinition.php';

        $this->services['Shopware\\Core\\System\\Tag\\TagDefinition'] = $instance = new \Shopware\Core\System\Tag\TagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition
     */
    protected function getTaxRuleTypeTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRuleTypeTranslation/TaxRuleTypeTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition
     */
    protected function getTaxRuleTypeDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRuleType/TaxRuleTypeDefinition.php';

        $this->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition
     */
    protected function getTaxRuleDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRule/TaxRuleDefinition.php';

        $this->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Tax\TaxDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\TaxDefinition
     */
    protected function getTaxDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\Tax\\TaxDefinition'] = $instance = new \Shopware\Core\System\Tax\TaxDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition
     */
    protected function getUnitTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Unit/Aggregate/UnitTranslation/UnitTranslationDefinition.php';

        $this->services['Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition'] = $instance = new \Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\Unit\UnitDefinition' shared service.
     *
     * @return \Shopware\Core\System\Unit\UnitDefinition
     */
    protected function getUnitDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Unit/UnitDefinition.php';

        $this->services['Shopware\\Core\\System\\Unit\\UnitDefinition'] = $instance = new \Shopware\Core\System\Unit\UnitDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition
     */
    protected function getUserAccessKeyDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserAccessKey/UserAccessKeyDefinition.php';

        $this->services['Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition
     */
    protected function getUserConfigDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserConfig/UserConfigDefinition.php';

        $this->services['Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition
     */
    protected function getUserRecoveryDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserRecovery/UserRecoveryDefinition.php';

        $this->services['Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\User\Api\UserRecoveryController' shared service.
     *
     * @return \Shopware\Core\System\User\Api\UserRecoveryController
     */
    protected function getUserRecoveryControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Api/UserRecoveryController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Recovery/UserRecoveryService.php';

        $this->services['Shopware\\Core\\System\\User\\Api\\UserRecoveryController'] = $instance = new \Shopware\Core\System\User\Api\UserRecoveryController(new \Shopware\Core\System\User\Recovery\UserRecoveryService(($this->services['user_recovery.repository'] ?? $this->getUserRecovery_RepositoryService()), ($this->services['user.repository'] ?? $this->getUser_RepositoryService()), ($this->services['router'] ?? $this->getRouterService()), ($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventDispatcher'] ?? $this->getBusinessEventDispatcherService()), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService())), ($this->privates['shopware.rate_limiter'] ?? $this->getShopware_RateLimiterService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\User\Api\UserValidationController' shared service.
     *
     * @return \Shopware\Core\System\User\Api\UserValidationController
     */
    protected function getUserValidationControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Api/UserValidationController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Service/UserValidationService.php';

        $this->services['Shopware\\Core\\System\\User\\Api\\UserValidationController'] = $instance = new \Shopware\Core\System\User\Api\UserValidationController(new \Shopware\Core\System\User\Service\UserValidationService(($this->services['user.repository'] ?? $this->getUser_RepositoryService())));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Core\System\User\UserDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\UserDefinition
     */
    protected function getUserDefinitionService()
    {
        $this->services['Shopware\\Core\\System\\User\\UserDefinition'] = $instance = new \Shopware\Core\System\User\UserDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Elasticsearch\Admin\AdminElasticsearchHelper' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper
     */
    protected function getAdminElasticsearchHelperService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        return $this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] = new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($this->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $this->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $this->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'));
    }

    /*
     * Gets the public 'Shopware\Elasticsearch\Admin\AdminSearchController' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\AdminSearchController
     */
    protected function getAdminSearchController2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminSearchController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        return $this->services['Shopware\\Elasticsearch\\Admin\\AdminSearchController'] = new \Shopware\Elasticsearch\Admin\AdminSearchController(($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearcher'] ?? $this->getAdminSearcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? $this->getJsonEntityEncoderService()), ($this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] ?? ($this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] = new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($this->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $this->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $this->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX')))));
    }

    /*
     * Gets the public 'Shopware\Elasticsearch\Framework\ElasticsearchHelper' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\ElasticsearchHelper
     */
    protected function getElasticsearchHelperService()
    {
        $a = ($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] ?? $this->getElasticsearchRegistryService());

        if (isset($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'])) {
            return $this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'];
        }

        return $this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] = new \Shopware\Elasticsearch\Framework\ElasticsearchHelper('prod', $this->getEnv('bool:default:default_whitespace:SHOPWARE_ES_ENABLED'), $this->getEnv('bool:default:default_whitespace:SHOPWARE_ES_INDEXING_ENABLED'), $this->getEnv('string:default:default_elasticsearch_prefix:SHOPWARE_ES_INDEX_PREFIX'), $this->getEnv('string:SHOPWARE_ES_THROW_EXCEPTION'), ($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), $a, ($this->privates['Shopware\\Elasticsearch\\Framework\\DataAbstractionLayer\\CriteriaParser'] ?? $this->getCriteriaParserService()), ($this->privates['shopware.elasticsearch.logger'] ?? $this->getShopware_Elasticsearch_LoggerService()));
    }

    /*
     * Gets the public 'Shopware\Elasticsearch\Framework\Indexing\CreateAliasTaskHandler' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Indexing\CreateAliasTaskHandler
     */
    protected function getCreateAliasTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/CreateAliasTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'])) {
            return $this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'];
        }
        $b = ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService());

        if (isset($this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'])) {
            return $this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'])) {
            return $this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'];
        }

        return $this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] = new \Shopware\Elasticsearch\Framework\Indexing\CreateAliasTaskHandler($a, ($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $b, $this->parameters['elasticsearch.index.config'], $c);
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\AccountOrderController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AccountOrderController
     */
    protected function getAccountOrderControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AccountOrderController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Order/AccountOrderPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Order/AccountEditOrderPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Order/AccountOrderDetailPageLoader.php';

        $a = ($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService());
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
        $c = ($this->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute'] ?? $this->getOrderRouteService());
        $d = ($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? $this->getOrderServiceService());

        $this->services['Shopware\\Storefront\\Controller\\AccountOrderController'] = $instance = new \Shopware\Storefront\Controller\AccountOrderController(new \Shopware\Storefront\Page\Account\Order\AccountOrderPageLoader($a, $b, $c, ($this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] ?? $this->getAccountServiceService())), new \Shopware\Storefront\Page\Account\Order\AccountEditOrderPageLoader($a, $b, $c, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()), ($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? $this->getSortedPaymentMethodRouteService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService()), $d), ($this->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute'] ?? $this->getContextSwitchRouteService()), ($this->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\CancelOrderRoute'] ?? $this->getCancelOrderRouteService()), ($this->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\SetPaymentOrderRoute'] ?? $this->getSetPaymentOrderRouteService()), ($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\HandlePaymentMethodRoute'] ?? $this->getHandlePaymentMethodRouteService()), $b, new \Shopware\Storefront\Page\Account\Order\AccountOrderDetailPageLoader($a, $b, $c), $c, ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), $d);

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\AccountPaymentController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AccountPaymentController
     */
    protected function getAccountPaymentControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AccountPaymentController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/PaymentMethod/AccountPaymentMethodPageLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\AccountPaymentController'] = $instance = new \Shopware\Storefront\Controller\AccountPaymentController(new \Shopware\Storefront\Page\Account\PaymentMethod\AccountPaymentMethodPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService())), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePaymentMethodRoute'] ?? $this->getChangePaymentMethodRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\AccountProfileController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AccountProfileController
     */
    protected function getAccountProfileControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AccountProfileController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Overview/AccountOverviewPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Profile/AccountProfilePageLoader.php';

        $a = ($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService());
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        $this->services['Shopware\\Storefront\\Controller\\AccountProfileController'] = $instance = new \Shopware\Storefront\Controller\AccountProfileController(new \Shopware\Storefront\Page\Account\Overview\AccountOverviewPageLoader($a, $b, ($this->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute'] ?? $this->getOrderRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRoute'] ?? $this->getCustomerRouteService()), ($this->privates['Shopware\\Storefront\\Pagelet\\Newsletter\\Account\\NewsletterAccountPageletLoader'] ?? $this->getNewsletterAccountPageletLoaderService())), new \Shopware\Storefront\Page\Account\Profile\AccountProfilePageLoader($a, $b, ($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? $this->getCachedSalutationRouteService())), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeCustomerProfileRoute'] ?? $this->getChangeCustomerProfileRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePasswordRoute'] ?? $this->getChangePasswordRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeEmailRoute'] ?? $this->getChangeEmailRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteCustomerRoute'] ?? $this->getDeleteCustomerRouteService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\AddressController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AddressController
     */
    protected function getAddressControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AddressController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Address/Listing/AddressListingPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Address/Detail/AddressDetailPageLoader.php';

        $a = ($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService());
        $b = ($this->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? $this->getCachedCountryRouteService());
        $c = ($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? $this->getCachedSalutationRouteService());
        $d = ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ListAddressRoute'] ?? $this->getListAddressRouteService());
        $e = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        $this->services['Shopware\\Storefront\\Controller\\AddressController'] = $instance = new \Shopware\Storefront\Controller\AddressController(new \Shopware\Storefront\Page\Address\Listing\AddressListingPageLoader($a, $b, $c, $d, $e, ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService())), new \Shopware\Storefront\Page\Address\Detail\AddressDetailPageLoader($a, $b, $c, $e, $d), ($this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] ?? $this->getAccountServiceService()), $d, ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\UpsertAddressRoute'] ?? $this->getUpsertAddressRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteAddressRoute'] ?? $this->getDeleteAddressRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeCustomerProfileRoute'] ?? $this->getChangeCustomerProfileRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\Api\CaptchaController' shared service.
     *
     * @return \Shopware\Storefront\Controller\Api\CaptchaController
     */
    protected function getCaptchaControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/Api/CaptchaController.php';

        $this->services['Shopware\\Storefront\\Controller\\Api\\CaptchaController'] = $instance = new \Shopware\Storefront\Controller\Api\CaptchaController(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'] ?? $this->getHoneypotCaptchaService());
            yield 1 => ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'] ?? $this->getBasicCaptchaService());
            yield 2 => ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV2'] ?? $this->getGoogleReCaptchaV2Service());
            yield 3 => ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV3'] ?? $this->getGoogleReCaptchaV3Service());
        }, 4));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\AuthController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AuthController
     */
    protected function getAuthController2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AuthController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/RecoverPassword/AccountRecoverPasswordPageLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\AuthController'] = $instance = new \Shopware\Storefront\Controller\AuthController(($this->privates['Shopware\\Storefront\\Page\\Account\\Login\\AccountLoginPageLoader'] ?? $this->getAccountLoginPageLoaderService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SendPasswordRecoveryMailRoute'] ?? $this->getSendPasswordRecoveryMailRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ResetPasswordRoute'] ?? $this->getResetPasswordRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoginRoute'] ?? $this->getLoginRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute'] ?? $this->getLogoutRouteService()), ($this->privates['Shopware\\Storefront\\Checkout\\Cart\\SalesChannel\\StorefrontCartFacade'] ?? $this->getStorefrontCartFacadeService()), new \Shopware\Storefront\Page\Account\RecoverPassword\AccountRecoverPasswordPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRecoveryIsExpiredRoute'] ?? $this->getCustomerRecoveryIsExpiredRouteService())), ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\CaptchaController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CaptchaController
     */
    protected function getCaptchaController2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CaptchaController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Captcha/AbstractBasicCaptchaPageletLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Captcha/BasicCaptchaPageletLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/BasicCaptcha/AbstractBasicCaptchaGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/BasicCaptcha/BasicCaptchaGenerator.php';

        $this->services['Shopware\\Storefront\\Controller\\CaptchaController'] = $instance = new \Shopware\Storefront\Controller\CaptchaController(new \Shopware\Storefront\Pagelet\Captcha\BasicCaptchaPageletLoader(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), new \Shopware\Storefront\Framework\Captcha\BasicCaptcha\BasicCaptchaGenerator(), ($this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] ?? $this->getNavigationLoaderService())), ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'] ?? $this->getBasicCaptchaService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\CartLineItemController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CartLineItemController
     */
    protected function getCartLineItemControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CartLineItemController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductLineItemFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionItemBuilder.php';

        $this->services['Shopware\\Storefront\\Controller\\CartLineItemController'] = $instance = new \Shopware\Storefront\Controller\CartLineItemController(($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService()), ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionItemBuilder())), new \Shopware\Core\Content\Product\Cart\ProductLineItemFactory(), ($this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? $this->getHtmlSanitizerService()), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductListRoute'] ?? $this->getProductListRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\CheckoutController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CheckoutController
     */
    protected function getCheckoutControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CheckoutController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Cart/CheckoutCartPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Confirm/CheckoutConfirmPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Finish/CheckoutFinishPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Offcanvas/OffcanvasCartPageLoader.php';

        $a = ($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService());
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
        $c = ($this->privates['Shopware\\Storefront\\Checkout\\Cart\\SalesChannel\\StorefrontCartFacade'] ?? $this->getStorefrontCartFacadeService());
        $d = ($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? $this->getSortedPaymentMethodRouteService());
        $e = ($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'] ?? $this->getSortedShippingMethodRouteService());

        $this->services['Shopware\\Storefront\\Controller\\CheckoutController'] = $instance = new \Shopware\Storefront\Controller\CheckoutController(($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService()), new \Shopware\Storefront\Page\Checkout\Cart\CheckoutCartPageLoader($a, $b, $c, $d, $e, ($this->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? $this->getCachedCountryRouteService())), new \Shopware\Storefront\Page\Checkout\Confirm\CheckoutConfirmPageLoader($b, $c, $e, $d, $a, ($this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\AddressValidationFactory'] ?? $this->getAddressValidationFactoryService()), ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService())), new \Shopware\Storefront\Page\Checkout\Finish\CheckoutFinishPageLoader($b, $a, ($this->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute'] ?? $this->getOrderRouteService())), ($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? $this->getOrderServiceService()), ($this->privates['Shopware\\Core\\Checkout\\Payment\\PaymentService'] ?? $this->getPaymentServiceService()), new \Shopware\Storefront\Page\Checkout\Offcanvas\OffcanvasCartPageLoader($b, $c, $a, $e), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute'] ?? $this->getLogoutRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\CmsController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CmsController
     */
    protected function getCmsControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CmsController.php';

        $this->services['Shopware\\Storefront\\Controller\\CmsController'] = $instance = new \Shopware\Storefront\Controller\CmsController(($this->services['Shopware\\Core\\Content\\Cms\\SalesChannel\\CmsRoute'] ?? $this->getCmsRouteService()), ($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute'] ?? $this->getCachedCategoryRouteService()), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'] ?? $this->getResolveCriteriaProductListingRouteService()), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute'] ?? $this->getCachedProductDetailRouteService()), ($this->services['Shopware\\Storefront\\Page\\Product\\Review\\ProductReviewLoader'] ?? $this->getProductReviewLoaderService()), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute'] ?? $this->getFindProductVariantRouteService()), ($this->services['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductCombinationFinder'] ?? $this->getProductCombinationFinderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\ContextController' shared service.
     *
     * @return \Shopware\Storefront\Controller\ContextController
     */
    protected function getContextControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/ContextController.php';

        $this->services['Shopware\\Storefront\\Controller\\ContextController'] = $instance = new \Shopware\Storefront\Controller\ContextController(($this->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute'] ?? $this->getContextSwitchRouteService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['router.default'] ?? $this->getRouter_DefaultService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeLanguageRoute'] ?? $this->getChangeLanguageRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\CookieController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CookieController
     */
    protected function getCookieControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CookieController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cookie/CookieProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cookie/AppCookieProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cookie/CookieProvider.php';

        $this->services['Shopware\\Storefront\\Controller\\CookieController'] = $instance = new \Shopware\Storefront\Controller\CookieController(new \Shopware\Storefront\Framework\Cookie\AppCookieProvider(new \Shopware\Storefront\Framework\Cookie\CookieProvider(), ($this->services['app.repository'] ?? $this->getApp_RepositoryService())), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\CountryStateController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CountryStateController
     */
    protected function getCountryStateControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CountryStateController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Country/CountryStateDataPageletLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\CountryStateController'] = $instance = new \Shopware\Storefront\Controller\CountryStateController(new \Shopware\Storefront\Pagelet\Country\CountryStateDataPageletLoader(($this->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryStateRoute'] ?? $this->getCachedCountryStateRouteService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService())), ($this->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? $this->getCachedCountryRouteService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\CsrfController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CsrfController
     */
    protected function getCsrfControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CsrfController.php';

        $this->services['Shopware\\Storefront\\Controller\\CsrfController'] = $instance = new \Shopware\Storefront\Controller\CsrfController(($this->services['.container.private.security.csrf.token_manager'] ?? $this->get_Container_Private_Security_Csrf_TokenManagerService()), true, 'twig');

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\DocumentController' shared service.
     *
     * @return \Shopware\Storefront\Controller\DocumentController
     */
    protected function getDocumentController2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/DocumentController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Document/DocumentPageLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\DocumentController'] = $instance = new \Shopware\Storefront\Controller\DocumentController(new \Shopware\Storefront\Page\Account\Document\DocumentPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService()), ($this->services['document.repository'] ?? $this->getDocument_RepositoryService())), ($this->services['Shopware\\Core\\Checkout\\Document\\SalesChannel\\DocumentRoute'] ?? $this->getDocumentRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\DownloadController' shared service.
     *
     * @return \Shopware\Storefront\Controller\DownloadController
     */
    protected function getDownloadControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/DownloadController.php';

        $this->services['Shopware\\Storefront\\Controller\\DownloadController'] = $instance = new \Shopware\Storefront\Controller\DownloadController(($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DownloadRoute'] ?? $this->getDownloadRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\ErrorController' shared service.
     *
     * @return \Shopware\Storefront\Controller\ErrorController
     */
    protected function getErrorControllerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->services['Shopware\\Storefront\\Controller\\ErrorController'] = $this->createProxy('ErrorController_b437ad9', function () {
                return \ErrorController_b437ad9::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getErrorControllerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/ErrorTemplateResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Navigation/Error/ErrorPageLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Navigation/Error/ErrorPageLoader.php';

        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        $instance = new \Shopware\Storefront\Controller\ErrorController(new \Shopware\Storefront\Framework\Twig\ErrorTemplateResolver($a), ($this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'] ?? $this->getHeaderPageletLoaderService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), new \Shopware\Storefront\Page\Navigation\Error\ErrorPageLoader(($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? $this->getSalesChannelCmsPageLoaderService()), ($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService())), ($this->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'] ?? $this->getFooterPageletLoaderService()));

        $instance->setContainer($this);
        $instance->setTwig($a);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\FormController' shared service.
     *
     * @return \Shopware\Storefront\Controller\FormController
     */
    protected function getFormControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/FormController.php';

        $this->services['Shopware\\Storefront\\Controller\\FormController'] = $instance = new \Shopware\Storefront\Controller\FormController(($this->services['Shopware\\Core\\Content\\ContactForm\\SalesChannel\\ContactFormRoute'] ?? $this->getContactFormRouteService()), ($this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute'] ?? $this->getNewsletterSubscribeRouteService()), ($this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute'] ?? $this->getNewsletterUnsubscribeRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\LandingPageController' shared service.
     *
     * @return \Shopware\Storefront\Controller\LandingPageController
     */
    protected function getLandingPageControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/LandingPageController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/LandingPage/LandingPageLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\LandingPageController'] = $instance = new \Shopware\Storefront\Controller\LandingPageController(new \Shopware\Storefront\Page\LandingPage\LandingPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\CachedLandingPageRoute'] ?? $this->getCachedLandingPageRouteService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService())));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\MaintenanceController' shared service.
     *
     * @return \Shopware\Storefront\Controller\MaintenanceController
     */
    protected function getMaintenanceControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/MaintenanceController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Maintenance/MaintenancePageLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\MaintenanceController'] = $instance = new \Shopware\Storefront\Controller\MaintenanceController(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), new \Shopware\Storefront\Page\Maintenance\MaintenancePageLoader(($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? $this->getSalesChannelCmsPageLoaderService()), ($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService())), ($this->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] ?? $this->getMaintenanceModeResolverService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\NavigationController' shared service.
     *
     * @return \Shopware\Storefront\Controller\NavigationController
     */
    protected function getNavigationControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/NavigationController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Navigation/NavigationPageLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Navigation/NavigationPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Menu/Offcanvas/MenuOffcanvasPageletLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Menu/Offcanvas/MenuOffcanvasPageletLoader.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        $this->services['Shopware\\Storefront\\Controller\\NavigationController'] = $instance = new \Shopware\Storefront\Controller\NavigationController(new \Shopware\Storefront\Page\Navigation\NavigationPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), $a, ($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute'] ?? $this->getCachedCategoryRouteService()), ($this->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? $this->getSeoUrlPlaceholderHandlerInterfaceService())), new \Shopware\Storefront\Pagelet\Menu\Offcanvas\MenuOffcanvasPageletLoader($a, ($this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] ?? $this->getNavigationLoaderService())));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\NewsletterController' shared service.
     *
     * @return \Shopware\Storefront\Controller\NewsletterController
     */
    protected function getNewsletterControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/NewsletterController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Newsletter/Subscribe/NewsletterSubscribePageLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\NewsletterController'] = $instance = new \Shopware\Storefront\Controller\NewsletterController(new \Shopware\Storefront\Page\Newsletter\Subscribe\NewsletterSubscribePageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService())), ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute'] ?? $this->getNewsletterSubscribeRouteService()), ($this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterConfirmRoute'] ?? $this->getNewsletterConfirmRouteService()), ($this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute'] ?? $this->getNewsletterUnsubscribeRouteService()), ($this->privates['Shopware\\Storefront\\Pagelet\\Newsletter\\Account\\NewsletterAccountPageletLoader'] ?? $this->getNewsletterAccountPageletLoaderService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\ProductController' shared service.
     *
     * @return \Shopware\Storefront\Controller\ProductController
     */
    protected function getProductControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/ProductController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/ProductPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/QuickView/MinimalQuickViewPageLoader.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
        $b = ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute'] ?? $this->getCachedProductDetailRouteService());
        $c = ($this->services['Shopware\\Storefront\\Page\\Product\\Review\\ProductReviewLoader'] ?? $this->getProductReviewLoaderService());

        $this->services['Shopware\\Storefront\\Controller\\ProductController'] = $instance = new \Shopware\Storefront\Controller\ProductController(new \Shopware\Storefront\Page\Product\ProductPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), $a, $b, $c, ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'] ?? $this->getCachedProductCrossSellingRouteService())), ($this->services['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductCombinationFinder'] ?? $this->getProductCombinationFinderService()), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute'] ?? $this->getFindProductVariantRouteService()), new \Shopware\Storefront\Page\Product\QuickView\MinimalQuickViewPageLoader($a, $b), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\ProductReviewSaveRoute'] ?? $this->getProductReviewSaveRouteService()), ($this->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? $this->getSeoUrlPlaceholderHandlerInterfaceService()), $c, ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\RegisterController' shared service.
     *
     * @return \Shopware\Storefront\Controller\RegisterController
     */
    protected function getRegisterControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/RegisterController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/CustomerGroupRegistration/AbstractCustomerGroupRegistrationPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/CustomerGroupRegistration/CustomerGroupRegistrationPageLoader.php';

        $a = ($this->privates['Shopware\\Storefront\\Page\\Account\\Login\\AccountLoginPageLoader'] ?? $this->getAccountLoginPageLoaderService());

        $this->services['Shopware\\Storefront\\Controller\\RegisterController'] = $instance = new \Shopware\Storefront\Controller\RegisterController($a, ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterRoute'] ?? $this->getRegisterRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterConfirmRoute'] ?? $this->getRegisterConfirmRouteService()), ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService()), ($this->services['Shopware\\Storefront\\Page\\Checkout\\Register\\CheckoutRegisterPageLoader'] ?? $this->getCheckoutRegisterPageLoaderService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), new \Shopware\Storefront\Page\Account\CustomerGroupRegistration\CustomerGroupRegistrationPageLoader($a, ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerGroupRegistrationSettingsRoute'] ?? $this->getCustomerGroupRegistrationSettingsRouteService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService())), ($this->services['sales_channel_domain.repository'] ?? $this->getSalesChannelDomain_RepositoryService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\ScriptController' shared service.
     *
     * @return \Shopware\Storefront\Controller\ScriptController
     */
    protected function getScriptControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/ScriptController.php';

        $this->services['Shopware\\Storefront\\Controller\\ScriptController'] = $instance = new \Shopware\Storefront\Controller\ScriptController(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->privates['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseEncoder'] ?? $this->getScriptResponseEncoderService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\SearchController' shared service.
     *
     * @return \Shopware\Storefront\Controller\SearchController
     */
    protected function getSearchControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/SearchController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Suggest/SuggestPageLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\SearchController'] = $instance = new \Shopware\Storefront\Controller\SearchController(($this->services['Shopware\\Storefront\\Page\\Search\\SearchPageLoader'] ?? $this->getSearchPageLoaderService()), new \Shopware\Storefront\Page\Suggest\SuggestPageLoader(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\CachedProductSuggestRoute'] ?? $this->getCachedProductSuggestRouteService()), ($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService())), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute'] ?? $this->getResolvedCriteriaProductSearchRouteService()));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\SitemapController' shared service.
     *
     * @return \Shopware\Storefront\Controller\SitemapController
     */
    protected function getSitemapControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/SitemapController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Sitemap/SitemapPageLoader.php';

        $this->services['Shopware\\Storefront\\Controller\\SitemapController'] = $instance = new \Shopware\Storefront\Controller\SitemapController(new \Shopware\Storefront\Page\Sitemap\SitemapPageLoader(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Content\\Sitemap\\SalesChannel\\CachedSitemapRoute'] ?? $this->getCachedSitemapRouteService())));

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\StoreApiProxyController' shared service.
     *
     * @return \Shopware\Storefront\Controller\StoreApiProxyController
     */
    protected function getStoreApiProxyControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/StoreApiProxyController.php';

        return $this->services['Shopware\\Storefront\\Controller\\StoreApiProxyController'] = new \Shopware\Storefront\Controller\StoreApiProxyController(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\VerificationHashController' shared service.
     *
     * @return \Shopware\Storefront\Controller\VerificationHashController
     */
    protected function getVerificationHashControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/VerificationHashController.php';

        $this->services['Shopware\\Storefront\\Controller\\VerificationHashController'] = $instance = new \Shopware\Storefront\Controller\VerificationHashController(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\WellKnownController' shared service.
     *
     * @return \Shopware\Storefront\Controller\WellKnownController
     */
    protected function getWellKnownControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/WellKnownController.php';

        $this->services['Shopware\\Storefront\\Controller\\WellKnownController'] = $instance = new \Shopware\Storefront\Controller\WellKnownController();

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Controller\WishlistController' shared service.
     *
     * @return \Shopware\Storefront\Controller\WishlistController
     */
    protected function getWishlistControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/WishlistController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Wishlist/WishlistPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Wishlist/GuestWishlistPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Wishlist/GuestWishlistPageletLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        $a = ($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService());
        $b = ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoadWishlistRoute'] ?? $this->getLoadWishlistRouteService());
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        $this->services['Shopware\\Storefront\\Controller\\WishlistController'] = $instance = new \Shopware\Storefront\Controller\WishlistController(new \Shopware\Storefront\Page\Wishlist\WishlistPageLoader($a, $b, $c), $b, ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AddWishlistProductRoute'] ?? $this->getAddWishlistProductRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RemoveWishlistProductRoute'] ?? $this->getRemoveWishlistProductRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\MergeWishlistProductRoute'] ?? $this->getMergeWishlistProductRouteService()), new \Shopware\Storefront\Page\Wishlist\GuestWishlistPageLoader($a, $c), new \Shopware\Storefront\Pagelet\Wishlist\GuestWishlistPageletLoader(($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductListRoute'] ?? $this->getProductListRouteService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), $c, ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] = new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory()))), $c);

        $instance->setContainer($this);
        $instance->setTwig(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Framework\Cache\CacheStore' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheStore
     */
    protected function getCacheStoreService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/StoreInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheStore.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheStateValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheStateValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/AbstractHttpCacheKeyGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/HttpCacheKeyGenerator.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        return $this->services['Shopware\\Storefront\\Framework\\Cache\\CacheStore'] = new \Shopware\Storefront\Framework\Cache\CacheStore(($this->privates['cache.http'] ?? $this->getCache_HttpService()), new \Shopware\Storefront\Framework\Cache\CacheStateValidator($this->parameters['shopware.cache.invalidation.http_cache']), $a, ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService()), new \Shopware\Storefront\Framework\Cache\HttpCacheKeyGenerator('9dfa0a726cb2f211cbef053d05840993', $a, $this->parameters['storefront.http_cache.ignored_url_parameters']), ($this->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] ?? $this->getMaintenanceModeResolverService()), $this->parameters['session.storage.options']);
    }

    /*
     * Gets the public 'Shopware\Storefront\Framework\Csrf\CsrfPlaceholderHandler' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Csrf\CsrfPlaceholderHandler
     */
    protected function getCsrfPlaceholderHandlerService()
    {
        return $this->services['Shopware\\Storefront\\Framework\\Csrf\\CsrfPlaceholderHandler'] = new \Shopware\Storefront\Framework\Csrf\CsrfPlaceholderHandler(($this->services['.container.private.security.csrf.token_manager'] ?? $this->get_Container_Private_Security_Csrf_TokenManagerService()), true, 'twig', ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['session.storage.factory.native'] ?? $this->getSession_Storage_Factory_NativeService()));
    }

    /*
     * Gets the public 'Shopware\Storefront\Framework\Media\StorefrontMediaValidatorRegistry' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Media\StorefrontMediaValidatorRegistry
     */
    protected function getStorefrontMediaValidatorRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Media/StorefrontMediaValidatorRegistry.php';

        return $this->services['Shopware\\Storefront\\Framework\\Media\\StorefrontMediaValidatorRegistry'] = new \Shopware\Storefront\Framework\Media\StorefrontMediaValidatorRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Storefront\\Framework\\Media\\Validator\\StorefrontMediaImageValidator'] ?? ($this->privates['Shopware\\Storefront\\Framework\\Media\\Validator\\StorefrontMediaImageValidator'] = new \Shopware\Storefront\Framework\Media\Validator\StorefrontMediaImageValidator()));
            yield 1 => ($this->privates['Shopware\\Storefront\\Framework\\Media\\Validator\\StorefrontMediaDocumentValidator'] ?? ($this->privates['Shopware\\Storefront\\Framework\\Media\\Validator\\StorefrontMediaDocumentValidator'] = new \Shopware\Storefront\Framework\Media\Validator\StorefrontMediaDocumentValidator()));
        }, 2));
    }

    /*
     * Gets the public 'Shopware\Storefront\Page\Checkout\Register\CheckoutRegisterPageLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Checkout\Register\CheckoutRegisterPageLoader
     */
    protected function getCheckoutRegisterPageLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Register/CheckoutRegisterPageLoader.php';

        return $this->services['Shopware\\Storefront\\Page\\Checkout\\Register\\CheckoutRegisterPageLoader'] = new \Shopware\Storefront\Page\Checkout\Register\CheckoutRegisterPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ListAddressRoute'] ?? $this->getListAddressRouteService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService()), ($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? $this->getCachedSalutationRouteService()), ($this->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? $this->getCachedCountryRouteService()));
    }

    /*
     * Gets the public 'Shopware\Storefront\Page\Product\Configurator\ProductCombinationFinder' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Product\Configurator\ProductCombinationFinder
     */
    protected function getProductCombinationFinderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/Configurator/ProductCombinationFinder.php';

        return $this->services['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductCombinationFinder'] = new \Shopware\Storefront\Page\Product\Configurator\ProductCombinationFinder(($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute'] ?? $this->getFindProductVariantRouteService()));
    }

    /*
     * Gets the public 'Shopware\Storefront\Page\Product\Review\ProductReviewLoader' shared service.
     *
     * @return \Shopware\Storefront\Page\Product\Review\ProductReviewLoader
     */
    protected function getProductReviewLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/Review/ProductReviewLoader.php';

        return $this->services['Shopware\\Storefront\\Page\\Product\\Review\\ProductReviewLoader'] = new \Shopware\Storefront\Page\Product\Review\ProductReviewLoader(($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'] ?? $this->getCachedProductReviewRouteService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Storefront\Page\Search\SearchPageLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Search\SearchPageLoader
     */
    protected function getSearchPageLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Search/SearchPageLoader.php';

        return $this->services['Shopware\\Storefront\\Page\\Search\\SearchPageLoader'] = new \Shopware\Storefront\Page\Search\SearchPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute'] ?? $this->getResolvedCriteriaProductSearchRouteService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the public 'Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition
     */
    protected function getThemeChildDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeChildDefinition.php';

        $this->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition
     */
    protected function getThemeMediaDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeMediaDefinition.php';

        $this->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition
     */
    protected function getThemeSalesChannelDefinitionService()
    {
        $this->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition
     */
    protected function getThemeTranslationDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeTranslationDefinition.php';

        $this->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Theme\Controller\ThemeController' shared service.
     *
     * @return \Shopware\Storefront\Theme\Controller\ThemeController
     */
    protected function getThemeControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Controller/ThemeController.php';

        $this->services['Shopware\\Storefront\\Theme\\Controller\\ThemeController'] = $instance = new \Shopware\Storefront\Theme\Controller\ThemeController(($this->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? $this->getThemeServiceService()));

        $instance->setContainer($this);

        return $instance;
    }

    /*
     * Gets the public 'Shopware\Storefront\Theme\SalesChannelThemeLoader' shared service.
     *
     * @return \Shopware\Storefront\Theme\SalesChannelThemeLoader
     */
    protected function getSalesChannelThemeLoaderService()
    {
        return $this->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'] = new \Shopware\Storefront\Theme\SalesChannelThemeLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the public 'Shopware\Storefront\Theme\StorefrontPluginRegistry' shared service.
     *
     * @return \Shopware\Storefront\Theme\StorefrontPluginRegistry
     */
    protected function getStorefrontPluginRegistryService()
    {
        return $this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] = new \Shopware\Storefront\Theme\StorefrontPluginRegistry(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ?? ($this->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] = new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4)))), ($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? $this->getActiveAppsLoaderService()));
    }

    /*
     * Gets the public 'Shopware\Storefront\Theme\ThemeDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeDefinition
     */
    protected function getThemeDefinitionService()
    {
        $this->services['Shopware\\Storefront\\Theme\\ThemeDefinition'] = $instance = new \Shopware\Storefront\Theme\ThemeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'Swag\PlatformDemoData\SwagPlatformDemoData' shared autowired service.
     *
     * @return \Swag\PlatformDemoData\SwagPlatformDemoData
     */
    protected function getSwagPlatformDemoDataService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ContainerAwareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Bundle/BundleInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ContainerAwareTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Bundle/Bundle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Bundle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/SwagPlatformDemoData.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DemoDataService.php';

        $this->services['Swag\\PlatformDemoData\\SwagPlatformDemoData'] = $instance = ($this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader'] ?? $this->getKernelPluginLoaderService())->getPluginInstance('Swag\\PlatformDemoData\\SwagPlatformDemoData');

        $instance->setDemoDataService(new \Swag\PlatformDemoData\DemoDataService(($this->services['Shopware\\Core\\Framework\\Api\\Controller\\SyncController'] ?? $this->getSyncControllerService()), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Swag\\PlatformDemoData\\DataProvider\\MediaProvider'] ?? $this->getMediaProviderService());
            yield 1 => ($this->privates['Swag\\PlatformDemoData\\DataProvider\\CmsPageProvider'] ?? $this->getCmsPageProviderService());
            yield 2 => ($this->privates['Swag\\PlatformDemoData\\DataProvider\\CategoryProvider'] ?? $this->getCategoryProviderService());
            yield 3 => ($this->privates['Swag\\PlatformDemoData\\DataProvider\\CustomerProvider'] ?? $this->getCustomerProviderService());
            yield 4 => ($this->privates['Swag\\PlatformDemoData\\DataProvider\\RuleProvider'] ?? $this->getRuleProviderService());
            yield 5 => ($this->privates['Swag\\PlatformDemoData\\DataProvider\\PropertyProvider'] ?? $this->getPropertyProviderService());
            yield 6 => ($this->privates['Swag\\PlatformDemoData\\DataProvider\\ProductProvider'] ?? $this->getProductProviderService());
            yield 7 => ($this->privates['Swag\\PlatformDemoData\\DataProvider\\ShippingMethodProvider'] ?? $this->getShippingMethodProviderService());
        }, 8), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), 'prod'));

        return $instance;
    }

    /*
     * Gets the public 'Symfony\Bundle\FrameworkBundle\Controller\RedirectController' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\RedirectController
     */
    protected function getRedirectControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/RedirectController.php';

        $a = ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService());

        return $this->services['Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController'] = new \Symfony\Bundle\FrameworkBundle\Controller\RedirectController(($this->services['router'] ?? $this->getRouterService()), $a->getHttpPort(), $a->getHttpsPort());
    }

    /*
     * Gets the public 'Symfony\Bundle\FrameworkBundle\Controller\TemplateController' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\TemplateController
     */
    protected function getTemplateControllerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/TemplateController.php';

        return $this->services['Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController'] = new \Symfony\Bundle\FrameworkBundle\Controller\TemplateController(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));
    }

    /*
     * Gets the public 'acl_role.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAclRole_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['acl_role.repository'])) {
            return $this->services['acl_role.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['acl_role.repository'])) {
            return $this->services['acl_role.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['acl_role.repository'])) {
            return $this->services['acl_role.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['acl_role.repository'])) {
            return $this->services['acl_role.repository'];
        }

        return $this->services['acl_role.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition'] ?? $this->getAclRoleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'acl_user_role.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAclUserRole_RepositoryService()
    {
        return $this->services['acl_user_role.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition'] ?? $this->getAclUserRoleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'admin.openSearch.client' shared service.
     *
     * @return \Elasticsearch\Client
     */
    protected function getAdmin_OpenSearch_ClientService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->services['admin.openSearch.client'] = $this->createProxy('Client_dba3ed3', function () {
                return \Client_dba3ed3::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getAdmin_OpenSearch_ClientService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ClientFactory.php';

        return \Shopware\Elasticsearch\Framework\ClientFactory::createClient($this->getEnv('string:ADMIN_OPENSEARCH_URL'), ($this->privates['shopware.elasticsearch.logger'] ?? $this->getShopware_Elasticsearch_LoggerService()), false, $this->parameters['elasticsearch.ssl']);
    }

    /*
     * Gets the public 'administration.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getAdministration_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['administration.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/administration');
    }

    /*
     * Gets the public 'administration.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getAdministration_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['administration.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/administration');
    }

    /*
     * Gets the public 'app.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getApp_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['app.repository'])) {
            return $this->services['app.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['app.repository'])) {
            return $this->services['app.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['app.repository'])) {
            return $this->services['app.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['app.repository'])) {
            return $this->services['app.repository'];
        }

        return $this->services['app.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\AppDefinition'] ?? $this->getAppDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_action_button.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppActionButton_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['app_action_button.repository'])) {
            return $this->services['app_action_button.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['app_action_button.repository'])) {
            return $this->services['app_action_button.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['app_action_button.repository'])) {
            return $this->services['app_action_button.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['app_action_button.repository'])) {
            return $this->services['app_action_button.repository'];
        }

        return $this->services['app_action_button.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition'] ?? $this->getActionButtonDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_action_button_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppActionButtonTranslation_RepositoryService()
    {
        return $this->services['app_action_button_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition'] ?? $this->getActionButtonTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_administration_snippet.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppAdministrationSnippet_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['app_administration_snippet.repository'])) {
            return $this->services['app_administration_snippet.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['app_administration_snippet.repository'])) {
            return $this->services['app_administration_snippet.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['app_administration_snippet.repository'])) {
            return $this->services['app_administration_snippet.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['app_administration_snippet.repository'])) {
            return $this->services['app_administration_snippet.repository'];
        }

        return $this->services['app_administration_snippet.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition'] ?? $this->getAppAdministrationSnippetDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_cms_block.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppCmsBlock_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['app_cms_block.repository'])) {
            return $this->services['app_cms_block.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['app_cms_block.repository'])) {
            return $this->services['app_cms_block.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['app_cms_block.repository'])) {
            return $this->services['app_cms_block.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['app_cms_block.repository'])) {
            return $this->services['app_cms_block.repository'];
        }

        return $this->services['app_cms_block.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition'] ?? $this->getAppCmsBlockDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_cms_block_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppCmsBlockTranslation_RepositoryService()
    {
        return $this->services['app_cms_block_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition'] ?? $this->getAppCmsBlockTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_flow_action.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppFlowAction_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['app_flow_action.repository'])) {
            return $this->services['app_flow_action.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['app_flow_action.repository'])) {
            return $this->services['app_flow_action.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['app_flow_action.repository'])) {
            return $this->services['app_flow_action.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['app_flow_action.repository'])) {
            return $this->services['app_flow_action.repository'];
        }

        return $this->services['app_flow_action.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition'] ?? $this->getAppFlowActionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_flow_action_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppFlowActionTranslation_RepositoryService()
    {
        return $this->services['app_flow_action_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition'] ?? $this->getAppFlowActionTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_payment_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppPaymentMethod_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['app_payment_method.repository'])) {
            return $this->services['app_payment_method.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['app_payment_method.repository'])) {
            return $this->services['app_payment_method.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['app_payment_method.repository'])) {
            return $this->services['app_payment_method.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['app_payment_method.repository'])) {
            return $this->services['app_payment_method.repository'];
        }

        return $this->services['app_payment_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition'] ?? $this->getAppPaymentMethodDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_script_condition.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppScriptCondition_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['app_script_condition.repository'])) {
            return $this->services['app_script_condition.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['app_script_condition.repository'])) {
            return $this->services['app_script_condition.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['app_script_condition.repository'])) {
            return $this->services['app_script_condition.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['app_script_condition.repository'])) {
            return $this->services['app_script_condition.repository'];
        }

        return $this->services['app_script_condition.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition'] ?? $this->getAppScriptConditionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_script_condition_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppScriptConditionTranslation_RepositoryService()
    {
        return $this->services['app_script_condition_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition'] ?? $this->getAppScriptConditionTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_template.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppTemplate_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['app_template.repository'])) {
            return $this->services['app_template.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['app_template.repository'])) {
            return $this->services['app_template.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['app_template.repository'])) {
            return $this->services['app_template.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['app_template.repository'])) {
            return $this->services['app_template.repository'];
        }

        return $this->services['app_template.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition'] ?? $this->getTemplateDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'app_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getAppTranslation_RepositoryService()
    {
        return $this->services['app_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition'] ?? $this->getAppTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'cache.app' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function getCache_AppService()
    {
        $this->services['cache.app'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('Yx9DUnQfC7', 0, ($this->targetDir.''.'/pools/app'), ($this->privates['cache.default_marshaller'] ?? ($this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false))));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the public 'cache.app_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_AppClearerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/CacheClearerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/Psr6CacheClearer.php';

        return $this->services['cache.app_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(['cache.app' => ($this->services['cache.app'] ?? $this->getCache_AppService()), 'cache.messenger.restart_workers_signal' => ($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService()), 'cache.rate_limiter' => ($this->privates['cache.rate_limiter'] ?? $this->getCache_RateLimiterService()), 'cache.object' => ($this->privates['.cache.object.inner'] ?? $this->get_Cache_Object_InnerService()), 'cache.http' => ($this->privates['.cache.http.inner'] ?? $this->get_Cache_Http_InnerService()), 'cache.tags' => ($this->privates['cache.tags'] ?? $this->getCache_TagsService())]);
    }

    /*
     * Gets the public 'cache.global_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_GlobalClearerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/CacheClearerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/Psr6CacheClearer.php';

        return $this->services['cache.global_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(['cache.app' => ($this->services['cache.app'] ?? $this->getCache_AppService()), 'cache.system' => ($this->services['cache.system'] ?? $this->getCache_SystemService()), 'cache.validator' => ($this->privates['cache.validator'] ?? $this->getCache_ValidatorService()), 'cache.serializer' => ($this->privates['cache.serializer'] ?? $this->getCache_SerializerService()), 'cache.annotations' => ($this->privates['cache.annotations'] ?? $this->getCache_AnnotationsService()), 'cache.property_info' => ($this->privates['cache.property_info'] ?? $this->getCache_PropertyInfoService()), 'cache.messenger.restart_workers_signal' => ($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService()), 'cache.rate_limiter' => ($this->privates['cache.rate_limiter'] ?? $this->getCache_RateLimiterService()), 'cache.object' => ($this->privates['.cache.object.inner'] ?? $this->get_Cache_Object_InnerService()), 'cache.http' => ($this->privates['.cache.http.inner'] ?? $this->get_Cache_Http_InnerService()), 'cache.tags' => ($this->privates['cache.tags'] ?? $this->getCache_TagsService()), 'cache.property_access' => ($this->privates['cache.property_access'] ?? $this->getCache_PropertyAccessService()), 'cache.validator_expression_language' => ($this->services['cache.validator_expression_language'] ?? $this->getCache_ValidatorExpressionLanguageService())]);
    }

    /*
     * Gets the public 'cache.system' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_SystemService()
    {
        return $this->services['cache.system'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('Y7g1j3S2bW', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the public 'cache.system_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_SystemClearerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/CacheClearerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/Psr6CacheClearer.php';

        return $this->services['cache.system_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(['cache.system' => ($this->services['cache.system'] ?? $this->getCache_SystemService()), 'cache.validator' => ($this->privates['cache.validator'] ?? $this->getCache_ValidatorService()), 'cache.serializer' => ($this->privates['cache.serializer'] ?? $this->getCache_SerializerService()), 'cache.annotations' => ($this->privates['cache.annotations'] ?? $this->getCache_AnnotationsService()), 'cache.property_info' => ($this->privates['cache.property_info'] ?? $this->getCache_PropertyInfoService()), 'cache.property_access' => ($this->privates['cache.property_access'] ?? $this->getCache_PropertyAccessService()), 'cache.validator_expression_language' => ($this->services['cache.validator_expression_language'] ?? $this->getCache_ValidatorExpressionLanguageService())]);
    }

    /*
     * Gets the public 'cache.validator_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_ValidatorExpressionLanguageService()
    {
        return $this->services['cache.validator_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('VkLg23g4RH', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the public 'cache_warmer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate
     */
    protected function getCacheWarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerAggregate.php';

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(new RewindableGenerator(function () {
            yield 0 => ($this->privates['config_builder.warmer'] ?? $this->getConfigBuilder_WarmerService());
            yield 1 => ($this->privates['translation.warmer'] ?? $this->getTranslation_WarmerService());
            yield 2 => ($this->privates['router.cache_warmer'] ?? $this->getRouter_CacheWarmerService());
            yield 3 => ($this->privates['annotations.cache_warmer'] ?? $this->getAnnotations_CacheWarmerService());
            yield 4 => ($this->privates['serializer.mapping.cache_warmer'] ?? $this->getSerializer_Mapping_CacheWarmerService());
            yield 5 => ($this->privates['validator.mapping.cache_warmer'] ?? $this->getValidator_Mapping_CacheWarmerService());
        }, 6), false, ($this->targetDir.''.'/Shopware_Core_KernelProdContainerDeprecations.log'));
    }

    /*
     * Gets the public 'category.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCategory_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['category.repository'])) {
            return $this->services['category.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['category.repository'])) {
            return $this->services['category.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['category.repository'])) {
            return $this->services['category.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['category.repository'])) {
            return $this->services['category.repository'];
        }

        return $this->services['category.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? $this->getCategoryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'category_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCategoryTag_RepositoryService()
    {
        return $this->services['category_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition'] ?? $this->getCategoryTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'category_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCategoryTranslation_RepositoryService()
    {
        return $this->services['category_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition'] ?? $this->getCategoryTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'checkout.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getCheckout_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['checkout.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/checkout');
    }

    /*
     * Gets the public 'checkout.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getCheckout_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['checkout.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/checkout');
    }

    /*
     * Gets the public 'cms_block.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCmsBlock_RepositoryService()
    {
        return $this->services['cms_block.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition'] ?? $this->getCmsBlockDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'cms_page.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCmsPage_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['cms_page.repository'])) {
            return $this->services['cms_page.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['cms_page.repository'])) {
            return $this->services['cms_page.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['cms_page.repository'])) {
            return $this->services['cms_page.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['cms_page.repository'])) {
            return $this->services['cms_page.repository'];
        }

        return $this->services['cms_page.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Cms\\CmsPageDefinition'] ?? $this->getCmsPageDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'cms_page_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCmsPageTranslation_RepositoryService()
    {
        return $this->services['cms_page_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition'] ?? $this->getCmsPageTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'cms_section.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCmsSection_RepositoryService()
    {
        return $this->services['cms_section.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition'] ?? $this->getCmsSectionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'cms_slot.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCmsSlot_RepositoryService()
    {
        return $this->services['cms_slot.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition'] ?? $this->getCmsSlotDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'cms_slot_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCmsSlotTranslation_RepositoryService()
    {
        return $this->services['cms_slot_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition'] ?? $this->getCmsSlotTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'console.command_loader' shared service.
     *
     * @return \Symfony\Component\Console\CommandLoader\ContainerCommandLoader
     */
    protected function getConsole_CommandLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/CommandLoader/CommandLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/CommandLoader/ContainerCommandLoader.php';

        return $this->services['console.command_loader'] = new \Symfony\Component\Console\CommandLoader\ContainerCommandLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand' => ['privates', 'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand', 'getCreateMigrationCommandService', false],
            'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand' => ['privates', 'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand', 'getRefreshMigrationCommandService', false],
            'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand' => ['privates', 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand', 'getMigrationCommandService', false],
            'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand' => ['privates', 'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand', 'getCleanPersonalDataCommandService', false],
            'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand' => ['privates', 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand', 'getMigrationDestructiveCommandService', false],
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand' => ['privates', 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand', 'getChangelogCreateCommandService', false],
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand' => ['privates', 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand', 'getChangelogReleaseCommandService', false],
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand' => ['privates', 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand', 'getChangelogChangeCommandService', false],
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand' => ['privates', 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand', 'getChangelogCheckCommandService', false],
            'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand' => ['privates', 'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand', 'getFeatureDumpCommandService', false],
            'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand' => ['privates', 'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand', 'getS3FilesystemVisibilityCommandService', false],
            'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand' => ['privates', 'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand', 'getDumpSchemaCommandService', false],
            'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand' => ['privates', 'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand', 'getDumpClassSchemaCommandService', false],
            'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand' => ['privates', 'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand', 'getRefreshAppCommandService', false],
            'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand' => ['privates', 'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand', 'getInstallAppCommandService', false],
            'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand' => ['privates', 'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand', 'getUninstallAppCommandService', false],
            'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand' => ['privates', 'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand', 'getActivateAppCommandService', false],
            'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand' => ['privates', 'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand', 'getDeactivateAppCommandService', false],
            'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand' => ['privates', 'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand', 'getValidateAppCommandService', false],
            'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand' => ['privates', 'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand', 'getResolveAppUrlChangeCommandService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand', 'getCreateSchemaCommandService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand', 'getCreateEntitiesCommandService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand', 'getCreateHydratorCommandService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand', 'getRefreshIndexCommandService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand', 'getDataAbstractionLayerValidateCommandService', false],
            'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand' => ['privates', 'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand', 'getDemodataCommandService', false],
            'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand' => ['privates', 'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand', 'getDebugDumpBusinessEventsCommandService', false],
            'console.command.assets_install' => ['privates', 'console.command.assets_install', 'getConsole_Command_AssetsInstallService', false],
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\DispatchSleepMessageCommand' => ['privates', 'Shopware\\Core\\Framework\\MessageQueue\\Command\\DispatchSleepMessageCommand', 'getDispatchSleepMessageCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand', 'getBundleDumpCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand', 'getPluginRefreshCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand', 'getPluginListCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand', 'getPluginZipImportCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand', 'getPluginInstallCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand', 'getPluginActivateCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand', 'getPluginUpdateCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand', 'getPluginDeactivateCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand', 'getPluginUninstallCommandService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand' => ['privates', 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand', 'getPluginCreateCommandService', false],
            'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\RegisterScheduledTasksCommand' => ['privates', 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\RegisterScheduledTasksCommand', 'getRegisterScheduledTasksCommandService', false],
            'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\ScheduledTaskRunner' => ['privates', 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\ScheduledTaskRunner', 'getScheduledTaskRunnerService', false],
            'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand' => ['privates', 'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand', 'getStoreDownloadCommandService', false],
            'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand' => ['privates', 'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand', 'getStoreLoginCommandService', false],
            'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand' => ['privates', 'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand', 'getValidateSnippetsCommandService', false],
            'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand' => ['privates', 'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand', 'getWorkflowDumpCommandService', false],
            'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet' => ['privates', 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet', 'getConfigGetService', false],
            'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet' => ['privates', 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet', 'getConfigSetService', false],
            'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand' => ['privates', 'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand', 'getMigrateIncrementStorageCommandService', false],
            'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand' => ['privates', 'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand', 'getGenerateThumbnailsCommandService', false],
            'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand' => ['privates', 'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand', 'getGenerateMediaTypesCommandService', false],
            'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand' => ['privates', 'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand', 'getDeleteNotUsedMediaCommandService', false],
            'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand' => ['privates', 'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand', 'getProductExportGenerateCommandService', false],
            'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand' => ['privates', 'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand', 'getDeleteExpiredFilesCommandService', false],
            'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand' => ['privates', 'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand', 'getImportEntityCommandService', false],
            'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand' => ['privates', 'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand', 'getSitemapGenerateCommandService', false],
            'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand' => ['privates', 'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand', 'getCartMigrateCommandService', false],
            'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand', 'getDeleteUnusedGuestCustomersCommandService', false],
            'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand' => ['privates', 'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand', 'getHttpCacheWarmUpCommandService', false],
            'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand' => ['privates', 'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand', 'getSalesChannelCreateStorefrontCommandService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand' => ['privates', 'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand', 'getThemeCreateCommandService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand' => ['privates', 'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand', 'getThemeChangeCommandService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand' => ['privates', 'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand', 'getThemeCompileCommandService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand' => ['privates', 'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand', 'getThemeDumpCommandService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand' => ['privates', 'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand', 'getThemeRefreshCommandService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand' => ['privates', 'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand', 'getThemePrepareIconsCommandService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand' => ['privates', 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand', 'getElasticsearchIndexingCommandService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand' => ['privates', 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand', 'getElasticsearchTestAnalyzerCommandService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand' => ['privates', 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand', 'getElasticsearchStatusCommandService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand' => ['privates', 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand', 'getElasticsearchResetCommandService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand' => ['privates', 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand', 'getElasticsearchCreateAliasCommandService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand' => ['privates', 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand', 'getElasticsearchCleanIndicesCommandService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand.lazy', 'getElasticsearchAdminIndexingCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand.lazy', 'getElasticsearchAdminResetCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand.lazy', 'getElasticsearchAdminTestCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand' => ['privates', 'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand', 'getSystemInstallCommandService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand' => ['privates', 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand', 'getSystemGenerateJwtSecretCommandService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand' => ['privates', 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand', 'getSystemGenerateAppSecretCommandService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand' => ['privates', 'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand', 'getSystemSetupCommandService', false],
            'Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand' => ['privates', '.Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand.lazy', 'getDotenvDumpCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand' => ['privates', 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand', 'getSystemUpdatePrepareCommandService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand' => ['privates', 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand', 'getSystemUpdateFinishCommandService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand' => ['privates', '.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand.lazy', 'getSalesChannelUpdateDomainCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand' => ['privates', 'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand', 'getSystemConfigureShopCommandService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand' => ['privates', 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand', 'getSalesChannelCreateCommandService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand' => ['privates', 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand', 'getSalesChannelListCommandService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand' => ['privates', 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand', 'getSalesChannelMaintenanceEnableCommandService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand' => ['privates', 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand', 'getSalesChannelMaintenanceDisableCommandService', false],
            'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand' => ['privates', 'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand', 'getUserCreateCommandService', false],
            'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand' => ['privates', 'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand', 'getUserChangePasswordCommandService', false],
            'console.command.about' => ['privates', '.console.command.about.lazy', 'get_Console_Command_About_LazyService', false],
            'console.command.cache_clear' => ['privates', '.console.command.cache_clear.lazy', 'get_Console_Command_CacheClear_LazyService', false],
            'console.command.cache_pool_clear' => ['privates', '.console.command.cache_pool_clear.lazy', 'get_Console_Command_CachePoolClear_LazyService', false],
            'console.command.cache_pool_prune' => ['privates', '.console.command.cache_pool_prune.lazy', 'get_Console_Command_CachePoolPrune_LazyService', false],
            'console.command.cache_pool_delete' => ['privates', '.console.command.cache_pool_delete.lazy', 'get_Console_Command_CachePoolDelete_LazyService', false],
            'console.command.cache_pool_list' => ['privates', '.console.command.cache_pool_list.lazy', 'get_Console_Command_CachePoolList_LazyService', false],
            'console.command.cache_warmup' => ['privates', '.console.command.cache_warmup.lazy', 'get_Console_Command_CacheWarmup_LazyService', false],
            'console.command.config_debug' => ['privates', '.console.command.config_debug.lazy', 'get_Console_Command_ConfigDebug_LazyService', false],
            'console.command.config_dump_reference' => ['privates', '.console.command.config_dump_reference.lazy', 'get_Console_Command_ConfigDumpReference_LazyService', false],
            'console.command.container_debug' => ['privates', '.console.command.container_debug.lazy', 'get_Console_Command_ContainerDebug_LazyService', false],
            'console.command.container_lint' => ['privates', '.console.command.container_lint.lazy', 'get_Console_Command_ContainerLint_LazyService', false],
            'console.command.debug_autowiring' => ['privates', '.console.command.debug_autowiring.lazy', 'get_Console_Command_DebugAutowiring_LazyService', false],
            'console.command.dotenv_debug' => ['privates', '.console.command.dotenv_debug.lazy', 'get_Console_Command_DotenvDebug_LazyService', false],
            'console.command.event_dispatcher_debug' => ['privates', '.console.command.event_dispatcher_debug.lazy', 'get_Console_Command_EventDispatcherDebug_LazyService', false],
            'console.command.messenger_consume_messages' => ['privates', '.console.command.messenger_consume_messages.lazy', 'get_Console_Command_MessengerConsumeMessages_LazyService', false],
            'console.command.messenger_setup_transports' => ['privates', '.console.command.messenger_setup_transports.lazy', 'get_Console_Command_MessengerSetupTransports_LazyService', false],
            'console.command.messenger_debug' => ['privates', '.console.command.messenger_debug.lazy', 'get_Console_Command_MessengerDebug_LazyService', false],
            'console.command.messenger_stop_workers' => ['privates', '.console.command.messenger_stop_workers.lazy', 'get_Console_Command_MessengerStopWorkers_LazyService', false],
            'console.command.router_debug' => ['privates', '.console.command.router_debug.lazy', 'get_Console_Command_RouterDebug_LazyService', false],
            'console.command.router_match' => ['privates', '.console.command.router_match.lazy', 'get_Console_Command_RouterMatch_LazyService', false],
            'console.command.translation_debug' => ['privates', '.console.command.translation_debug.lazy', 'get_Console_Command_TranslationDebug_LazyService', false],
            'console.command.translation_extract' => ['privates', '.console.command.translation_extract.lazy', 'get_Console_Command_TranslationExtract_LazyService', false],
            'console.command.validator_debug' => ['privates', '.console.command.validator_debug.lazy', 'get_Console_Command_ValidatorDebug_LazyService', false],
            'console.command.translation_pull' => ['privates', '.console.command.translation_pull.lazy', 'get_Console_Command_TranslationPull_LazyService', false],
            'console.command.translation_push' => ['privates', '.console.command.translation_push.lazy', 'get_Console_Command_TranslationPush_LazyService', false],
            'console.command.xliff_lint' => ['privates', '.console.command.xliff_lint.lazy', 'get_Console_Command_XliffLint_LazyService', false],
            'console.command.yaml_lint' => ['privates', '.console.command.yaml_lint.lazy', 'get_Console_Command_YamlLint_LazyService', false],
            'console.command.secrets_set' => ['privates', '.console.command.secrets_set.lazy', 'get_Console_Command_SecretsSet_LazyService', false],
            'console.command.secrets_remove' => ['privates', '.console.command.secrets_remove.lazy', 'get_Console_Command_SecretsRemove_LazyService', false],
            'console.command.secrets_generate_key' => ['privates', '.console.command.secrets_generate_key.lazy', 'get_Console_Command_SecretsGenerateKey_LazyService', false],
            'console.command.secrets_list' => ['privates', '.console.command.secrets_list.lazy', 'get_Console_Command_SecretsList_LazyService', false],
            'console.command.secrets_decrypt_to_local' => ['privates', '.console.command.secrets_decrypt_to_local.lazy', 'get_Console_Command_SecretsDecryptToLocal_LazyService', false],
            'console.command.secrets_encrypt_from_local' => ['privates', '.console.command.secrets_encrypt_from_local.lazy', 'get_Console_Command_SecretsEncryptFromLocal_LazyService', false],
            'twig.command.debug' => ['privates', '.twig.command.debug.lazy', 'get_Twig_Command_Debug_LazyService', false],
            'twig.command.lint' => ['privates', '.twig.command.lint.lazy', 'get_Twig_Command_Lint_LazyService', false],
            'enqueue.transport.consume_command' => ['privates', 'enqueue.transport.consume_command', 'getEnqueue_Transport_ConsumeCommandService', false],
            'enqueue.client.consume_command' => ['privates', 'enqueue.client.consume_command', 'getEnqueue_Client_ConsumeCommandService', false],
            'enqueue.client.produce_command' => ['privates', 'enqueue.client.produce_command', 'getEnqueue_Client_ProduceCommandService', false],
            'enqueue.client.setup_broker_command' => ['privates', 'enqueue.client.setup_broker_command', 'getEnqueue_Client_SetupBrokerCommandService', false],
            'enqueue.client.routes_command' => ['privates', 'enqueue.client.routes_command', 'getEnqueue_Client_RoutesCommandService', false],
        ], [
            'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand' => 'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand',
            'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand' => 'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand',
            'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand' => 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand',
            'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand' => 'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand',
            'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand' => 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand',
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand',
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand',
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand',
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand',
            'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand' => 'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand',
            'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand' => 'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand',
            'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand' => 'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand',
            'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand' => 'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand',
            'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand' => 'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand',
            'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand' => 'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand',
            'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand' => 'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand',
            'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand' => 'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand',
            'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand' => 'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand',
            'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand' => 'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand',
            'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand' => 'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand',
            'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand' => 'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand',
            'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand' => 'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand',
            'console.command.assets_install' => 'Shopware\\Core\\Framework\\Adapter\\Asset\\AssetInstallCommand',
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\DispatchSleepMessageCommand' => 'Shopware\\Core\\Framework\\MessageQueue\\Command\\DispatchSleepMessageCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand',
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand',
            'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\RegisterScheduledTasksCommand' => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\RegisterScheduledTasksCommand',
            'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\ScheduledTaskRunner' => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\ScheduledTaskRunner',
            'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand' => 'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand',
            'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand' => 'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand',
            'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand' => 'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand',
            'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand' => 'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand',
            'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet' => 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet',
            'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet' => 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet',
            'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand' => 'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand',
            'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand' => 'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand',
            'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand' => 'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand',
            'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand' => 'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand',
            'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand' => 'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand',
            'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand' => 'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand',
            'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand' => 'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand',
            'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand' => 'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand',
            'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand' => 'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand',
            'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand' => 'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand',
            'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand' => 'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand',
            'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand' => 'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand',
            'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand' => 'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand',
            'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand' => 'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand',
            'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand' => 'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand',
            'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand' => 'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand',
            'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand' => 'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand',
            'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand' => 'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand',
            'Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand',
            'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand' => 'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand',
            'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand' => 'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand',
            'console.command.about' => '?',
            'console.command.cache_clear' => '?',
            'console.command.cache_pool_clear' => '?',
            'console.command.cache_pool_prune' => '?',
            'console.command.cache_pool_delete' => '?',
            'console.command.cache_pool_list' => '?',
            'console.command.cache_warmup' => '?',
            'console.command.config_debug' => '?',
            'console.command.config_dump_reference' => '?',
            'console.command.container_debug' => '?',
            'console.command.container_lint' => '?',
            'console.command.debug_autowiring' => '?',
            'console.command.dotenv_debug' => '?',
            'console.command.event_dispatcher_debug' => '?',
            'console.command.messenger_consume_messages' => '?',
            'console.command.messenger_setup_transports' => '?',
            'console.command.messenger_debug' => '?',
            'console.command.messenger_stop_workers' => '?',
            'console.command.router_debug' => '?',
            'console.command.router_match' => '?',
            'console.command.translation_debug' => '?',
            'console.command.translation_extract' => '?',
            'console.command.validator_debug' => '?',
            'console.command.translation_pull' => '?',
            'console.command.translation_push' => '?',
            'console.command.xliff_lint' => '?',
            'console.command.yaml_lint' => '?',
            'console.command.secrets_set' => '?',
            'console.command.secrets_remove' => '?',
            'console.command.secrets_generate_key' => '?',
            'console.command.secrets_list' => '?',
            'console.command.secrets_decrypt_to_local' => '?',
            'console.command.secrets_encrypt_from_local' => '?',
            'twig.command.debug' => '?',
            'twig.command.lint' => '?',
            'enqueue.transport.consume_command' => 'Enqueue\\Symfony\\Consumption\\ConfigurableConsumeCommand',
            'enqueue.client.consume_command' => 'Enqueue\\Symfony\\Client\\ConsumeCommand',
            'enqueue.client.produce_command' => 'Enqueue\\Symfony\\Client\\ProduceCommand',
            'enqueue.client.setup_broker_command' => 'Enqueue\\Symfony\\Client\\SetupBrokerCommand',
            'enqueue.client.routes_command' => 'Enqueue\\Symfony\\Client\\RoutesCommand',
        ]), ['database:create-migration' => 'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand', 'database:refresh-migration' => 'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand', 'database:migrate' => 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand', 'database:clean-personal-data' => 'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand', 'database:migrate-destructive' => 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand', 'changelog:create' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand', 'changelog:release' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand', 'changelog:change' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand', 'changelog:check' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand', 'feature:dump' => 'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand', 'administration:dump:features' => 'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand', 's3:set-visibility' => 'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand', 'framework:schema' => 'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand', 'framework:dump:class:schema' => 'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand', 'app:refresh' => 'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand', 'app:install' => 'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand', 'app:uninstall' => 'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand', 'app:activate' => 'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand', 'app:deactivate' => 'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand', 'app:validate' => 'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand', 'app:url-change:resolve' => 'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand', 'dal:create:schema' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand', 'dal:create:entities' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand', 'dal:create:hydrators' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand', 'dal:refresh:index' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand', 'dal:validate' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand', 'framework:demodata' => 'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand', 'debug:business-events' => 'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand', 'assets:install' => 'console.command.assets_install', 'debug:messenger:dispatch-sleep' => 'Shopware\\Core\\Framework\\MessageQueue\\Command\\DispatchSleepMessageCommand', 'bundle:dump' => 'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand', 'plugin:refresh' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand', 'plugin:list' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand', 'plugin:zip-import' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand', 'plugin:install' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand', 'plugin:activate' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand', 'plugin:update' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand', 'plugin:deactivate' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand', 'plugin:uninstall' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand', 'plugin:create' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand', 'scheduled-task:register' => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\RegisterScheduledTasksCommand', 'scheduled-task:run' => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\ScheduledTaskRunner', 'store:download' => 'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand', 'store:login' => 'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand', 'snippets:validate' => 'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand', 'state-machine:dump' => 'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand', 'system:config:get' => 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet', 'system:config:set' => 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet', 'number-range:migrate' => 'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand', 'media:generate-thumbnails' => 'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand', 'media:generate-media-types' => 'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand', 'media:delete-unused' => 'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand', 'product-export:generate' => 'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand', 'import-export:delete-expired' => 'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand', 'import:entity' => 'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand', 'sitemap:generate' => 'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand', 'cart:migrate' => 'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand', 'customer:delete-unused-guests' => 'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand', 'http:cache:warm:up' => 'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand', 'sales-channel:create:storefront' => 'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand', 'theme:create' => 'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand', 'theme:change' => 'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand', 'theme:compile' => 'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand', 'theme:dump' => 'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand', 'theme:refresh' => 'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand', 'theme:prepare-icons' => 'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand', 'es:index' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand', 'es:test:analyzer' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand', 'es:status' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand', 'es:reset' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand', 'es:create:alias' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand', 'es:index:cleanup' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand', 'es:admin:index' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand', 'es:admin:reset' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand', 'es:admin:test' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand', 'system:install' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand', 'system:generate-jwt-secret' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand', 'system:generate-app-secret' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand', 'system:setup' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand', 'dotenv:dump' => 'Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand', 'system:update:prepare' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand', 'system:update:finish' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand', 'sales-channel:update:domain' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand', 'system:configure-shop' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand', 'sales-channel:create' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand', 'sales-channel:list' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand', 'sales-channel:maintenance:enable' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand', 'sales-channel:maintenance:disable' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand', 'user:create' => 'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand', 'user:change-password' => 'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand', 'about' => 'console.command.about', 'cache:clear' => 'console.command.cache_clear', 'cache:pool:clear' => 'console.command.cache_pool_clear', 'cache:pool:prune' => 'console.command.cache_pool_prune', 'cache:pool:delete' => 'console.command.cache_pool_delete', 'cache:pool:list' => 'console.command.cache_pool_list', 'cache:warmup' => 'console.command.cache_warmup', 'debug:config' => 'console.command.config_debug', 'config:dump-reference' => 'console.command.config_dump_reference', 'debug:container' => 'console.command.container_debug', 'lint:container' => 'console.command.container_lint', 'debug:autowiring' => 'console.command.debug_autowiring', 'debug:dotenv' => 'console.command.dotenv_debug', 'debug:event-dispatcher' => 'console.command.event_dispatcher_debug', 'messenger:consume' => 'console.command.messenger_consume_messages', 'messenger:setup-transports' => 'console.command.messenger_setup_transports', 'debug:messenger' => 'console.command.messenger_debug', 'messenger:stop-workers' => 'console.command.messenger_stop_workers', 'debug:router' => 'console.command.router_debug', 'router:match' => 'console.command.router_match', 'debug:translation' => 'console.command.translation_debug', 'translation:extract' => 'console.command.translation_extract', 'translation:update' => 'console.command.translation_extract', 'debug:validator' => 'console.command.validator_debug', 'translation:pull' => 'console.command.translation_pull', 'translation:push' => 'console.command.translation_push', 'lint:xliff' => 'console.command.xliff_lint', 'lint:yaml' => 'console.command.yaml_lint', 'secrets:set' => 'console.command.secrets_set', 'secrets:remove' => 'console.command.secrets_remove', 'secrets:generate-keys' => 'console.command.secrets_generate_key', 'secrets:list' => 'console.command.secrets_list', 'secrets:decrypt-to-local' => 'console.command.secrets_decrypt_to_local', 'secrets:encrypt-from-local' => 'console.command.secrets_encrypt_from_local', 'debug:twig' => 'twig.command.debug', 'lint:twig' => 'twig.command.lint', 'enqueue:transport:consume' => 'enqueue.transport.consume_command', 'enqueue:consume' => 'enqueue.client.consume_command', 'enqueue:produce' => 'enqueue.client.produce_command', 'enqueue:setup-broker' => 'enqueue.client.setup_broker_command', 'enqueue:routes' => 'enqueue.client.routes_command']);
    }

    /*
     * Gets the public 'container.env_var_processors_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getContainer_EnvVarProcessorsLocatorService()
    {
        return $this->services['container.env_var_processors_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'base64' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'bool' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'const' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'csv' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'default' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'file' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'float' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'int' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'json' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'key' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'not' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'query_string' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'require' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'resolve' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'string' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'trim' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'url' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
        ], [
            'base64' => '?',
            'bool' => '?',
            'const' => '?',
            'csv' => '?',
            'default' => '?',
            'file' => '?',
            'float' => '?',
            'int' => '?',
            'json' => '?',
            'key' => '?',
            'not' => '?',
            'query_string' => '?',
            'require' => '?',
            'resolve' => '?',
            'string' => '?',
            'trim' => '?',
            'url' => '?',
        ]);
    }

    /*
     * Gets the public 'content.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getContent_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['content.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/content');
    }

    /*
     * Gets the public 'content.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getContent_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['content.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/content');
    }

    /*
     * Gets the public 'country.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCountry_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['country.repository'])) {
            return $this->services['country.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['country.repository'])) {
            return $this->services['country.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['country.repository'])) {
            return $this->services['country.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['country.repository'])) {
            return $this->services['country.repository'];
        }

        return $this->services['country.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Country\\CountryDefinition'] ?? $this->getCountryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'country_state.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCountryState_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['country_state.repository'])) {
            return $this->services['country_state.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['country_state.repository'])) {
            return $this->services['country_state.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['country_state.repository'])) {
            return $this->services['country_state.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['country_state.repository'])) {
            return $this->services['country_state.repository'];
        }

        return $this->services['country_state.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition'] ?? $this->getCountryStateDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'country_state_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCountryStateTranslation_RepositoryService()
    {
        return $this->services['country_state_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition'] ?? $this->getCountryStateTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'country_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCountryTranslation_RepositoryService()
    {
        return $this->services['country_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition'] ?? $this->getCountryTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'currency.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCurrency_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['currency.repository'])) {
            return $this->services['currency.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['currency.repository'])) {
            return $this->services['currency.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['currency.repository'])) {
            return $this->services['currency.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['currency.repository'])) {
            return $this->services['currency.repository'];
        }

        return $this->services['currency.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Currency\\CurrencyDefinition'] ?? $this->getCurrencyDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'currency_country_rounding.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCurrencyCountryRounding_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['currency_country_rounding.repository'])) {
            return $this->services['currency_country_rounding.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['currency_country_rounding.repository'])) {
            return $this->services['currency_country_rounding.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['currency_country_rounding.repository'])) {
            return $this->services['currency_country_rounding.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['currency_country_rounding.repository'])) {
            return $this->services['currency_country_rounding.repository'];
        }

        return $this->services['currency_country_rounding.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition'] ?? $this->getCurrencyCountryRoundingDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'currency_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCurrencyTranslation_RepositoryService()
    {
        return $this->services['currency_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition'] ?? $this->getCurrencyTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'custom_entity.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomEntity_RepositoryService()
    {
        return $this->services['custom_entity.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition'] ?? $this->getCustomEntityDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'custom_field.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomField_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['custom_field.repository'])) {
            return $this->services['custom_field.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['custom_field.repository'])) {
            return $this->services['custom_field.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['custom_field.repository'])) {
            return $this->services['custom_field.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['custom_field.repository'])) {
            return $this->services['custom_field.repository'];
        }

        return $this->services['custom_field.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\CustomField\\CustomFieldDefinition'] ?? $this->getCustomFieldDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'custom_field_set.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomFieldSet_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['custom_field_set.repository'])) {
            return $this->services['custom_field_set.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['custom_field_set.repository'])) {
            return $this->services['custom_field_set.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['custom_field_set.repository'])) {
            return $this->services['custom_field_set.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['custom_field_set.repository'])) {
            return $this->services['custom_field_set.repository'];
        }

        return $this->services['custom_field_set.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition'] ?? $this->getCustomFieldSetDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'custom_field_set_relation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomFieldSetRelation_RepositoryService()
    {
        return $this->services['custom_field_set_relation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition'] ?? $this->getCustomFieldSetRelationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomer_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['customer.repository'])) {
            return $this->services['customer.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['customer.repository'])) {
            return $this->services['customer.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['customer.repository'])) {
            return $this->services['customer.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['customer.repository'])) {
            return $this->services['customer.repository'];
        }

        return $this->services['customer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] ?? $this->getCustomerDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer_address.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomerAddress_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['customer_address.repository'])) {
            return $this->services['customer_address.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['customer_address.repository'])) {
            return $this->services['customer_address.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['customer_address.repository'])) {
            return $this->services['customer_address.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['customer_address.repository'])) {
            return $this->services['customer_address.repository'];
        }

        return $this->services['customer_address.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition'] ?? $this->getCustomerAddressDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer_group.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomerGroup_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['customer_group.repository'])) {
            return $this->services['customer_group.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['customer_group.repository'])) {
            return $this->services['customer_group.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['customer_group.repository'])) {
            return $this->services['customer_group.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['customer_group.repository'])) {
            return $this->services['customer_group.repository'];
        }

        return $this->services['customer_group.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition'] ?? $this->getCustomerGroupDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer_group_registration_sales_channels.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomerGroupRegistrationSalesChannels_RepositoryService()
    {
        return $this->services['customer_group_registration_sales_channels.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition'] ?? $this->getCustomerGroupRegistrationSalesChannelDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer_group_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomerGroupTranslation_RepositoryService()
    {
        return $this->services['customer_group_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition'] ?? $this->getCustomerGroupTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer_recovery.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomerRecovery_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['customer_recovery.repository'])) {
            return $this->services['customer_recovery.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['customer_recovery.repository'])) {
            return $this->services['customer_recovery.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['customer_recovery.repository'])) {
            return $this->services['customer_recovery.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['customer_recovery.repository'])) {
            return $this->services['customer_recovery.repository'];
        }

        return $this->services['customer_recovery.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition'] ?? $this->getCustomerRecoveryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomerTag_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['customer_tag.repository'])) {
            return $this->services['customer_tag.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['customer_tag.repository'])) {
            return $this->services['customer_tag.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['customer_tag.repository'])) {
            return $this->services['customer_tag.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['customer_tag.repository'])) {
            return $this->services['customer_tag.repository'];
        }

        return $this->services['customer_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition'] ?? $this->getCustomerTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer_wishlist.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomerWishlist_RepositoryService()
    {
        return $this->services['customer_wishlist.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition'] ?? $this->getCustomerWishlistDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'customer_wishlist_product.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getCustomerWishlistProduct_RepositoryService()
    {
        return $this->services['customer_wishlist_product.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition'] ?? $this->getCustomerWishlistProductDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'dead_message.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getDeadMessage_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['dead_message.repository'])) {
            return $this->services['dead_message.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['dead_message.repository'])) {
            return $this->services['dead_message.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['dead_message.repository'])) {
            return $this->services['dead_message.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['dead_message.repository'])) {
            return $this->services['dead_message.repository'];
        }

        return $this->services['dead_message.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\MessageQueue\\DeadMessage\\DeadMessageDefinition'] ?? $this->getDeadMessageDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'delivery_time.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getDeliveryTime_RepositoryService()
    {
        return $this->services['delivery_time.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition'] ?? $this->getDeliveryTimeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'delivery_time_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getDeliveryTimeTranslation_RepositoryService()
    {
        return $this->services['delivery_time_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition'] ?? $this->getDeliveryTimeTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'document.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getDocument_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['document.repository'])) {
            return $this->services['document.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['document.repository'])) {
            return $this->services['document.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['document.repository'])) {
            return $this->services['document.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['document.repository'])) {
            return $this->services['document.repository'];
        }

        return $this->services['document.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Document\\DocumentDefinition'] ?? $this->getDocumentDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'document_base_config.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getDocumentBaseConfig_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['document_base_config.repository'])) {
            return $this->services['document_base_config.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['document_base_config.repository'])) {
            return $this->services['document_base_config.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['document_base_config.repository'])) {
            return $this->services['document_base_config.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['document_base_config.repository'])) {
            return $this->services['document_base_config.repository'];
        }

        return $this->services['document_base_config.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition'] ?? $this->getDocumentBaseConfigDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'document_base_config_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getDocumentBaseConfigSalesChannel_RepositoryService()
    {
        return $this->services['document_base_config_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition'] ?? $this->getDocumentBaseConfigSalesChannelDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'document_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getDocumentType_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['document_type.repository'])) {
            return $this->services['document_type.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['document_type.repository'])) {
            return $this->services['document_type.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['document_type.repository'])) {
            return $this->services['document_type.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['document_type.repository'])) {
            return $this->services['document_type.repository'];
        }

        return $this->services['document_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition'] ?? $this->getDocumentTypeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'document_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getDocumentTypeTranslation_RepositoryService()
    {
        return $this->services['document_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition'] ?? $this->getDocumentTypeTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'elasticsearch.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getElasticsearch_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['elasticsearch.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/elasticsearch');
    }

    /*
     * Gets the public 'elasticsearch.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getElasticsearch_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['elasticsearch.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/elasticsearch');
    }

    /*
     * Gets the public 'enqueue.client.default.producer' shared service.
     *
     * @return \Enqueue\Client\Producer
     */
    protected function getEnqueue_Client_Default_ProducerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/ProducerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/Producer.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Rpc/RpcFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/PreSendEventExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/PreSendCommandExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/DriverPreSendExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/PostSendExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/ExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/ChainExtension.php';

        return $this->services['enqueue.client.default.producer'] = new \Enqueue\Client\Producer(($this->privates['enqueue.client.default.driver'] ?? $this->getEnqueue_Client_Default_DriverService()), new \Enqueue\Rpc\RpcFactory(($this->privates['enqueue.client.default.context'] ?? $this->getEnqueue_Client_Default_ContextService())), new \Enqueue\Client\ChainExtension([]));
    }

    /*
     * Gets the public 'error_controller' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ErrorController
     */
    protected function getErrorController2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ErrorController.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/error-handler/ErrorRenderer/ErrorRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/error-handler/ErrorRenderer/SerializerErrorRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/ErrorRenderer/TwigErrorRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/error-handler/ErrorRenderer/HtmlErrorRenderer.php';

        $a = ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()));

        return $this->services['error_controller'] = new \Symfony\Component\HttpKernel\Controller\ErrorController(($this->services['http_kernel'] ?? $this->getHttpKernelService()), 'error_controller', new \Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer(($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()), \Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer::getPreferredFormat($a), new \Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()), new \Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer(\Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer::isDebug($a, false), 'UTF-8', ($this->privates['debug.file_link_formatter'] ?? ($this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))), \dirname(__DIR__, 4), \Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer::getAndCleanOutputBuffer($a), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService())), \Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer::isDebug($a, false)), \Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer::isDebug($a, false)));
    }

    /*
     * Gets the public 'event_action.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getEventAction_RepositoryService()
    {
        return $this->services['event_action.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Event\\EventAction\\EventActionDefinition'] ?? $this->getEventActionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'event_action_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getEventActionRule_RepositoryService()
    {
        return $this->services['event_action_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionRule\\EventActionRuleDefinition'] ?? $this->getEventActionRuleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'event_action_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getEventActionSalesChannel_RepositoryService()
    {
        return $this->services['event_action_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionSalesChannel\\EventActionSalesChannelDefinition'] ?? $this->getEventActionSalesChannelDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Shopware\Core\Framework\Event\NestedEventDispatcher
     */
    protected function getEventDispatcherService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventDispatcher'] ?? $this->getBusinessEventDispatcherService());

        if (isset($this->services['event_dispatcher'])) {
            return $this->services['event_dispatcher'];
        }

        $this->services['event_dispatcher'] = $instance = new \Shopware\Core\Framework\Event\NestedEventDispatcher($a);

        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteParamsCleanupListener'] ?? ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteParamsCleanupListener'] = new \Shopware\Core\Framework\Routing\RouteParamsCleanupListener()));
        }, 1 => '__invoke'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Twig\\TwigDateRequestListener'] ?? $this->getTwigDateRequestListenerService());
        }, 1 => 'onKernelRequest'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Routing\\ContextResolverListener'] ?? $this->getContextResolverListenerService());
        }, 1 => 'resolveContext'], -10);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Routing\\CoreSubscriber'] ?? $this->getCoreSubscriberService());
        }, 1 => 'initializeCspNonce'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Routing\\CoreSubscriber'] ?? $this->getCoreSubscriberService());
        }, 1 => 'setSecurityHeaders'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeListener'] ?? $this->getRouteScopeListenerService());
        }, 1 => 'checkScope'], -20);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'] ?? $this->getRouteEventSubscriberService());
        }, 1 => 'request'], -10);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'] ?? $this->getRouteEventSubscriberService());
        }, 1 => 'response'], -10);
        $instance->addListener('Shopware\\Storefront\\Event\\StorefrontRenderEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'] ?? $this->getRouteEventSubscriberService());
        }, 1 => 'render'], -10);
        $instance->addListener('snippet.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'] ?? $this->getTranslatorCacheInvalidateService());
        }, 1 => 'invalidate'], 0);
        $instance->addListener('snippet.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'] ?? $this->getTranslatorCacheInvalidateService());
        }, 1 => 'invalidate'], 0);
        $instance->addListener('snippet_set.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'] ?? $this->getTranslatorCacheInvalidateService());
        }, 1 => 'invalidate'], 0);
        $instance->addListener('app_template.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'] ?? $this->getEntityTemplateLoaderService());
        }, 1 => 'reset'], 0);
        $instance->addListener('shopware.global_business_event', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Log\\LoggingService'] ?? $this->getLoggingServiceService());
        }, 1 => 'logBusinessEvent'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'] ?? $this->getCacheStateSubscriberService());
        }, 1 => 'setStates'], -21);
        $instance->addListener('Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLoginEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'] ?? $this->getCacheStateSubscriberService());
        }, 1 => 'login'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CartChangedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'] ?? $this->getCacheStateSubscriberService());
        }, 1 => 'cartChanged'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\ScriptCacheInvalidationSubscriber'] ?? $this->getScriptCacheInvalidationSubscriberService());
        }, 1 => 'executeCacheInvalidationHook'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Category\\Event\\CategoryIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateCategoryRouteByCategoryIds'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Category\\Event\\CategoryIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateListingRouteByCategoryIds'], 2001);
        $instance->addListener('Shopware\\Core\\Content\\LandingPage\\Event\\LandingPageIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateIndexedLandingPages'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateSearch'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateListings'], 2001);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateProductIds'], 2002);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateDetailRoute'], 2004);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateStreamsAfterIndexing'], 2005);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateReviewRoute'], 2006);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateSearch'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateListings'], 2001);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateProductIds'], 2002);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateDetailRoute'], 2004);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateStreamsAfterIndexing'], 2005);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateReviewRoute'], 2006);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateCmsPageIds'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateCurrencyRoute'], 2002);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateLanguageRoute'], 2003);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateNavigationRoute'], 2004);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidatePaymentMethodRoute'], 2005);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateProductAssignment'], 2006);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateManufacturerFilters'], 2007);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidatePropertyFilters'], 2008);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateCrossSellingRoute'], 2009);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateContext'], 2010);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateShippingMethodRoute'], 2011);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateSnippets'], 2012);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateStreamsBeforeIndexing'], 2013);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateStreamIds'], 2014);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateCountryRoute'], 2015);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateSalutationRoute'], 2016);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateInitialStateIdLoader'], 2017);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateCountryStateRoute'], 2018);
        $instance->addListener('Shopware\\Core\\Content\\Seo\\Event\\SeoUrlUpdateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateSeoUrls'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Rule\\Event\\RuleIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostInstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostInstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUninstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUninstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateConfigKey'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Sitemap\\Event\\SitemapGeneratedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? $this->getCacheInvalidationSubscriberService());
        }, 1 => 'invalidateSitemap'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator'] ?? $this->getAclWriteValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclAnnotationValidator'] ?? $this->getAclAnnotationValidatorService());
        }, 1 => 'validate'], -20);
        $instance->addListener('Shopware\\Core\\Framework\\Api\\Acl\\Event\\CommandAclValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Acl\\CreditOrderLineItemListener'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Acl\\CreditOrderLineItemListener'] = new \Shopware\Core\Framework\Api\EventListener\Acl\CreditOrderLineItemListener()));
        }, 1 => 'validate'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\CorsListener'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\CorsListener'] = new \Shopware\Core\Framework\Api\EventListener\CorsListener()));
        }, 1 => 'onKernelRequest'], 9999);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\CorsListener'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\CorsListener'] = new \Shopware\Core\Framework\Api\EventListener\CorsListener()));
        }, 1 => 'onKernelResponse'], 9999);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ResponseExceptionListener'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ResponseExceptionListener'] = new \Shopware\Core\Framework\Api\EventListener\ResponseExceptionListener(false)));
        }, 1 => 'onKernelException'], -1);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ResponseHeaderListener'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ResponseHeaderListener'] = new \Shopware\Core\Framework\Api\EventListener\ResponseHeaderListener()));
        }, 1 => 'onResponse'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\JsonRequestTransformerListener'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\JsonRequestTransformerListener'] = new \Shopware\Core\Framework\Api\EventListener\JsonRequestTransformerListener()));
        }, 1 => 'onRequest'], 128);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ExpectationSubscriber'] ?? $this->getExpectationSubscriberService());
        }, 1 => 'checkExpectations'], -21);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\SalesChannelAuthenticationListener'] ?? $this->getSalesChannelAuthenticationListenerService());
        }, 1 => 'validateRequest'], -2);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\ApiAuthenticationListener'] ?? $this->getApiAuthenticationListenerService());
        }, 1 => 'setupOAuth'], 128);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\ApiAuthenticationListener'] ?? $this->getApiAuthenticationListenerService());
        }, 1 => 'validateRequest'], -2);
        $instance->addListener('user.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\UserCredentialsChangedSubscriber'] ?? $this->getUserCredentialsChangedSubscriberService());
        }, 1 => 'onUserWritten'], 0);
        $instance->addListener('user.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\UserCredentialsChangedSubscriber'] ?? $this->getUserCredentialsChangedSubscriberService());
        }, 1 => 'onUserDeleted'], 0);
        $instance->addListener('app.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\App\\Subscriber\\AppLoadedSubscriber'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\Subscriber\\AppLoadedSubscriber'] = new \Shopware\Core\Framework\App\Subscriber\AppLoadedSubscriber()));
        }, 1 => 'unserialize'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\App\\Subscriber\\CustomFieldProtectionSubscriber'] ?? $this->getCustomFieldProtectionSubscriberService());
        }, 1 => 'checkWrite'], 0);
        $instance->addListener('app_script_condition.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\App\\Subscriber\\AppScriptConditionConstraintsSubscriber'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\Subscriber\\AppScriptConditionConstraintsSubscriber'] = new \Shopware\Core\Framework\App\Subscriber\AppScriptConditionConstraintsSubscriber()));
        }, 1 => 'unserialize'], 0);
        $instance->addListener('app_flow_action.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\App\\FlowAction\\AppFlowActionLoadedSubscriber'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\FlowAction\\AppFlowActionLoadedSubscriber'] = new \Shopware\Core\Framework\App\FlowAction\AppFlowActionLoadedSubscriber()));
        }, 1 => 'unserialize'], 0);
        $instance->addListener('custom_field.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? $this->getCustomFieldServiceService());
        }, 1 => 'reset'], 0);
        $instance->addListener('custom_field.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? $this->getCustomFieldServiceService());
        }, 1 => 'reset'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressStartedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] ?? $this->getRefreshIndexCommandService());
        }, 1 => 'startProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressAdvancedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] ?? $this->getRefreshIndexCommandService());
        }, 1 => 'advanceProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressFinishedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] ?? $this->getRefreshIndexCommandService());
        }, 1 => 'finishProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePreFinishEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'] ?? $this->getRegisteredIndexerSubscriberService());
        }, 1 => 'runRegisteredIndexers'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Store\\Event\\FirstRunWizardFinishedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'] ?? $this->getRegisteredIndexerSubscriberService());
        }, 1 => 'runRegisteredIndexers'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\LockValidator'] ?? $this->getLockValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityProtection\EntityProtectionValidator()));
        }, 1 => 'validateWriteCommands'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntitySearchedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityProtection\EntityProtectionValidator()));
        }, 1 => 'validateEntitySearch'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber'] ?? $this->getEntityIndexingSubscriberService());
        }, 1 => 'refreshIndex'], 1000);
        $instance->addListener('mail_template.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Event\\EventAction\\EventActionSubscriber'] ?? $this->getEventActionSubscriberService());
        }, 1 => 'deleted'], 0);
        $instance->addListener('dead_message.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\DeadMessageLoadedSubscriber'] ?? ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\DeadMessageLoadedSubscriber'] = new \Shopware\Core\Framework\MessageQueue\Subscriber\DeadMessageLoadedSubscriber()));
        }, 1 => 'unserialize'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageFailedHandler'] ?? $this->getMessageFailedHandlerService());
        }, 1 => 'onMessageFailed'], 99);
        $instance->addListener('plugin.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginLoadedSubscriber'] ?? ($this->privates['Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginLoadedSubscriber'] = new \Shopware\Core\Framework\Plugin\Subscriber\PluginLoadedSubscriber()));
        }, 1 => 'unserialize'], 0);
        $instance->addListener('acl_role.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginAclPrivilegesSubscriber'] ?? $this->getPluginAclPrivilegesSubscriberService());
        }, 1 => 'onAclRoleLoaded'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriberService());
        }, 1 => 'afterPluginStateChange'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriberService());
        }, 1 => 'afterPluginStateChange'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriberService());
        }, 1 => 'afterPluginStateChange'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Subscriber\\UpdatePostFinishSubscriber'] ?? $this->getUpdatePostFinishSubscriberService());
        }, 1 => 'updatePostFinishEvent'], 0);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber'] ?? $this->getLicenseHostChangedSubscriberService());
        }, 1 => 'onLicenseHostChanged'], 0);
        $instance->addListener('script.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'] ?? $this->getScriptLoaderService());
        }, 1 => 'invalidateCache'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Language\\LanguageValidator'] ?? $this->getLanguageValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PostWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Language\\LanguageValidator'] ?? $this->getLanguageValidatorService());
        }, 1 => 'postValidate'], 0);
        $instance->addListener('language.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? $this->getCachedLanguageLoaderService());
        }, 1 => 'invalidateCache'], 0);
        $instance->addListener('language.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? $this->getCachedLanguageLoaderService());
        }, 1 => 'invalidateCache'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Language\\TranslationValidator'] ?? ($this->privates['Shopware\\Core\\System\\Language\\TranslationValidator'] = new \Shopware\Core\System\Language\TranslationValidator()));
        }, 1 => 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Update\\Services\\UpdateHtaccess'] ?? ($this->privates['Shopware\\Core\\Framework\\Update\\Services\\UpdateHtaccess'] = new \Shopware\Core\Framework\Update\Services\UpdateHtaccess((\dirname(__DIR__, 4).'/public/.htaccess'))));
        }, 1 => 'update'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Update\\Services\\CreateCustomAppsDir'] ?? ($this->privates['Shopware\\Core\\Framework\\Update\\Services\\CreateCustomAppsDir'] = new \Shopware\Core\Framework\Update\Services\CreateCustomAppsDir((\dirname(__DIR__, 4).'/custom/apps'))));
        }, 1 => 'onUpdate'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver'] ?? $this->getStoreApiSeoResolverService());
        }, 1 => 'addSeoInformation'], 10000);
        $instance->addListener('webhook.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'] ?? $this->getWebhookCacheClearerService());
        }, 1 => 'clearWebhookCache'], 0);
        $instance->addListener('acl_role.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'] ?? $this->getWebhookCacheClearerService());
        }, 1 => 'clearPrivilegesCache'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Webhook\\Event\\RetryWebhookMessageFailedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'] ?? $this->getRetryWebhookMessageFailedSubscriberService());
        }, 1 => 'handleWebhookMessageFail'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StoreApiResponseListener'] ?? $this->getStoreApiResponseListenerService());
        }, 1 => 'encodeResponse'], 10000);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\SalesChannel\\Validation\\SalesChannelValidator'] ?? $this->getSalesChannelValidatorService());
        }, 1 => 'handleSalesChannelLanguageIds'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\SalesChannel\\Subscriber\\SalesChannelTypeValidator'] ?? ($this->privates['Shopware\\Core\\System\\SalesChannel\\Subscriber\\SalesChannelTypeValidator'] = new \Shopware\Core\System\SalesChannel\Subscriber\SalesChannelTypeValidator()));
        }, 1 => 'preWriteValidateEvent'], 0);
        $instance->addListener('country.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Country\\CountryTaxFreeDeprecationUpdater'] ?? $this->getCountryTaxFreeDeprecationUpdaterService());
        }, 1 => 'updated'], 0);
        $instance->addListener('currency.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Currency\\CurrencyLoadSubscriber'] ?? ($this->privates['Shopware\\Core\\System\\Currency\\CurrencyLoadSubscriber'] = new \Shopware\Core\System\Currency\CurrencyLoadSubscriber()));
        }, 1 => 'setDefault'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Currency\\CurrencyValidator'] ?? ($this->privates['Shopware\\Core\\System\\Currency\\CurrencyValidator'] = new \Shopware\Core\System\Currency\CurrencyValidator()));
        }, 1 => 'preValidate'], 0);
        $instance->addListener('custom_field.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Snippet\\Subscriber\\CustomFieldSubscriber'] ?? $this->getCustomFieldSubscriberService());
        }, 1 => 'customFieldIsWritten'], 0);
        $instance->addListener('custom_field.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Snippet\\Subscriber\\CustomFieldSubscriber'] ?? $this->getCustomFieldSubscriberService());
        }, 1 => 'customFieldIsDeleted'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\Salutation\\DefaultSalutationValidator'] ?? ($this->privates['Shopware\\Core\\System\\Salutation\\DefaultSalutationValidator'] = new \Shopware\Core\System\Salutation\DefaultSalutationValidator()));
        }, 1 => 'validate'], 0);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'] ?? ($this->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'] = new \Shopware\Core\System\SystemConfig\Store\MemoizedSystemConfigStore()));
        }, 1 => 'onValueChanged'], 1500);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PostWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Category\\Validation\\EntryPointValidator'] ?? $this->getEntryPointValidatorService());
        }, 1 => 'postValidate'], 0);
        $instance->addListener('category.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'] ?? $this->getCategorySubscriberService());
        }, 1 => 'entityLoaded'], 0);
        $instance->addListener('sales_channel.category.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'] ?? $this->getCategorySubscriberService());
        }, 1 => 'entityLoaded'], 0);
        $instance->addListener('media.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaLoadedSubscriber'] ?? $this->getMediaLoadedSubscriberService());
        }, 1 => 'unserialize'], 10);
        $instance->addListener('media.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaLoadedSubscriber'] ?? $this->getMediaLoadedSubscriberService());
        }, 1 => 'addUrls'], 0);
        $instance->addListener('media_folder_configuration.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaFolderConfigLoadedSubscriber'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaFolderConfigLoadedSubscriber'] = new \Shopware\Core\Content\Media\Subscriber\MediaFolderConfigLoadedSubscriber()));
        }, 1 => 'unserialize'], 10);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\BeforeDeleteEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'] ?? $this->getMediaDeletionSubscriberService());
        }, 1 => 'beforeDelete'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntitySearchedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'] ?? $this->getMediaDeletionSubscriberService());
        }, 1 => 'securePrivateFolders'], 0);
        $instance->addListener('product.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] ?? $this->getProductSubscriberService());
        }, 1 => 'loaded'], 0);
        $instance->addListener('product.partial_loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] ?? $this->getProductSubscriberService());
        }, 1 => 'partialEntityLoaded'], 0);
        $instance->addListener('sales_channel.product.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] ?? $this->getProductSubscriberService());
        }, 1 => 'salesChannelLoaded'], 0);
        $instance->addListener('sales_channel.product.partial_loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] ?? $this->getProductSubscriberService());
        }, 1 => 'partialSalesChannelLoaded'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductListingCriteriaEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? $this->getProductListingFeaturesSubscriberService());
        }, 1 => 'handleListingRequest'], 100);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductListingCriteriaEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? $this->getProductListingFeaturesSubscriberService());
        }, 1 => 'handleFlags'], -100);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductSuggestCriteriaEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? $this->getProductListingFeaturesSubscriberService());
        }, 1 => 'handleFlags'], -100);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductSearchCriteriaEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? $this->getProductListingFeaturesSubscriberService());
        }, 1 => 'handleSearchRequest'], 100);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductSearchCriteriaEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? $this->getProductListingFeaturesSubscriberService());
        }, 1 => 'handleFlags'], -100);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductListingResultEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? $this->getProductListingFeaturesSubscriberService());
        }, 1 => 'handleResult'], 100);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductListingResultEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? $this->getProductListingFeaturesSubscriberService());
        }, 1 => 'removeScoreSorting'], -100);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductSearchResultEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? $this->getProductListingFeaturesSubscriberService());
        }, 1 => 'handleResult'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemCommandValidator'] ?? $this->getProductLineItemCommandValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? $this->getStockUpdaterService());
        }, 1 => 'orderPlaced'], 0);
        $instance->addListener('Shopware\\Core\\System\\StateMachine\\Event\\StateMachineTransitionEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? $this->getStockUpdaterService());
        }, 1 => 'stateChanged'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? $this->getStockUpdaterService());
        }, 1 => 'triggerChangeSet'], 0);
        $instance->addListener('order_line_item.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? $this->getStockUpdaterService());
        }, 1 => 'lineItemWritten'], 0);
        $instance->addListener('order_line_item.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? $this->getStockUpdaterService());
        }, 1 => 'lineItemWritten'], 0);
        $instance->addListener('newsletter_recipient.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Newsletter\\Event\\Subscriber\\NewsletterRecipientDeletedSubscriber'] ?? $this->getNewsletterRecipientDeletedSubscriberService());
        }, 1 => 'onNewsletterRecipientDeleted'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'] ?? $this->getRuleValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('rule.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadSubscriber'] ?? $this->getRulePayloadSubscriberService());
        }, 1 => 'unserialize'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostInstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] ?? $this->getRuleIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] ?? $this->getRuleIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] ?? $this->getRuleIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] ?? $this->getRuleIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUninstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] ?? $this->getRuleIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('rule.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] ?? $this->getRuleIndexerService());
        }, 1 => 'onRuleWritten'], 0);
        $instance->addListener('app_script_condition.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater'] ?? $this->getRulePayloadUpdaterService());
        }, 1 => 'updatePayloads'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'] ?? $this->getRuleAreaUpdaterService());
        }, 1 => 'triggerChangeSet'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'] ?? $this->getRuleAreaUpdaterService());
        }, 1 => 'onEntityWritten'], 0);
        $instance->addListener('product_export.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener'] ?? $this->getProductExportEventListenerService());
        }, 1 => 'afterWrite'], 0);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\BeforeSystemConfigChangedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Cms\\Subscriber\\CmsPageDefaultChangeSubscriber'] ?? $this->getCmsPageDefaultChangeSubscriberService());
        }, 1 => 'validateChangeOfDefaultCmsPage'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\BeforeDeleteEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Cms\\Subscriber\\CmsPageDefaultChangeSubscriber'] ?? $this->getCmsPageDefaultChangeSubscriberService());
        }, 1 => 'beforeDeletion'], 0);
        $instance->addListener('action.mail.send', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'] ?? $this->getMailSendSubscriberService());
        }, 1 => 'sendMail'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\SystemDefaultValidator'] ?? $this->getSystemDefaultValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('media.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'] ?? $this->getMediaSerializerService());
        }, 1 => 'persistMedia'], 0);
        $instance->addListener('import_export_file.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\FileDeletedSubscriber'] ?? $this->getFileDeletedSubscriberService());
        }, 1 => 'onFileDeleted'], 0);
        $instance->addListener('Shopware\\Core\\Content\\ImportExport\\Event\\EnrichExportCriteriaEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\CategoryCriteriaSubscriber'] ?? ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\CategoryCriteriaSubscriber'] = new \Shopware\Core\Content\ImportExport\Event\Subscriber\CategoryCriteriaSubscriber()));
        }, 1 => 'enrich'], 0);
        $instance->addListener('Shopware\\Core\\Content\\ImportExport\\Event\\ImportExportBeforeImportRecordEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'] ?? $this->getProductCategoryPathsSubscriberService());
        }, 1 => 'categoryPathsToAssignment'], 0);
        $instance->addListener('Shopware\\Core\\Content\\ImportExport\\Event\\EnrichExportCriteriaEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCriteriaSubscriber'] ?? ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCriteriaSubscriber'] = new \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductCriteriaSubscriber()));
        }, 1 => 'enrich'], 0);
        $instance->addListener('Shopware\\Core\\Content\\ImportExport\\Event\\ImportExportAfterImportRecordEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'] ?? $this->getProductVariantsSubscriberService());
        }, 1 => 'onAfterImportRecord'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PostWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\LandingPage\\LandingPageValidator'] ?? $this->getLandingPageValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('action.add.order.tag', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'] ?? $this->getAddOrderTagActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.add.customer.tag', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'] ?? $this->getAddCustomerTagActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.remove.order.tag', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'] ?? $this->getRemoveOrderTagActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.remove.customer.tag', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'] ?? $this->getRemoveCustomerTagActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.change.customer.group', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'] ?? $this->getChangeCustomerGroupActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.change.customer.status', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'] ?? $this->getChangeCustomerStatusActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.grant.download.access', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'] ?? $this->getGrantDownloadAccessActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.mail.send', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'] ?? $this->getSendMailActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.generate.document', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'] ?? $this->getGenerateDocumentActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.set.order.state', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'] ?? $this->getSetOrderStateActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.set.customer.custom.field', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'] ?? $this->getSetCustomerCustomFieldActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.set.order.custom.field', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'] ?? $this->getSetOrderCustomFieldActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.set.customer.group.custom.field', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'] ?? $this->getSetCustomerGroupCustomFieldActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.add.customer.affiliate.and.campaign.code', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'] ?? $this->getAddCustomerAffiliateAndCampaignCodeActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.add.order.affiliate.and.campaign.code', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'] ?? $this->getAddOrderAffiliateAndCampaignCodeActionService());
        }, 1 => 'handle'], 0);
        $instance->addListener('action.stop.flow', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\StopFlowAction'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\StopFlowAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\StopFlowAction()));
        }, 1 => 'handle'], 0);
        $instance->addListener('flow.written', [0 => function () {
            return ($this->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'] ?? $this->getCachedFlowLoaderService());
        }, 1 => 'invalidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostInstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUninstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppInstalledEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppUpdatedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppActivatedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppDeletedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppDeactivatedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? $this->getFlowIndexerService());
        }, 1 => 'refreshPlugin'], 0);
        $instance->addListener('customer.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerDefaultSalutationSubscriber'] ?? $this->getCustomerDefaultSalutationSubscriberService());
        }, 1 => 'loaded'], 0);
        $instance->addListener('customer_address.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerDefaultSalutationSubscriber'] ?? $this->getCustomerDefaultSalutationSubscriberService());
        }, 1 => 'loaded'], 0);
        $instance->addListener('order_address.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerDefaultSalutationSubscriber'] ?? $this->getCustomerDefaultSalutationSubscriberService());
        }, 1 => 'loaded'], 0);
        $instance->addListener('Shopware\\Core\\System\\StateMachine\\Event\\StateMachineTransitionEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerMetaFieldSubscriber'] ?? $this->getCustomerMetaFieldSubscriberService());
        }, 1 => 'fillCustomerMetaDataFields'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerMetaFieldSubscriber'] ?? $this->getCustomerMetaFieldSubscriberService());
        }, 1 => 'deleteOrder'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLoginEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber'] ?? $this->getCustomerRemoteAddressSubscriberService());
        }, 1 => 'updateRemoteAddressByLogin'], 0);
        $instance->addListener('customer.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'] ?? $this->getCustomerTokenSubscriberService());
        }, 1 => 'onCustomerWritten'], 0);
        $instance->addListener('customer.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'] ?? $this->getCustomerTokenSubscriberService());
        }, 1 => 'onCustomerDeleted'], 0);
        $instance->addListener('customer_group_translation.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'] ?? $this->getCustomerGroupSubscriberService());
        }, 1 => 'updatedCustomerGroup'], 0);
        $instance->addListener('customer_group_registration_sales_channels.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'] ?? $this->getCustomerGroupSubscriberService());
        }, 1 => 'newSalesChannelAddedToCustomerGroup'], 0);
        $instance->addListener('customer_group_translation.deleted', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'] ?? $this->getCustomerGroupSubscriberService());
        }, 1 => 'deleteCustomerGroup'], 0);
        $instance->addListener('customer.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerChangePasswordSubscriber'] ?? $this->getCustomerChangePasswordSubscriberService());
        }, 1 => 'onCustomerWritten'], 0);
        $instance->addListener('customer.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'] ?? $this->getCustomerFlowEventsSubscriberService());
        }, 1 => 'onCustomerWritten'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\BeforeDeleteEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'] ?? $this->getCustomerBeforeDeleteSubscriberService());
        }, 1 => 'beforeDelete'], 0);
        $instance->addListener('document_base_config.written', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? $this->getDocumentConfigLoaderService());
        }, 1 => 'reset'], 0);
        $instance->addListener('state_machine.order.state_changed', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] ?? $this->getOrderStateChangeEventListenerService());
        }, 1 => 'onOrderStateChange'], 0);
        $instance->addListener('state_machine.order_delivery.state_changed', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] ?? $this->getOrderStateChangeEventListenerService());
        }, 1 => 'onOrderDeliveryStateChange'], 0);
        $instance->addListener('state_machine.order_transaction.state_changed', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] ?? $this->getOrderStateChangeEventListenerService());
        }, 1 => 'onOrderTransactionStateChange'], 0);
        $instance->addListener('collect.business-events', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] ?? $this->getOrderStateChangeEventListenerService());
        }, 1 => 'onAddStateEvents'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodValidator'] ?? $this->getPaymentMethodValidator2Service());
        }, 1 => 'validate'], 0);
        $instance->addListener('payment_method.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentHandlerIdentifierSubscriber'] ?? ($this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentHandlerIdentifierSubscriber'] = new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentHandlerIdentifierSubscriber()));
        }, 1 => 'formatHandlerIdentifier'], 0);
        $instance->addListener('payment_method.loaded', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentDistinguishableNameSubscriber'] ?? ($this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentDistinguishableNameSubscriber'] = new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentDistinguishableNameSubscriber()));
        }, 1 => 'addDistinguishablePaymentName'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Validator\\PromotionValidator'] ?? $this->getPromotionValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\BeforeLineItemAddedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'] ?? $this->getStorefrontCartSubscriberService());
        }, 1 => 'onLineItemAdded'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\BeforeLineItemRemovedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'] ?? $this->getStorefrontCartSubscriberService());
        }, 1 => 'onLineItemRemoved'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'] ?? $this->getStorefrontCartSubscriberService());
        }, 1 => 'resetCodes'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer'] ?? $this->getPromotionIndividualCodeRedeemerService());
        }, 1 => 'onOrderPlaced'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionRedemptionUpdater'] ?? $this->getPromotionRedemptionUpdaterService());
        }, 1 => 'orderPlaced'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [0 => function () {
            return ($this->privates['Shopware\\Core\\Checkout\\Shipping\\Validator\\ShippingMethodValidator'] ?? $this->getShippingMethodValidatorService());
        }, 1 => 'preValidate'], 0);
        $instance->addListener('sales_channel.deleted', [0 => function () {
            return ($this->privates['Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber'] ?? $this->getSalesChannelUserConfigSubscriberService());
        }, 1 => 'onSalesChannelDeleted'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator'] ?? $this->getCachedDomainLoaderInvalidatorService());
        }, 1 => 'invalidate'], 2000);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'startSession'], 40);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'maintenanceResolver'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'showHtmlExceptionResponse'], -100);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'customerNotLoggedInHandler'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'maintenanceResolver'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'preventPageLoadingFromXmlHttpRequest'], -20);
        $instance->addListener('Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLoginEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'updateSessionAfterLogin'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLogoutEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'updateSessionAfterLogout'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\BeforeSendResponseEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'replaceCsrfToken'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\BeforeSendResponseEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'setCanonicalUrl'], 0);
        $instance->addListener('Shopware\\Storefront\\Event\\StorefrontRenderEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'addHreflang'], 0);
        $instance->addListener('Shopware\\Storefront\\Event\\StorefrontRenderEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'addShopIdParameter'], 0);
        $instance->addListener('Shopware\\Storefront\\Event\\StorefrontRenderEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'addIconSetConfig'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Routing\\Event\\SalesChannelContextResolvedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? $this->getStorefrontSubscriberService());
        }, 1 => 'replaceContextToken'], 0);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'] ?? $this->getNotFoundSubscriberService());
        }, 1 => 'onSystemConfigChanged'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener'] ?? $this->getCsrfRouteListenerService());
        }, 1 => 'csrfCheck'], -9);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\AffiliateTracking\\AffiliateTrackingListener'] ?? ($this->privates['Shopware\\Storefront\\Framework\\AffiliateTracking\\AffiliateTrackingListener'] = new \Shopware\Storefront\Framework\AffiliateTracking\AffiliateTrackingListener()));
        }, 1 => 'checkAffiliateTracking'], -21);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] ?? $this->getCacheResponseSubscriberService());
        }, 1 => 'addHttpCacheToCoreRoutes'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] ?? $this->getCacheResponseSubscriberService());
        }, 1 => 'setResponseCache'], -1500);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\BeforeSendResponseEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] ?? $this->getCacheResponseSubscriberService());
        }, 1 => 'updateCacheControlForBrowser'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'] ?? $this->getCaptchaRouteListenerService());
        }, 1 => 'validateCaptcha'], -20);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Routing\\ResponseHeaderListener'] ?? ($this->privates['Shopware\\Storefront\\Framework\\Routing\\ResponseHeaderListener'] = new \Shopware\Storefront\Framework\Routing\ResponseHeaderListener()));
        }, 1 => 'onResponse'], -10);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CartMergedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Event\\CartMergedSubscriber'] ?? $this->getCartMergedSubscriberService());
        }, 1 => 'addCartMergedNoticeFlash'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] ?? $this->getSeoUrlUpdateListenerService());
        }, 1 => 'updateProductUrls'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Category\\Event\\CategoryIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] ?? $this->getSeoUrlUpdateListenerService());
        }, 1 => 'updateCategoryUrls'], 0);
        $instance->addListener('Shopware\\Core\\Content\\LandingPage\\Event\\LandingPageIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] ?? $this->getSeoUrlUpdateListenerService());
        }, 1 => 'updateLandingPageUrls'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] ?? $this->getSeoUrlUpdateListenerService());
        }, 1 => 'detectSalesChannelEntryPoints'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeConfigChangedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'] ?? $this->getCachedResolvedConfigLoaderInvalidatorService());
        }, 1 => 'invalidate'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeAssignedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'] ?? $this->getCachedResolvedConfigLoaderInvalidatorService());
        }, 1 => 'assigned'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeConfigResetEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'] ?? $this->getCachedResolvedConfigLoaderInvalidatorService());
        }, 1 => 'reset'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppUpdatedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] ?? $this->getThemeAppLifecycleHandlerService());
        }, 1 => 'handleAppActivationOrUpdate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppActivatedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] ?? $this->getThemeAppLifecycleHandlerService());
        }, 1 => 'handleAppActivationOrUpdate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppDeactivatedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] ?? $this->getThemeAppLifecycleHandlerService());
        }, 1 => 'handleUninstall'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeConfigChangedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] ?? $this->getStaticFileConfigDumperService());
        }, 1 => 'dumpConfigFromEvent'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeAssignedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] ?? $this->getStaticFileConfigDumperService());
        }, 1 => 'dumpConfigFromEvent'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeConfigResetEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] ?? $this->getStaticFileConfigDumperService());
        }, 1 => 'dumpConfigFromEvent'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPreActivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriber2Service());
        }, 1 => 'pluginActivate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriber2Service());
        }, 1 => 'pluginPostActivate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPreUpdateEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriber2Service());
        }, 1 => 'pluginUpdate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPreDeactivateEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriber2Service());
        }, 1 => 'pluginDeactivateAndUninstall'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivationFailedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriber2Service());
        }, 1 => 'pluginPostDeactivateFailed'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPreUninstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriber2Service());
        }, 1 => 'pluginDeactivateAndUninstall'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUninstallEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? $this->getPluginLifecycleSubscriber2Service());
        }, 1 => 'pluginPostUninstall'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppDeletedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'] ?? $this->getAppLifecycleSubscriberService());
        }, 1 => 'onAppDeleted'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeCompilerEnrichScssVariablesEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber'] ?? $this->getThemeCompilerEnrichScssVarSubscriberService());
        }, 1 => 'enrichExtensionVars'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? $this->getThemeNamespaceHierarchyBuilderService());
        }, 1 => 'requestEvent'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? $this->getThemeNamespaceHierarchyBuilderService());
        }, 1 => 'requestEvent'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Document\\Event\\DocumentTemplateRendererParameterEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? $this->getThemeNamespaceHierarchyBuilderService());
        }, 1 => 'onDocumentRendering'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Store\\Event\\FirstRunWizardFinishedEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'] ?? $this->getFirstRunWizardSubscriberService());
        }, 1 => 'frwFinished'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [0 => function () {
            return ($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'] ?? $this->getUpdateSubscriberService());
        }, 1 => 'updateFinished'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [0 => function () {
            return ($this->privates['Shopware\\Elasticsearch\\Product\\ProductUpdater'] ?? $this->getProductUpdaterService());
        }, 1 => 'update'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'] ?? $this->getCustomFieldUpdaterService());
        }, 1 => 'onNewCustomFieldCreated'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressStartedEvent', [0 => function () {
            return ($this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] ?? $this->getElasticsearchAdminIndexingCommandService());
        }, 1 => 'startProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressAdvancedEvent', [0 => function () {
            return ($this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] ?? $this->getElasticsearchAdminIndexingCommandService());
        }, 1 => 'advanceProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressFinishedEvent', [0 => function () {
            return ($this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] ?? $this->getElasticsearchAdminIndexingCommandService());
        }, 1 => 'finishProgress'], 0);
        $instance->addListener('sales_channel_language.written', [0 => function () {
            return ($this->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'] ?? $this->getLanguageSubscriberService());
        }, 1 => 'onSalesChannelWritten'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\RefreshIndexEvent', [0 => function () {
            return ($this->privates['Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber'] ?? $this->getRefreshIndexSubscriberService());
        }, 1 => 'handled'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [0 => function () {
            return ($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? $this->getAdminSearchRegistryService());
        }, 1 => 'refresh'], -1000);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['response_listener'] ?? ($this->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['streamed_response_listener'] ?? ($this->privates['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener()));
        }, 1 => 'onKernelResponse'], -1024);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['validate_request_listener'] ?? ($this->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()));
        }, 1 => 'onKernelRequest'], 256);
        $instance->addListener('kernel.controller_arguments', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'onKernelException'], -128);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['exception_listener'] ?? $this->getExceptionListenerService());
        }, 1 => 'removeCspHeader'], -128);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['locale_aware_listener'] ?? $this->getLocaleAwareListenerService());
        }, 1 => 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['locale_aware_listener'] ?? $this->getLocaleAwareListenerService());
        }, 1 => 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [0 => function () {
            return ($this->privates['console.error_listener'] ?? $this->getConsole_ErrorListenerService());
        }, 1 => 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [0 => function () {
            return ($this->privates['console.error_listener'] ?? $this->getConsole_ErrorListenerService());
        }, 1 => 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [0 => function () {
            return ($this->privates['console.suggest_missing_package_subscriber'] ?? ($this->privates['console.suggest_missing_package_subscriber'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()));
        }, 1 => 'onConsoleError'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => function () {
            return ($this->privates['mailer.envelope_listener'] ?? ($this->privates['mailer.envelope_listener'] = new \Symfony\Component\Mailer\EventListener\EnvelopeListener(NULL, NULL)));
        }, 1 => 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => function () {
            return ($this->privates['mailer.message_logger_listener'] ?? ($this->privates['mailer.message_logger_listener'] = new \Symfony\Component\Mailer\EventListener\MessageLoggerListener()));
        }, 1 => 'onMessage'], -255);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['esi_listener'] ?? $this->getEsiListenerService());
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['fragment.listener'] ?? $this->getFragment_ListenerService());
        }, 1 => 'onKernelRequest'], 48);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
        }, 1 => 'configure'], 2048);
        $instance->addListener('console.command', [0 => function () {
            return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
        }, 1 => 'configure'], 2048);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [0 => function () {
            return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
        }, 1 => 'onKernelException'], -64);
        $instance->addListener('kernel.request', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onKernelResponse'], -1000);
        $instance->addListener('kernel.finish_request', [0 => function () {
            return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
        }, 1 => 'onFinishRequest'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['messenger.retry.send_failed_message_for_retry_listener'] ?? $this->getMessenger_Retry_SendFailedMessageForRetryListenerService());
        }, 1 => 'onMessageFailed'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['messenger.failure.add_error_details_stamp_listener'] ?? ($this->privates['messenger.failure.add_error_details_stamp_listener'] = new \Symfony\Component\Messenger\EventListener\AddErrorDetailsStampListener()));
        }, 1 => 'onMessageFailed'], 200);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $this->getMessenger_Listener_StopWorkerOnRestartSignalListenerService());
        }, 1 => 'onWorkerStarted'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? $this->getMessenger_Listener_StopWorkerOnRestartSignalListenerService());
        }, 1 => 'onWorkerRunning'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ?? ($this->privates['messenger.listener.stop_worker_on_stop_exception_listener'] = new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()));
        }, 1 => 'onMessageFailed'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [0 => function () {
            return ($this->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ?? ($this->privates['messenger.listener.stop_worker_on_stop_exception_listener'] = new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()));
        }, 1 => 'onWorkerRunning'], 0);
        $instance->addListener('console.command', [0 => function () {
            return ($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService());
        }, 1 => 'onCommand'], 255);
        $instance->addListener('console.terminate', [0 => function () {
            return ($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService());
        }, 1 => 'onTerminate'], -255);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.controller.listener'] ?? $this->getSensioFrameworkExtra_Controller_ListenerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.converter.listener'] ?? $this->getSensioFrameworkExtra_Converter_ListenerService());
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
        }, 1 => 'onKernelController'], -128);
        $instance->addListener('kernel.view', [0 => function () {
            return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
        }, 1 => 'onKernelView'], 0);
        $instance->addListener('kernel.controller', [0 => function () {
            return ($this->privates['sensio_framework_extra.cache.listener'] ?? ($this->privates['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener()));
        }, 1 => 'onKernelController'], 0);
        $instance->addListener('kernel.response', [0 => function () {
            return ($this->privates['sensio_framework_extra.cache.listener'] ?? ($this->privates['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener()));
        }, 1 => 'onKernelResponse'], 0);
        $instance->addListener('kernel.controller_arguments', [0 => function () {
            return ($this->privates['framework_extra_bundle.event.is_granted'] ?? $this->getFrameworkExtraBundle_Event_IsGrantedService());
        }, 1 => 'onKernelControllerArguments'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [0 => function () {
            return ($this->privates['twig.mailer.message_listener'] ?? $this->getTwig_Mailer_MessageListenerService());
        }, 1 => 'onMessage'], 0);
        $instance->addListener('kernel.terminate', [0 => function () {
            return ($this->privates['enqueue.client.default.flush_spool_producer_listener'] ?? $this->getEnqueue_Client_Default_FlushSpoolProducerListenerService());
        }, 1 => 'flushMessages'], 0);
        $instance->addListener('console.terminate', [0 => function () {
            return ($this->privates['enqueue.client.default.flush_spool_producer_listener'] ?? $this->getEnqueue_Client_Default_FlushSpoolProducerListenerService());
        }, 1 => 'flushMessages'], 0);

        return $instance;
    }

    /*
     * Gets the public 'flow.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getFlow_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['flow.repository'])) {
            return $this->services['flow.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['flow.repository'])) {
            return $this->services['flow.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['flow.repository'])) {
            return $this->services['flow.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['flow.repository'])) {
            return $this->services['flow.repository'];
        }

        return $this->services['flow.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Flow\\FlowDefinition'] ?? $this->getFlowDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'flow_sequence.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getFlowSequence_RepositoryService()
    {
        return $this->services['flow_sequence.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition'] ?? $this->getFlowSequenceDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'flow_template.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getFlowTemplate_RepositoryService()
    {
        return $this->services['flow_template.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition'] ?? $this->getFlowTemplateDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'framework.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getFramework_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['framework.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/framework');
    }

    /*
     * Gets the public 'framework.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getFramework_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['framework.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/framework');
    }

    /*
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected function getHttpKernelService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['http_kernel'])) {
            return $this->services['http_kernel'];
        }

        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService())), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($this->privates['argument_metadata_factory'] ?? ($this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory())), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\CustomerValueResolver'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\CustomerValueResolver'] = new \Shopware\Core\Checkout\Customer\CustomerValueResolver()));
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartValueResolver'] ?? $this->getCartValueResolverService());
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Routing\\QueryDataBagResolver'] ?? ($this->privates['Shopware\\Core\\Framework\\Routing\\QueryDataBagResolver'] = new \Shopware\Core\Framework\Routing\QueryDataBagResolver()));
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\Routing\\RequestDataBagResolver'] ?? ($this->privates['Shopware\\Core\\Framework\\Routing\\RequestDataBagResolver'] = new \Shopware\Core\Framework\Routing\RequestDataBagResolver()));
            yield 4 => ($this->privates['Shopware\\Core\\Framework\\Api\\Context\\ContextValueResolver'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\Context\\ContextValueResolver'] = new \Shopware\Core\Framework\Api\Context\ContextValueResolver()));
            yield 5 => ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextValueResolver'] ?? ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextValueResolver'] = new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextValueResolver()));
            yield 6 => ($this->privates['argument_resolver.request_attribute'] ?? ($this->privates['argument_resolver.request_attribute'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver()));
            yield 7 => ($this->privates['Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver'] ?? $this->getResponseFactoryInterfaceValueResolverService());
            yield 8 => ($this->privates['argument_resolver.request'] ?? ($this->privates['argument_resolver.request'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver()));
            yield 9 => ($this->privates['argument_resolver.session'] ?? ($this->privates['argument_resolver.session'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver()));
            yield 10 => ($this->privates['Shopware\\Core\\Framework\\Routing\\Annotation\\CriteriaValueResolver'] ?? $this->getCriteriaValueResolverService());
            yield 11 => ($this->privates['argument_resolver.service'] ?? $this->getArgumentResolver_ServiceService());
            yield 12 => ($this->privates['argument_resolver.default'] ?? ($this->privates['argument_resolver.default'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver()));
            yield 13 => ($this->privates['argument_resolver.variadic'] ?? ($this->privates['argument_resolver.variadic'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver()));
        }, 14)));
    }

    /*
     * Gets the public 'import_export_file.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getImportExportFile_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['import_export_file.repository'])) {
            return $this->services['import_export_file.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['import_export_file.repository'])) {
            return $this->services['import_export_file.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['import_export_file.repository'])) {
            return $this->services['import_export_file.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['import_export_file.repository'])) {
            return $this->services['import_export_file.repository'];
        }

        return $this->services['import_export_file.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition'] ?? $this->getImportExportFileDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'import_export_log.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getImportExportLog_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['import_export_log.repository'])) {
            return $this->services['import_export_log.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['import_export_log.repository'])) {
            return $this->services['import_export_log.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['import_export_log.repository'])) {
            return $this->services['import_export_log.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['import_export_log.repository'])) {
            return $this->services['import_export_log.repository'];
        }

        return $this->services['import_export_log.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition'] ?? $this->getImportExportLogDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'import_export_profile.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getImportExportProfile_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['import_export_profile.repository'])) {
            return $this->services['import_export_profile.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['import_export_profile.repository'])) {
            return $this->services['import_export_profile.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['import_export_profile.repository'])) {
            return $this->services['import_export_profile.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['import_export_profile.repository'])) {
            return $this->services['import_export_profile.repository'];
        }

        return $this->services['import_export_profile.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition'] ?? $this->getImportExportProfileDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'import_export_profile_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getImportExportProfileTranslation_RepositoryService()
    {
        return $this->services['import_export_profile_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition'] ?? $this->getImportExportProfileTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'integration.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getIntegration_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['integration.repository'])) {
            return $this->services['integration.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['integration.repository'])) {
            return $this->services['integration.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['integration.repository'])) {
            return $this->services['integration.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['integration.repository'])) {
            return $this->services['integration.repository'];
        }

        return $this->services['integration.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Integration\\IntegrationDefinition'] ?? $this->getIntegrationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'integration_role.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getIntegrationRole_RepositoryService()
    {
        return $this->services['integration_role.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition'] ?? $this->getIntegrationRoleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'landing_page.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getLandingPage_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['landing_page.repository'])) {
            return $this->services['landing_page.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['landing_page.repository'])) {
            return $this->services['landing_page.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['landing_page.repository'])) {
            return $this->services['landing_page.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['landing_page.repository'])) {
            return $this->services['landing_page.repository'];
        }

        return $this->services['landing_page.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition'] ?? $this->getLandingPageDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'landing_page_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getLandingPageSalesChannel_RepositoryService()
    {
        return $this->services['landing_page_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition'] ?? $this->getLandingPageSalesChannelDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'landing_page_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getLandingPageTag_RepositoryService()
    {
        return $this->services['landing_page_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition'] ?? $this->getLandingPageTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'landing_page_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getLandingPageTranslation_RepositoryService()
    {
        return $this->services['landing_page_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition'] ?? $this->getLandingPageTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'language.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getLanguage_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['language.repository'])) {
            return $this->services['language.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['language.repository'])) {
            return $this->services['language.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['language.repository'])) {
            return $this->services['language.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['language.repository'])) {
            return $this->services['language.repository'];
        }

        return $this->services['language.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Language\\LanguageDefinition'] ?? $this->getLanguageDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'locale.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getLocale_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['locale.repository'])) {
            return $this->services['locale.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['locale.repository'])) {
            return $this->services['locale.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['locale.repository'])) {
            return $this->services['locale.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['locale.repository'])) {
            return $this->services['locale.repository'];
        }

        return $this->services['locale.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Locale\\LocaleDefinition'] ?? $this->getLocaleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'locale_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getLocaleTranslation_RepositoryService()
    {
        return $this->services['locale_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition'] ?? $this->getLocaleTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'log_entry.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getLogEntry_RepositoryService()
    {
        return $this->services['log_entry.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Log\\LogEntryDefinition'] ?? $this->getLogEntryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'mail_header_footer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMailHeaderFooter_RepositoryService()
    {
        return $this->services['mail_header_footer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] ?? $this->getMailHeaderFooterDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'mail_header_footer_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMailHeaderFooterTranslation_RepositoryService()
    {
        return $this->services['mail_header_footer_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition'] ?? $this->getMailHeaderFooterTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'mail_template.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMailTemplate_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['mail_template.repository'])) {
            return $this->services['mail_template.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['mail_template.repository'])) {
            return $this->services['mail_template.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['mail_template.repository'])) {
            return $this->services['mail_template.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mail_template.repository'])) {
            return $this->services['mail_template.repository'];
        }

        return $this->services['mail_template.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] ?? $this->getMailTemplateDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'mail_template_media.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMailTemplateMedia_RepositoryService()
    {
        return $this->services['mail_template_media.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition'] ?? $this->getMailTemplateMediaDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'mail_template_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMailTemplateTranslation_RepositoryService()
    {
        return $this->services['mail_template_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition'] ?? $this->getMailTemplateTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'mail_template_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMailTemplateType_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['mail_template_type.repository'])) {
            return $this->services['mail_template_type.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['mail_template_type.repository'])) {
            return $this->services['mail_template_type.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['mail_template_type.repository'])) {
            return $this->services['mail_template_type.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['mail_template_type.repository'])) {
            return $this->services['mail_template_type.repository'];
        }

        return $this->services['mail_template_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition'] ?? $this->getMailTemplateTypeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'mail_template_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMailTemplateTypeTranslation_RepositoryService()
    {
        return $this->services['mail_template_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition'] ?? $this->getMailTemplateTypeTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'main_category.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMainCategory_RepositoryService()
    {
        return $this->services['main_category.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition'] ?? $this->getMainCategoryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'maintenance.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getMaintenance_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['maintenance.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/maintenance');
    }

    /*
     * Gets the public 'maintenance.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getMaintenance_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['maintenance.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/maintenance');
    }

    /*
     * Gets the public 'media.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMedia_RepositoryService()
    {
        $a = ($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'] ?? $this->getMediaRepositoryDecoratorService());

        if (isset($this->services['media.repository'])) {
            return $this->services['media.repository'];
        }

        return $this->services['media.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator($a);
    }

    /*
     * Gets the public 'media_default_folder.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMediaDefaultFolder_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['media_default_folder.repository'])) {
            return $this->services['media_default_folder.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['media_default_folder.repository'])) {
            return $this->services['media_default_folder.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['media_default_folder.repository'])) {
            return $this->services['media_default_folder.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['media_default_folder.repository'])) {
            return $this->services['media_default_folder.repository'];
        }

        return $this->services['media_default_folder.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition'] ?? $this->getMediaDefaultFolderDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'media_folder.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMediaFolder_RepositoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaFolderRepositoryDecorator.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['media_folder.repository'])) {
            return $this->services['media_folder.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['media_folder.repository'])) {
            return $this->services['media_folder.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['media_folder.repository'])) {
            return $this->services['media_folder.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['media_folder.repository'])) {
            return $this->services['media_folder.repository'];
        }

        return $this->services['media_folder.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderRepositoryDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition'] ?? $this->getMediaFolderDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()))));
    }

    /*
     * Gets the public 'media_folder_configuration.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMediaFolderConfiguration_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['media_folder_configuration.repository'])) {
            return $this->services['media_folder_configuration.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['media_folder_configuration.repository'])) {
            return $this->services['media_folder_configuration.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['media_folder_configuration.repository'])) {
            return $this->services['media_folder_configuration.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['media_folder_configuration.repository'])) {
            return $this->services['media_folder_configuration.repository'];
        }

        return $this->services['media_folder_configuration.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition'] ?? $this->getMediaFolderConfigurationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'media_folder_configuration_media_thumbnail_size.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMediaFolderConfigurationMediaThumbnailSize_RepositoryService()
    {
        return $this->services['media_folder_configuration_media_thumbnail_size.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition'] ?? $this->getMediaFolderConfigurationMediaThumbnailSizeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'media_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMediaTag_RepositoryService()
    {
        return $this->services['media_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition'] ?? $this->getMediaTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'media_thumbnail.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMediaThumbnail_RepositoryService()
    {
        $a = ($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'] ?? $this->getMediaThumbnailRepositoryDecoratorService());

        if (isset($this->services['media_thumbnail.repository'])) {
            return $this->services['media_thumbnail.repository'];
        }

        return $this->services['media_thumbnail.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator($a);
    }

    /*
     * Gets the public 'media_thumbnail_size.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMediaThumbnailSize_RepositoryService()
    {
        return $this->services['media_thumbnail_size.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition'] ?? $this->getMediaThumbnailSizeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'media_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMediaTranslation_RepositoryService()
    {
        return $this->services['media_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition'] ?? $this->getMediaTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'message_queue_stats.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getMessageQueueStats_RepositoryService()
    {
        return $this->services['message_queue_stats.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\MessageQueue\\MessageQueueStatsDefinition'] ?? $this->getMessageQueueStatsDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'messenger.default_bus' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Monitoring\MonitoringBusDecorator
     */
    protected function getMessenger_DefaultBusService()
    {
        return $this->services['messenger.default_bus'] = new \Shopware\Core\Framework\MessageQueue\Monitoring\MonitoringBusDecorator(new \Symfony\Component\Messenger\MessageBus(new RewindableGenerator(function () {
            yield 0 => ($this->privates['messenger.bus.shopware.middleware.add_bus_name_stamp_middleware'] ?? ($this->privates['messenger.bus.shopware.middleware.add_bus_name_stamp_middleware'] = new \Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware('messenger.bus.shopware')));
            yield 1 => ($this->privates['messenger.middleware.reject_redelivered_message_middleware'] ?? ($this->privates['messenger.middleware.reject_redelivered_message_middleware'] = new \Symfony\Component\Messenger\Middleware\RejectRedeliveredMessageMiddleware()));
            yield 2 => ($this->privates['messenger.middleware.dispatch_after_current_bus'] ?? ($this->privates['messenger.middleware.dispatch_after_current_bus'] = new \Symfony\Component\Messenger\Middleware\DispatchAfterCurrentBusMiddleware()));
            yield 3 => ($this->privates['messenger.middleware.failed_message_processing_middleware'] ?? ($this->privates['messenger.middleware.failed_message_processing_middleware'] = new \Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware()));
            yield 4 => ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Middleware\\RetryMiddleware'] ?? $this->getRetryMiddlewareService());
            yield 5 => ($this->privates['messenger.middleware.send_message'] ?? $this->getMessenger_Middleware_SendMessageService());
            yield 6 => ($this->privates['messenger.bus.shopware.middleware.handle_message'] ?? $this->getMessenger_Bus_Shopware_Middleware_HandleMessageService());
        }, 7)), 'default', ($this->services['shopware.increment.gateway.registry'] ?? $this->getShopware_Increment_Gateway_RegistryService()));
    }

    /*
     * Gets the public 'monolog.logger.business_events' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_BusinessEventsService()
    {
        $this->services['monolog.logger.business_events'] = $instance = new \Symfony\Bridge\Monolog\Logger('business_events');

        $instance->pushHandler(($this->privates['monolog.handler.business_event_handler_buffer'] ?? $this->getMonolog_Handler_BusinessEventHandlerBufferService()));
        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        return $instance;
    }

    /*
     * Gets the public 'newsletter_recipient.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNewsletterRecipient_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['newsletter_recipient.repository'])) {
            return $this->services['newsletter_recipient.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['newsletter_recipient.repository'])) {
            return $this->services['newsletter_recipient.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['newsletter_recipient.repository'])) {
            return $this->services['newsletter_recipient.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['newsletter_recipient.repository'])) {
            return $this->services['newsletter_recipient.repository'];
        }

        return $this->services['newsletter_recipient.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition'] ?? $this->getNewsletterRecipientDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'newsletter_recipient_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNewsletterRecipientTag_RepositoryService()
    {
        return $this->services['newsletter_recipient_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition'] ?? $this->getNewsletterRecipientTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'notification.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNotification_RepositoryService()
    {
        return $this->services['notification.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Administration\\Notification\\NotificationDefinition'] ?? $this->getNotificationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'number_range.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNumberRange_RepositoryService()
    {
        return $this->services['number_range.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition'] ?? $this->getNumberRangeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'number_range_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNumberRangeSalesChannel_RepositoryService()
    {
        return $this->services['number_range_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition'] ?? $this->getNumberRangeSalesChannelDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'number_range_state.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNumberRangeState_RepositoryService()
    {
        return $this->services['number_range_state.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition'] ?? $this->getNumberRangeStateDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'number_range_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNumberRangeTranslation_RepositoryService()
    {
        return $this->services['number_range_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition'] ?? $this->getNumberRangeTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'number_range_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNumberRangeType_RepositoryService()
    {
        return $this->services['number_range_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition'] ?? $this->getNumberRangeTypeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'number_range_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getNumberRangeTypeTranslation_RepositoryService()
    {
        return $this->services['number_range_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition'] ?? $this->getNumberRangeTypeTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrder_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['order.repository'])) {
            return $this->services['order.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['order.repository'])) {
            return $this->services['order.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['order.repository'])) {
            return $this->services['order.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['order.repository'])) {
            return $this->services['order.repository'];
        }

        return $this->services['order.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] ?? $this->getOrderDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_address.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderAddress_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['order_address.repository'])) {
            return $this->services['order_address.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['order_address.repository'])) {
            return $this->services['order_address.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['order_address.repository'])) {
            return $this->services['order_address.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['order_address.repository'])) {
            return $this->services['order_address.repository'];
        }

        return $this->services['order_address.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition'] ?? $this->getOrderAddressDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_customer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderCustomer_RepositoryService()
    {
        return $this->services['order_customer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition'] ?? $this->getOrderCustomerDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_delivery.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderDelivery_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['order_delivery.repository'])) {
            return $this->services['order_delivery.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['order_delivery.repository'])) {
            return $this->services['order_delivery.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['order_delivery.repository'])) {
            return $this->services['order_delivery.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['order_delivery.repository'])) {
            return $this->services['order_delivery.repository'];
        }

        return $this->services['order_delivery.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition'] ?? $this->getOrderDeliveryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_delivery_position.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderDeliveryPosition_RepositoryService()
    {
        return $this->services['order_delivery_position.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition'] ?? $this->getOrderDeliveryPositionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_line_item.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderLineItem_RepositoryService()
    {
        return $this->services['order_line_item.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition'] ?? $this->getOrderLineItemDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_line_item_download.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderLineItemDownload_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['order_line_item_download.repository'])) {
            return $this->services['order_line_item_download.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['order_line_item_download.repository'])) {
            return $this->services['order_line_item_download.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['order_line_item_download.repository'])) {
            return $this->services['order_line_item_download.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['order_line_item_download.repository'])) {
            return $this->services['order_line_item_download.repository'];
        }

        return $this->services['order_line_item_download.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition'] ?? $this->getOrderLineItemDownloadDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderTag_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['order_tag.repository'])) {
            return $this->services['order_tag.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['order_tag.repository'])) {
            return $this->services['order_tag.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['order_tag.repository'])) {
            return $this->services['order_tag.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['order_tag.repository'])) {
            return $this->services['order_tag.repository'];
        }

        return $this->services['order_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition'] ?? $this->getOrderTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_transaction.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderTransaction_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['order_transaction.repository'])) {
            return $this->services['order_transaction.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['order_transaction.repository'])) {
            return $this->services['order_transaction.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['order_transaction.repository'])) {
            return $this->services['order_transaction.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['order_transaction.repository'])) {
            return $this->services['order_transaction.repository'];
        }

        return $this->services['order_transaction.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition'] ?? $this->getOrderTransactionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_transaction_capture.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderTransactionCapture_RepositoryService()
    {
        return $this->services['order_transaction_capture.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition'] ?? $this->getOrderTransactionCaptureDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_transaction_capture_refund.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderTransactionCaptureRefund_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['order_transaction_capture_refund.repository'])) {
            return $this->services['order_transaction_capture_refund.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['order_transaction_capture_refund.repository'])) {
            return $this->services['order_transaction_capture_refund.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['order_transaction_capture_refund.repository'])) {
            return $this->services['order_transaction_capture_refund.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['order_transaction_capture_refund.repository'])) {
            return $this->services['order_transaction_capture_refund.repository'];
        }

        return $this->services['order_transaction_capture_refund.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition'] ?? $this->getOrderTransactionCaptureRefundDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'order_transaction_capture_refund_position.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getOrderTransactionCaptureRefundPosition_RepositoryService()
    {
        return $this->services['order_transaction_capture_refund_position.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition'] ?? $this->getOrderTransactionCaptureRefundPositionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'payment_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPaymentMethod_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['payment_method.repository'])) {
            return $this->services['payment_method.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['payment_method.repository'])) {
            return $this->services['payment_method.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['payment_method.repository'])) {
            return $this->services['payment_method.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['payment_method.repository'])) {
            return $this->services['payment_method.repository'];
        }

        return $this->services['payment_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodRepositoryDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition'] ?? $this->getPaymentMethodDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()))));
    }

    /*
     * Gets the public 'payment_method_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPaymentMethodTranslation_RepositoryService()
    {
        return $this->services['payment_method_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition'] ?? $this->getPaymentMethodTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'plugin.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPlugin_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['plugin.repository'])) {
            return $this->services['plugin.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['plugin.repository'])) {
            return $this->services['plugin.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['plugin.repository'])) {
            return $this->services['plugin.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['plugin.repository'])) {
            return $this->services['plugin.repository'];
        }

        return $this->services['plugin.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Plugin\\PluginDefinition'] ?? $this->getPluginDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'plugin_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPluginTranslation_RepositoryService()
    {
        return $this->services['plugin_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition'] ?? $this->getPluginTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProduct_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product.repository'])) {
            return $this->services['product.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product.repository'])) {
            return $this->services['product.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product.repository'])) {
            return $this->services['product.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product.repository'])) {
            return $this->services['product.repository'];
        }
        $e = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService());

        $f = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, $e);
        $f->setEntityLoadedEventFactory($e);

        return $this->services['product.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator($f);
    }

    /*
     * Gets the public 'product_category.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductCategory_RepositoryService()
    {
        return $this->services['product_category.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition'] ?? $this->getProductCategoryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_category_tree.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductCategoryTree_RepositoryService()
    {
        return $this->services['product_category_tree.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition'] ?? $this->getProductCategoryTreeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_configurator_setting.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductConfiguratorSetting_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_configurator_setting.repository'])) {
            return $this->services['product_configurator_setting.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_configurator_setting.repository'])) {
            return $this->services['product_configurator_setting.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_configurator_setting.repository'])) {
            return $this->services['product_configurator_setting.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_configurator_setting.repository'])) {
            return $this->services['product_configurator_setting.repository'];
        }

        return $this->services['product_configurator_setting.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition'] ?? $this->getProductConfiguratorSettingDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_cross_selling.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductCrossSelling_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_cross_selling.repository'])) {
            return $this->services['product_cross_selling.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_cross_selling.repository'])) {
            return $this->services['product_cross_selling.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_cross_selling.repository'])) {
            return $this->services['product_cross_selling.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_cross_selling.repository'])) {
            return $this->services['product_cross_selling.repository'];
        }

        return $this->services['product_cross_selling.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition'] ?? $this->getProductCrossSellingDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_cross_selling_assigned_products.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductCrossSellingAssignedProducts_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_cross_selling_assigned_products.repository'])) {
            return $this->services['product_cross_selling_assigned_products.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_cross_selling_assigned_products.repository'])) {
            return $this->services['product_cross_selling_assigned_products.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_cross_selling_assigned_products.repository'])) {
            return $this->services['product_cross_selling_assigned_products.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_cross_selling_assigned_products.repository'])) {
            return $this->services['product_cross_selling_assigned_products.repository'];
        }

        return $this->services['product_cross_selling_assigned_products.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition'] ?? $this->getProductCrossSellingAssignedProductsDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_cross_selling_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductCrossSellingTranslation_RepositoryService()
    {
        return $this->services['product_cross_selling_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition'] ?? $this->getProductCrossSellingTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_custom_field_set.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductCustomFieldSet_RepositoryService()
    {
        return $this->services['product_custom_field_set.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition'] ?? $this->getProductCustomFieldSetDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_download.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductDownload_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_download.repository'])) {
            return $this->services['product_download.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_download.repository'])) {
            return $this->services['product_download.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_download.repository'])) {
            return $this->services['product_download.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_download.repository'])) {
            return $this->services['product_download.repository'];
        }

        return $this->services['product_download.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition'] ?? $this->getProductDownloadDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_export.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductExport_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_export.repository'])) {
            return $this->services['product_export.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_export.repository'])) {
            return $this->services['product_export.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_export.repository'])) {
            return $this->services['product_export.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_export.repository'])) {
            return $this->services['product_export.repository'];
        }

        return $this->services['product_export.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition'] ?? $this->getProductExportDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_feature_set.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductFeatureSet_RepositoryService()
    {
        return $this->services['product_feature_set.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition'] ?? $this->getProductFeatureSetDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_feature_set_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductFeatureSetTranslation_RepositoryService()
    {
        return $this->services['product_feature_set_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition'] ?? $this->getProductFeatureSetTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_keyword_dictionary.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductKeywordDictionary_RepositoryService()
    {
        return $this->services['product_keyword_dictionary.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition'] ?? $this->getProductKeywordDictionaryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_manufacturer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductManufacturer_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_manufacturer.repository'])) {
            return $this->services['product_manufacturer.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_manufacturer.repository'])) {
            return $this->services['product_manufacturer.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_manufacturer.repository'])) {
            return $this->services['product_manufacturer.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_manufacturer.repository'])) {
            return $this->services['product_manufacturer.repository'];
        }

        return $this->services['product_manufacturer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] ?? $this->getProductManufacturerDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_manufacturer_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductManufacturerTranslation_RepositoryService()
    {
        return $this->services['product_manufacturer_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition'] ?? $this->getProductManufacturerTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_media.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductMedia_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_media.repository'])) {
            return $this->services['product_media.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_media.repository'])) {
            return $this->services['product_media.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_media.repository'])) {
            return $this->services['product_media.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_media.repository'])) {
            return $this->services['product_media.repository'];
        }

        return $this->services['product_media.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition'] ?? $this->getProductMediaDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_option.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductOption_RepositoryService()
    {
        return $this->services['product_option.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition'] ?? $this->getProductOptionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_price.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductPrice_RepositoryService()
    {
        return $this->services['product_price.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition'] ?? $this->getProductPriceDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_property.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductProperty_RepositoryService()
    {
        return $this->services['product_property.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition'] ?? $this->getProductPropertyDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_review.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductReview_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_review.repository'])) {
            return $this->services['product_review.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_review.repository'])) {
            return $this->services['product_review.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_review.repository'])) {
            return $this->services['product_review.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_review.repository'])) {
            return $this->services['product_review.repository'];
        }

        return $this->services['product_review.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] ?? $this->getProductReviewDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_search_config.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductSearchConfig_RepositoryService()
    {
        return $this->services['product_search_config.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition'] ?? $this->getProductSearchConfigDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_search_config_field.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductSearchConfigField_RepositoryService()
    {
        return $this->services['product_search_config_field.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition'] ?? $this->getProductSearchConfigFieldDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_search_keyword.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductSearchKeyword_RepositoryService()
    {
        return $this->services['product_search_keyword.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition'] ?? $this->getProductSearchKeywordDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_sorting.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductSorting_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_sorting.repository'])) {
            return $this->services['product_sorting.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_sorting.repository'])) {
            return $this->services['product_sorting.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_sorting.repository'])) {
            return $this->services['product_sorting.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_sorting.repository'])) {
            return $this->services['product_sorting.repository'];
        }

        return $this->services['product_sorting.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition'] ?? $this->getProductSortingDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_sorting_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductSortingTranslation_RepositoryService()
    {
        return $this->services['product_sorting_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition'] ?? $this->getProductSortingTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_stream.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductStream_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_stream.repository'])) {
            return $this->services['product_stream.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_stream.repository'])) {
            return $this->services['product_stream.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_stream.repository'])) {
            return $this->services['product_stream.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_stream.repository'])) {
            return $this->services['product_stream.repository'];
        }

        return $this->services['product_stream.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] ?? $this->getProductStreamDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_stream_filter.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductStreamFilter_RepositoryService()
    {
        return $this->services['product_stream_filter.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition'] ?? $this->getProductStreamFilterDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_stream_mapping.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductStreamMapping_RepositoryService()
    {
        return $this->services['product_stream_mapping.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition'] ?? $this->getProductStreamMappingDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_stream_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductStreamTranslation_RepositoryService()
    {
        return $this->services['product_stream_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition'] ?? $this->getProductStreamTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductTag_RepositoryService()
    {
        return $this->services['product_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition'] ?? $this->getProductTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductTranslation_RepositoryService()
    {
        return $this->services['product_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition'] ?? $this->getProductTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'product_visibility.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getProductVisibility_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['product_visibility.repository'])) {
            return $this->services['product_visibility.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['product_visibility.repository'])) {
            return $this->services['product_visibility.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['product_visibility.repository'])) {
            return $this->services['product_visibility.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['product_visibility.repository'])) {
            return $this->services['product_visibility.repository'];
        }

        return $this->services['product_visibility.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition'] ?? $this->getProductVisibilityDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotion_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['promotion.repository'])) {
            return $this->services['promotion.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['promotion.repository'])) {
            return $this->services['promotion.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['promotion.repository'])) {
            return $this->services['promotion.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['promotion.repository'])) {
            return $this->services['promotion.repository'];
        }

        return $this->services['promotion.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition'] ?? $this->getPromotionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_cart_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionCartRule_RepositoryService()
    {
        return $this->services['promotion_cart_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition'] ?? $this->getPromotionCartRuleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_discount.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionDiscount_RepositoryService()
    {
        return $this->services['promotion_discount.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition'] ?? $this->getPromotionDiscountDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_discount_prices.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionDiscountPrices_RepositoryService()
    {
        return $this->services['promotion_discount_prices.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition'] ?? $this->getPromotionDiscountPriceDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_discount_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionDiscountRule_RepositoryService()
    {
        return $this->services['promotion_discount_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition'] ?? $this->getPromotionDiscountRuleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_individual_code.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionIndividualCode_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['promotion_individual_code.repository'])) {
            return $this->services['promotion_individual_code.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['promotion_individual_code.repository'])) {
            return $this->services['promotion_individual_code.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['promotion_individual_code.repository'])) {
            return $this->services['promotion_individual_code.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['promotion_individual_code.repository'])) {
            return $this->services['promotion_individual_code.repository'];
        }

        return $this->services['promotion_individual_code.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition'] ?? $this->getPromotionIndividualCodeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_order_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionOrderRule_RepositoryService()
    {
        return $this->services['promotion_order_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition'] ?? $this->getPromotionOrderRuleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_persona_customer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionPersonaCustomer_RepositoryService()
    {
        return $this->services['promotion_persona_customer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition'] ?? $this->getPromotionPersonaCustomerDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_persona_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionPersonaRule_RepositoryService()
    {
        return $this->services['promotion_persona_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition'] ?? $this->getPromotionPersonaRuleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionSalesChannel_RepositoryService()
    {
        return $this->services['promotion_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition'] ?? $this->getPromotionSalesChannelDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_setgroup.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionSetgroup_RepositoryService()
    {
        return $this->services['promotion_setgroup.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition'] ?? $this->getPromotionSetGroupDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_setgroup_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionSetgroupRule_RepositoryService()
    {
        return $this->services['promotion_setgroup_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition'] ?? $this->getPromotionSetGroupRuleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'promotion_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPromotionTranslation_RepositoryService()
    {
        return $this->services['promotion_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition'] ?? $this->getPromotionTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'property_group.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPropertyGroup_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['property_group.repository'])) {
            return $this->services['property_group.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['property_group.repository'])) {
            return $this->services['property_group.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['property_group.repository'])) {
            return $this->services['property_group.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['property_group.repository'])) {
            return $this->services['property_group.repository'];
        }

        return $this->services['property_group.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Property\\PropertyGroupDefinition'] ?? $this->getPropertyGroupDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'property_group_option.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPropertyGroupOption_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['property_group_option.repository'])) {
            return $this->services['property_group_option.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['property_group_option.repository'])) {
            return $this->services['property_group_option.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['property_group_option.repository'])) {
            return $this->services['property_group_option.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['property_group_option.repository'])) {
            return $this->services['property_group_option.repository'];
        }

        return $this->services['property_group_option.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition'] ?? $this->getPropertyGroupOptionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'property_group_option_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPropertyGroupOptionTranslation_RepositoryService()
    {
        return $this->services['property_group_option_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition'] ?? $this->getPropertyGroupOptionTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'property_group_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getPropertyGroupTranslation_RepositoryService()
    {
        return $this->services['property_group_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition'] ?? $this->getPropertyGroupTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /*
     * Gets the public 'router' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\Router
     */
    protected function getRouterService()
    {
        return $this->services['router'] = new \Shopware\Storefront\Framework\Routing\Router(($this->privates['router.default'] ?? $this->getRouter_DefaultService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the public 'routing.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader
     */
    protected function getRouting_LoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/Loader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/DelegatingLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Routing/DelegatingLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/LoaderResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/LoaderResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Route/ApiRouteLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/Configurator/Traits/HostTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/Configurator/Traits/LocalizedRouteTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/Configurator/Traits/PrefixTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/XmlFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/FileLocatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/FileLocator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Config/FileLocator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/YamlFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/PhpFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/GlobFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/DirectoryLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/ObjectLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/ContainerLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/AnnotationClassLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Routing/AnnotatedRouteControllerLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/AnnotationFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/AnnotationDirectoryLoader.php';

        $a = new \Symfony\Component\Config\Loader\LoaderResolver();

        $b = new \Symfony\Component\HttpKernel\Config\FileLocator(($this->services['kernel'] ?? $this->get('kernel', 1)));
        $c = new \Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()), 'prod');

        $a->addLoader(new \Shopware\Core\Framework\Api\Route\ApiRouteLoader(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService())));
        $a->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($b, 'prod'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($b, 'prod'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($b, 'prod'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\GlobFileLoader($b, 'prod'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($b, 'prod'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\ContainerLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'kernel' => ['services', 'kernel', 'getKernelService', false],
        ], [
            'kernel' => 'Shopware\\Core\\Kernel',
        ]), 'prod'));
        $a->addLoader($c);
        $a->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($b, $c));
        $a->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($b, $c));

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($a, ['utf8' => true], []);
    }

    /*
     * Gets the public 'rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getRule_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['rule.repository'])) {
            return $this->services['rule.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['rule.repository'])) {
            return $this->services['rule.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['rule.repository'])) {
            return $this->services['rule.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['rule.repository'])) {
            return $this->services['rule.repository'];
        }

        return $this->services['rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] ?? $this->getRuleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'rule_condition.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getRuleCondition_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['rule_condition.repository'])) {
            return $this->services['rule_condition.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['rule_condition.repository'])) {
            return $this->services['rule_condition.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['rule_condition.repository'])) {
            return $this->services['rule_condition.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['rule_condition.repository'])) {
            return $this->services['rule_condition.repository'];
        }

        return $this->services['rule_condition.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition'] ?? $this->getRuleConditionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'rule_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getRuleTag_RepositoryService()
    {
        return $this->services['rule_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition'] ?? $this->getRuleTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel.category.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_Category_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.category.repository'])) {
            return $this->services['sales_channel.category.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel.category.repository'])) {
            return $this->services['sales_channel.category.repository'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.category.repository'])) {
            return $this->services['sales_channel.category.repository'];
        }

        return $this->services['sales_channel.category.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition'] ?? $this->getSalesChannelCategoryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.country.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_Country_RepositoryService()
    {
        return $this->services['sales_channel.country.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition'] ?? $this->getSalesChannelCountryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.country_state.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_CountryState_RepositoryService()
    {
        return $this->services['sales_channel.country_state.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition'] ?? $this->getSalesChannelCountryStateDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.currency.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_Currency_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.currency.repository'])) {
            return $this->services['sales_channel.currency.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel.currency.repository'])) {
            return $this->services['sales_channel.currency.repository'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.currency.repository'])) {
            return $this->services['sales_channel.currency.repository'];
        }

        return $this->services['sales_channel.currency.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition'] ?? $this->getSalesChannelCurrencyDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.landing_page.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_LandingPage_RepositoryService()
    {
        return $this->services['sales_channel.landing_page.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition'] ?? $this->getSalesChannelLandingPageDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.language.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_Language_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.language.repository'])) {
            return $this->services['sales_channel.language.repository'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.language.repository'])) {
            return $this->services['sales_channel.language.repository'];
        }

        return $this->services['sales_channel.language.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition'] ?? $this->getSalesChannelLanguageDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), $b, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.main_category.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_MainCategory_RepositoryService()
    {
        return $this->services['sales_channel.main_category.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition'] ?? $this->getSalesChannelMainCategoryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.newsletter_recipient.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_NewsletterRecipient_RepositoryService()
    {
        return $this->services['sales_channel.newsletter_recipient.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition'] ?? $this->getSalesChannelNewsletterRecipientDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.payment_method.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_PaymentMethod_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.payment_method.repository'])) {
            return $this->services['sales_channel.payment_method.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel.payment_method.repository'])) {
            return $this->services['sales_channel.payment_method.repository'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.payment_method.repository'])) {
            return $this->services['sales_channel.payment_method.repository'];
        }

        return $this->services['sales_channel.payment_method.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition'] ?? $this->getSalesChannelPaymentMethodDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.product.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_Product_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.product.repository'])) {
            return $this->services['sales_channel.product.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel.product.repository'])) {
            return $this->services['sales_channel.product.repository'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.product.repository'])) {
            return $this->services['sales_channel.product.repository'];
        }

        return $this->services['sales_channel.product.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition'] ?? $this->getSalesChannelProductDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannel_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['sales_channel.repository'])) {
            return $this->services['sales_channel.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.repository'])) {
            return $this->services['sales_channel.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel.repository'])) {
            return $this->services['sales_channel.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.repository'])) {
            return $this->services['sales_channel.repository'];
        }

        return $this->services['sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] ?? $this->getSalesChannelDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel.salutation.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_Salutation_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.salutation.repository'])) {
            return $this->services['sales_channel.salutation.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel.salutation.repository'])) {
            return $this->services['sales_channel.salutation.repository'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.salutation.repository'])) {
            return $this->services['sales_channel.salutation.repository'];
        }

        return $this->services['sales_channel.salutation.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition'] ?? $this->getSalesChannelSalutationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.seo_url.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_SeoUrl_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.seo_url.repository'])) {
            return $this->services['sales_channel.seo_url.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel.seo_url.repository'])) {
            return $this->services['sales_channel.seo_url.repository'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.seo_url.repository'])) {
            return $this->services['sales_channel.seo_url.repository'];
        }

        return $this->services['sales_channel.seo_url.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition'] ?? $this->getSalesChannelSeoUrlDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel.shipping_method.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected function getSalesChannel_ShippingMethod_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel.shipping_method.repository'])) {
            return $this->services['sales_channel.shipping_method.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel.shipping_method.repository'])) {
            return $this->services['sales_channel.shipping_method.repository'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel.shipping_method.repository'])) {
            return $this->services['sales_channel.shipping_method.repository'];
        }

        return $this->services['sales_channel.shipping_method.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition'] ?? $this->getSalesChannelShippingMethodDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService()));
    }

    /*
     * Gets the public 'sales_channel_analytics.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelAnalytics_RepositoryService()
    {
        return $this->services['sales_channel_analytics.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition'] ?? $this->getSalesChannelAnalyticsDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_country.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelCountry_RepositoryService()
    {
        return $this->services['sales_channel_country.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition'] ?? $this->getSalesChannelCountryDefinition2Service()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_currency.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelCurrency_RepositoryService()
    {
        return $this->services['sales_channel_currency.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition'] ?? $this->getSalesChannelCurrencyDefinition2Service()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Administration\Notification\NotificationDefinition' shared service.
     *
     * @return \Shopware\Administration\Notification\NotificationDefinition
     */
    protected function getNotificationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Notification/NotificationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Administration\\Notification\\NotificationDefinition'] = $instance = new \Shopware\Administration\Notification\NotificationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Administration\Snippet\AppAdministrationSnippetDefinition' shared service.
     *
     * @return \Shopware\Administration\Snippet\AppAdministrationSnippetDefinition
     */
    protected function getAppAdministrationSnippetDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/AppAdministrationSnippetDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition'] = $instance = new \Shopware\Administration\Snippet\AppAdministrationSnippetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition
     */
    protected function getCustomerAddressDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition
     */
    protected function getCustomerGroupRegistrationSalesChannelDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroupRegistrationSalesChannel/CustomerGroupRegistrationSalesChannelDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition
     */
    protected function getCustomerGroupTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroupTranslation/CustomerGroupTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition
     */
    protected function getCustomerGroupDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition
     */
    protected function getCustomerRecoveryDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerRecovery/CustomerRecoveryDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition
     */
    protected function getCustomerTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerTag/CustomerTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition
     */
    protected function getCustomerWishlistProductDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerWishlistProduct/CustomerWishlistProductDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition
     */
    protected function getCustomerWishlistDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerWishlist/CustomerWishlistDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\CustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\CustomerDefinition
     */
    protected function getCustomerDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\CustomerDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition
     */
    protected function getDocumentBaseConfigSalesChannelDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentBaseConfigSalesChannel/DocumentBaseConfigSalesChannelDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition
     */
    protected function getDocumentBaseConfigDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentBaseConfig/DocumentBaseConfigDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition
     */
    protected function getDocumentTypeTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentTypeTranslation/DocumentTypeTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition
     */
    protected function getDocumentTypeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentType/DocumentTypeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\DocumentDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentDefinition
     */
    protected function getDocumentDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\DocumentDefinition'] = $instance = new \Shopware\Core\Checkout\Document\DocumentDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition
     */
    protected function getOrderAddressDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition
     */
    protected function getOrderCustomerDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderCustomer/OrderCustomerDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition
     */
    protected function getOrderDeliveryPositionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderDeliveryPosition/OrderDeliveryPositionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition
     */
    protected function getOrderDeliveryDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderDelivery/OrderDeliveryDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition
     */
    protected function getOrderLineItemDownloadDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderLineItemDownload/OrderLineItemDownloadDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition
     */
    protected function getOrderLineItemDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderLineItem/OrderLineItemDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition
     */
    protected function getOrderTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTag/OrderTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition
     */
    protected function getOrderTransactionCaptureRefundPositionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefundPosition/OrderTransactionCaptureRefundPositionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition
     */
    protected function getOrderTransactionCaptureRefundDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefund/OrderTransactionCaptureRefundDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition
     */
    protected function getOrderTransactionCaptureDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCapture/OrderTransactionCaptureDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition
     */
    protected function getOrderTransactionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransaction/OrderTransactionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\OrderDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\OrderDefinition
     */
    protected function getOrderDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\OrderDefinition'] = $instance = new \Shopware\Core\Checkout\Order\OrderDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition
     */
    protected function getPaymentMethodTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Aggregate/PaymentMethodTranslation/PaymentMethodTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition
     */
    protected function getPromotionCartRuleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionCartRule/PromotionCartRuleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition
     */
    protected function getPromotionDiscountPriceDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscountPrice/PromotionDiscountPriceDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition
     */
    protected function getPromotionDiscountRuleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscountRule/PromotionDiscountRuleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition
     */
    protected function getPromotionDiscountDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscount/PromotionDiscountDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition
     */
    protected function getPromotionIndividualCodeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionIndividualCode/PromotionIndividualCodeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition
     */
    protected function getPromotionOrderRuleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionOrderRule/PromotionOrderRuleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition
     */
    protected function getPromotionPersonaCustomerDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionPersonaCustomer/PromotionPersonaCustomerDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition
     */
    protected function getPromotionPersonaRuleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionPersonaRule/PromotionPersonaRuleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition
     */
    protected function getPromotionSalesChannelDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSalesChannel/PromotionSalesChannelDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition
     */
    protected function getPromotionSetGroupRuleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSetGroupRule/PromotionSetGroupRuleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition
     */
    protected function getPromotionSetGroupDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSetGroup/PromotionSetGroupDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition
     */
    protected function getPromotionTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionTranslation/PromotionTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\PromotionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\PromotionDefinition
     */
    protected function getPromotionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/PromotionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\PromotionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition
     */
    protected function getShippingMethodPriceDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodPrice/ShippingMethodPriceDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition
     */
    protected function getShippingMethodTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodTag/ShippingMethodTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition
     */
    protected function getShippingMethodTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodTranslation/ShippingMethodTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition
     */
    protected function getCategoryTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Aggregate/CategoryTag/CategoryTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition'] = $instance = new \Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition
     */
    protected function getCategoryTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Aggregate/CategoryTranslation/CategoryTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition'] = $instance = new \Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition
     */
    protected function getCmsBlockDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsBlock/CmsBlockDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition
     */
    protected function getCmsPageTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsPageTranslation/CmsPageTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition
     */
    protected function getCmsSectionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSection/CmsSectionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition
     */
    protected function getCmsSlotTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSlotTranslation/CmsSlotTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition
     */
    protected function getCmsSlotDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSlot/CmsSlotDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\CmsPageDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\CmsPageDefinition
     */
    protected function getCmsPageDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\CmsPageDefinition'] = $instance = new \Shopware\Core\Content\Cms\CmsPageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition
     */
    protected function getFlowSequenceDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Aggregate/FlowSequence/FlowSequenceDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition'] = $instance = new \Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition
     */
    protected function getFlowTemplateDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Aggregate/FlowTemplate/FlowTemplateDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition'] = $instance = new \Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Flow\FlowDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\FlowDefinition
     */
    protected function getFlowDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/FlowDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Flow\\FlowDefinition'] = $instance = new \Shopware\Core\Content\Flow\FlowDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition
     */
    protected function getImportExportFileDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition
     */
    protected function getImportExportLogDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Aggregate/ImportExportLog/ImportExportLogDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ImportExport\ImportExportProfileDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportProfileDefinition
     */
    protected function getImportExportProfileDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportProfileDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\ImportExportProfileDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition
     */
    protected function getImportExportProfileTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportProfileTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition
     */
    protected function getLandingPageSalesChannelDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageSalesChannel/LandingPageSalesChannelDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition
     */
    protected function getLandingPageTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageTag/LandingPageTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition
     */
    protected function getLandingPageTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageTranslation/LandingPageTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition
     */
    protected function getMailHeaderFooterTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailHeaderFooterTranslation/MailHeaderFooterTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition
     */
    protected function getMailHeaderFooterDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailHeaderFooter/MailHeaderFooterDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition
     */
    protected function getMailTemplateMediaDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateMedia/MailTemplateMediaDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition
     */
    protected function getMailTemplateTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateTranslation/MailTemplateTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition
     */
    protected function getMailTemplateTypeTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateTypeTranslation/MailTemplateTypeTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition
     */
    protected function getMailTemplateTypeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateType/MailTemplateTypeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\MailTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\MailTemplateDefinition
     */
    protected function getMailTemplateDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/MailTemplateDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\MailTemplateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition
     */
    protected function getMediaDefaultFolderDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaDefaultFolder/MediaDefaultFolderDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition
     */
    protected function getMediaFolderConfigurationMediaThumbnailSizeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolderConfigurationMediaThumbnailSize/MediaFolderConfigurationMediaThumbnailSizeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition
     */
    protected function getMediaFolderConfigurationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolderConfiguration/MediaFolderConfigurationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition
     */
    protected function getMediaFolderDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolder/MediaFolderDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition
     */
    protected function getMediaTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaTag/MediaTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition
     */
    protected function getMediaThumbnailSizeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaThumbnailSize/MediaThumbnailSizeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition
     */
    protected function getMediaThumbnailDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaThumbnail/MediaThumbnailDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition
     */
    protected function getMediaTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaTranslation/MediaTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\MediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\MediaDefinition
     */
    protected function getMediaDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\MediaDefinition'] = $instance = new \Shopware\Core\Content\Media\MediaDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition
     */
    protected function getNewsletterRecipientTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Aggregate/NewsletterRecipientTag/NewsletterRecipientTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition'] = $instance = new \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ProductExport\ProductExportDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ProductExportDefinition
     */
    protected function getProductExportDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ProductExportDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition'] = $instance = new \Shopware\Core\Content\ProductExport\ProductExportDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition
     */
    protected function getProductStreamFilterDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamFilter/ProductStreamFilterDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition
     */
    protected function getProductStreamTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamTranslation/ProductStreamTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ProductStream\ProductStreamDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\ProductStreamDefinition
     */
    protected function getProductStreamDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/ProductStreamDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\ProductStreamDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition
     */
    protected function getProductCategoryTreeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCategoryTree/ProductCategoryTreeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition
     */
    protected function getProductCategoryDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCategory/ProductCategoryDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition
     */
    protected function getProductConfiguratorSettingDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductConfiguratorSetting/ProductConfiguratorSettingDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition
     */
    protected function getProductCrossSellingAssignedProductsDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingAssignedProducts/ProductCrossSellingAssignedProductsDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition
     */
    protected function getProductCrossSellingTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingTranslation/ProductCrossSellingTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition
     */
    protected function getProductCrossSellingDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSelling/ProductCrossSellingDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition
     */
    protected function getProductCustomFieldSetDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCustomFieldSet/ProductCustomFieldSetDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition
     */
    protected function getProductDownloadDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition
     */
    protected function getProductFeatureSetTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSetTranslation/ProductFeatureSetTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition
     */
    protected function getProductFeatureSetDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSet/ProductFeatureSetDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition
     */
    protected function getProductKeywordDictionaryDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductKeywordDictionary/ProductKeywordDictionaryDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition
     */
    protected function getProductManufacturerTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturerTranslation/ProductManufacturerTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition
     */
    protected function getProductManufacturerDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturer/ProductManufacturerDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition
     */
    protected function getProductMediaDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductMedia/ProductMediaDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition
     */
    protected function getProductOptionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductOption/ProductOptionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition
     */
    protected function getProductPriceDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductPrice/ProductPriceDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition
     */
    protected function getProductPropertyDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductProperty/ProductPropertyDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition
     */
    protected function getProductReviewDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductReview/ProductReviewDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition
     */
    protected function getProductSearchConfigFieldDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfigField/ProductSearchConfigFieldDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition
     */
    protected function getProductSearchConfigDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfig/ProductSearchConfigDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition
     */
    protected function getProductSearchKeywordDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchKeyword/ProductSearchKeywordDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition
     */
    protected function getProductStreamMappingDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductStreamMapping/ProductStreamMappingDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition
     */
    protected function getProductTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductTag/ProductTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition
     */
    protected function getProductTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductTranslation/ProductTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition
     */
    protected function getProductVisibilityDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductVisibility/ProductVisibilityDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition
     */
    protected function getProductSortingDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition
     */
    protected function getProductSortingTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition
     */
    protected function getPropertyGroupOptionTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOptionTranslation/PropertyGroupOptionTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition
     */
    protected function getPropertyGroupOptionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOption/PropertyGroupOptionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition
     */
    protected function getPropertyGroupTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupTranslation/PropertyGroupTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Property\PropertyGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\PropertyGroupDefinition
     */
    protected function getPropertyGroupDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/PropertyGroupDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Property\\PropertyGroupDefinition'] = $instance = new \Shopware\Core\Content\Property\PropertyGroupDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition
     */
    protected function getRuleConditionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/Aggregate/RuleCondition/RuleConditionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition'] = $instance = new \Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition
     */
    protected function getRuleTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/Aggregate/RuleTag/RuleTagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition'] = $instance = new \Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Rule\RuleDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\RuleDefinition
     */
    protected function getRuleDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Rule\\RuleDefinition'] = $instance = new \Shopware\Core\Content\Rule\RuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition
     */
    protected function getSeoUrlTemplateDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlTemplate/SeoUrlTemplateDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition'] = $instance = new \Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition
     */
    protected function getAclRoleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/Role/AclRoleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition'] = $instance = new \Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition
     */
    protected function getAclUserRoleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/Role/AclUserRoleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition'] = $instance = new \Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition
     */
    protected function getActionButtonTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/ActionButtonTranslation/ActionButtonTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition
     */
    protected function getActionButtonDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/ActionButton/ActionButtonDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition
     */
    protected function getAppPaymentMethodDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition
     */
    protected function getAppScriptConditionTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppScriptConditionTranslation/AppScriptConditionTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition
     */
    protected function getAppScriptConditionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppScriptCondition/AppScriptConditionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition
     */
    protected function getAppTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppTranslation/AppTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition
     */
    protected function getAppCmsBlockTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/CmsBlockTranslation/AppCmsBlockTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition
     */
    protected function getAppCmsBlockDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/CmsBlock/AppCmsBlockDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition
     */
    protected function getAppFlowActionTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowActionTranslation/AppFlowActionTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition
     */
    protected function getAppFlowActionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowAction/AppFlowActionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\AppDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppDefinition
     */
    protected function getAppDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\AppDefinition'] = $instance = new \Shopware\Core\Framework\App\AppDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Template\TemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Template\TemplateDefinition
     */
    protected function getTemplateDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/TemplateDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition'] = $instance = new \Shopware\Core\Framework\App\Template\TemplateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition
     */
    protected function getVersionCommitDataDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition
     */
    protected function getVersionCommitDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition
     */
    protected function getVersionDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionRule\EventActionRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionRule\EventActionRuleDefinition
     */
    protected function getEventActionRuleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/EventAction/Aggregate/EventActionRule/EventActionRuleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionRule\\EventActionRuleDefinition'] = $instance = new \Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionRule\EventActionRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionSalesChannel\EventActionSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionSalesChannel\EventActionSalesChannelDefinition
     */
    protected function getEventActionSalesChannelDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/EventAction/Aggregate/EventActionSalesChannel/EventActionSalesChannelDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Event\\EventAction\\Aggregate\\EventActionSalesChannel\\EventActionSalesChannelDefinition'] = $instance = new \Shopware\Core\Framework\Event\EventAction\Aggregate\EventActionSalesChannel\EventActionSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Event\EventAction\EventActionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Event\EventAction\EventActionDefinition
     */
    protected function getEventActionDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Event\\EventAction\\EventActionDefinition'] = $instance = new \Shopware\Core\Framework\Event\EventAction\EventActionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Log\LogEntryDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Log\LogEntryDefinition
     */
    protected function getLogEntryDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/LogEntryDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Log\\LogEntryDefinition'] = $instance = new \Shopware\Core\Framework\Log\LogEntryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\MessageQueue\DeadMessage\DeadMessageDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\DeadMessage\DeadMessageDefinition
     */
    protected function getDeadMessageDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/DeadMessage/DeadMessageDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\MessageQueue\\DeadMessage\\DeadMessageDefinition'] = $instance = new \Shopware\Core\Framework\MessageQueue\DeadMessage\DeadMessageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\MessageQueue\MessageQueueStatsDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\MessageQueueStatsDefinition
     */
    protected function getMessageQueueStatsDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/MessageQueueStatsDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\MessageQueue\\MessageQueueStatsDefinition'] = $instance = new \Shopware\Core\Framework\MessageQueue\MessageQueueStatsDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition
     */
    protected function getScheduledTaskDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition'] = $instance = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition
     */
    protected function getPluginTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Aggregate/PluginTranslation/PluginTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition'] = $instance = new \Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Plugin\PluginDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginDefinition
     */
    protected function getPluginDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Plugin\\PluginDefinition'] = $instance = new \Shopware\Core\Framework\Plugin\PluginDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Script\ScriptDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Script\ScriptDefinition
     */
    protected function getScriptDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Script\\ScriptDefinition'] = $instance = new \Shopware\Core\Framework\Script\ScriptDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition
     */
    protected function getWebhookEventLogDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/EventLog/WebhookEventLogDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition'] = $instance = new \Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Webhook\WebhookDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\WebhookDefinition
     */
    protected function getWebhookDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/WebhookDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\Framework\\Webhook\\WebhookDefinition'] = $instance = new \Shopware\Core\Framework\Webhook\WebhookDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition
     */
    protected function getCountryStateTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryStateTranslation/CountryStateTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition
     */
    protected function getCountryTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryTranslation/CountryTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition
     */
    protected function getCurrencyCountryRoundingDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition'] = $instance = new \Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition
     */
    protected function getCurrencyTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/Aggregate/CurrencyTranslation/CurrencyTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition'] = $instance = new \Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\CustomEntity\CustomEntityDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\CustomEntityDefinition
     */
    protected function getCustomEntityDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/CustomEntityDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition'] = $instance = new \Shopware\Core\System\CustomEntity\CustomEntityDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition
     */
    protected function getCustomFieldSetRelationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Aggregate/CustomFieldSetRelation/CustomFieldSetRelationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition'] = $instance = new \Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition
     */
    protected function getCustomFieldSetDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Aggregate/CustomFieldSet/CustomFieldSetDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition'] = $instance = new \Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\CustomField\CustomFieldDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\CustomFieldDefinition
     */
    protected function getCustomFieldDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/CustomFieldDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\CustomField\\CustomFieldDefinition'] = $instance = new \Shopware\Core\System\CustomField\CustomFieldDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition
     */
    protected function getDeliveryTimeTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/DeliveryTime/Aggregate/DeliveryTimeTranslation/DeliveryTimeTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition'] = $instance = new \Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition' shared service.
     *
     * @return \Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition
     */
    protected function getDeliveryTimeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/DeliveryTime/DeliveryTimeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition'] = $instance = new \Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition
     */
    protected function getIntegrationRoleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Integration/Aggregate/IntegrationRole/IntegrationRoleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition'] = $instance = new \Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Integration\IntegrationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Integration\IntegrationDefinition
     */
    protected function getIntegrationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Integration/IntegrationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Integration\\IntegrationDefinition'] = $instance = new \Shopware\Core\System\Integration\IntegrationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition
     */
    protected function getLocaleTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/Aggregate/LocaleTranslation/LocaleTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition'] = $instance = new \Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Locale\LocaleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Locale\LocaleDefinition
     */
    protected function getLocaleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/LocaleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Locale\\LocaleDefinition'] = $instance = new \Shopware\Core\System\Locale\LocaleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition
     */
    protected function getNumberRangeSalesChannelDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeSalesChannel/NumberRangeSalesChannelDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition
     */
    protected function getNumberRangeStateDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeState/NumberRangeStateDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition
     */
    protected function getNumberRangeTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeTranslation/NumberRangeTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition
     */
    protected function getNumberRangeTypeTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeTypeTranslation/NumberRangeTypeTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition
     */
    protected function getNumberRangeTypeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeType/NumberRangeTypeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\NumberRangeDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\NumberRangeDefinition
     */
    protected function getNumberRangeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/NumberRangeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition'] = $instance = new \Shopware\Core\System\NumberRange\NumberRangeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition
     */
    protected function getSalesChannelAnalyticsDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelAnalytics/SalesChannelAnalyticsDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition
     */
    protected function getSalesChannelCountryDefinition3Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelCountry/SalesChannelCountryDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition
     */
    protected function getSalesChannelCurrencyDefinition3Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelCurrency/SalesChannelCurrencyDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition
     */
    protected function getSalesChannelDomainDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition
     */
    protected function getSalesChannelLanguageDefinition3Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelLanguage/SalesChannelLanguageDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition
     */
    protected function getSalesChannelPaymentMethodDefinition3Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelPaymentMethod/SalesChannelPaymentMethodDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition
     */
    protected function getSalesChannelShippingMethodDefinition3Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelShippingMethod/SalesChannelShippingMethodDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition
     */
    protected function getSalesChannelTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelTranslation/SalesChannelTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition
     */
    protected function getSalesChannelTypeTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelTypeTranslation/SalesChannelTypeTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition
     */
    protected function getSalesChannelTypeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelType/SalesChannelTypeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\SalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannelDefinition
     */
    protected function getSalesChannelDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\SalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition
     */
    protected function getSalutationTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/Aggregate/SalutationTranslation/SalutationTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition'] = $instance = new \Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition
     */
    protected function getSnippetSetDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition'] = $instance = new \Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Snippet\SnippetDefinition' shared service.
     *
     * @return \Shopware\Core\System\Snippet\SnippetDefinition
     */
    protected function getSnippetDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\System\\Snippet\\SnippetDefinition'] = $instance = new \Shopware\Core\System\Snippet\SnippetDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition
     */
    protected function getStateMachineHistoryDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineHistory/StateMachineHistoryDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition
     */
    protected function getStateMachineStateDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineState/StateMachineStateDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition
     */
    protected function getStateMachineStateTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineState/StateMachineStateTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition
     */
    protected function getStateMachineTransitionDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineTransition/StateMachineTransitionDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\StateMachineDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineDefinition
     */
    protected function getStateMachineDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\StateMachineDefinition'] = $instance = new \Shopware\Core\System\StateMachine\StateMachineDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\StateMachineTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineTranslationDefinition
     */
    protected function getStateMachineTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition'] = $instance = new \Shopware\Core\System\StateMachine\StateMachineTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SystemConfig\SystemConfigDefinition' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\SystemConfigDefinition
     */
    protected function getSystemConfigDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition'] = $instance = new \Shopware\Core\System\SystemConfig\SystemConfigDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tag\TagDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tag\TagDefinition
     */
    protected function getTagDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tag/TagDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Tag\\TagDefinition'] = $instance = new \Shopware\Core\System\Tag\TagDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition
     */
    protected function getTaxRuleTypeTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRuleTypeTranslation/TaxRuleTypeTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition
     */
    protected function getTaxRuleTypeDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRuleType/TaxRuleTypeDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition
     */
    protected function getTaxRuleDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRule/TaxRuleDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tax\TaxDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\TaxDefinition
     */
    protected function getTaxDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\System\\Tax\\TaxDefinition'] = $instance = new \Shopware\Core\System\Tax\TaxDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition
     */
    protected function getUnitTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Unit/Aggregate/UnitTranslation/UnitTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition'] = $instance = new \Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Unit\UnitDefinition' shared service.
     *
     * @return \Shopware\Core\System\Unit\UnitDefinition
     */
    protected function getUnitDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Unit/UnitDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\Unit\\UnitDefinition'] = $instance = new \Shopware\Core\System\Unit\UnitDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition
     */
    protected function getUserAccessKeyDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserAccessKey/UserAccessKeyDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition
     */
    protected function getUserConfigDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserConfig/UserConfigDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition
     */
    protected function getUserRecoveryDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserRecovery/UserRecoveryDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Core\System\User\UserDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\UserDefinition
     */
    protected function getUserDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Core\\System\\User\\UserDefinition'] = $instance = new \Shopware\Core\System\User\UserDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition
     */
    protected function getThemeChildDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeChildDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition
     */
    protected function getThemeMediaDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeMediaDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition
     */
    protected function getThemeSalesChannelDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition
     */
    protected function getThemeTranslationDefinition2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeTranslationDefinition.php';

        $this->services['sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\ThemeDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeDefinition
     */
    protected function getThemeDefinition2Service()
    {
        $this->services['sales_channel_definition.Shopware\\Storefront\\Theme\\ThemeDefinition'] = $instance = new \Shopware\Storefront\Theme\ThemeDefinition();

        $instance->compile(($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()));

        return $instance;
    }

    /*
     * Gets the public 'sales_channel_domain.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelDomain_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['sales_channel_domain.repository'])) {
            return $this->services['sales_channel_domain.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['sales_channel_domain.repository'])) {
            return $this->services['sales_channel_domain.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['sales_channel_domain.repository'])) {
            return $this->services['sales_channel_domain.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['sales_channel_domain.repository'])) {
            return $this->services['sales_channel_domain.repository'];
        }

        return $this->services['sales_channel_domain.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition'] ?? $this->getSalesChannelDomainDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_language.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelLanguage_RepositoryService()
    {
        return $this->services['sales_channel_language.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition'] ?? $this->getSalesChannelLanguageDefinition2Service()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_payment_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelPaymentMethod_RepositoryService()
    {
        return $this->services['sales_channel_payment_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition'] ?? $this->getSalesChannelPaymentMethodDefinition2Service()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_shipping_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelShippingMethod_RepositoryService()
    {
        return $this->services['sales_channel_shipping_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition'] ?? $this->getSalesChannelShippingMethodDefinition2Service()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelTranslation_RepositoryService()
    {
        return $this->services['sales_channel_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition'] ?? $this->getSalesChannelTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelType_RepositoryService()
    {
        return $this->services['sales_channel_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition'] ?? $this->getSalesChannelTypeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'sales_channel_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalesChannelTypeTranslation_RepositoryService()
    {
        return $this->services['sales_channel_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition'] ?? $this->getSalesChannelTypeTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'salutation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalutation_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['salutation.repository'])) {
            return $this->services['salutation.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['salutation.repository'])) {
            return $this->services['salutation.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['salutation.repository'])) {
            return $this->services['salutation.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['salutation.repository'])) {
            return $this->services['salutation.repository'];
        }

        return $this->services['salutation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Salutation\\SalutationDefinition'] ?? $this->getSalutationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'salutation_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSalutationTranslation_RepositoryService()
    {
        return $this->services['salutation_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition'] ?? $this->getSalutationTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'scheduled_task.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getScheduledTask_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['scheduled_task.repository'])) {
            return $this->services['scheduled_task.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['scheduled_task.repository'])) {
            return $this->services['scheduled_task.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['scheduled_task.repository'])) {
            return $this->services['scheduled_task.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['scheduled_task.repository'])) {
            return $this->services['scheduled_task.repository'];
        }

        return $this->services['scheduled_task.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition'] ?? $this->getScheduledTaskDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'script.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getScript_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['script.repository'])) {
            return $this->services['script.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['script.repository'])) {
            return $this->services['script.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['script.repository'])) {
            return $this->services['script.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['script.repository'])) {
            return $this->services['script.repository'];
        }

        return $this->services['script.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Script\\ScriptDefinition'] ?? $this->getScriptDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'seo_url.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSeoUrl_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['seo_url.repository'])) {
            return $this->services['seo_url.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['seo_url.repository'])) {
            return $this->services['seo_url.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['seo_url.repository'])) {
            return $this->services['seo_url.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['seo_url.repository'])) {
            return $this->services['seo_url.repository'];
        }

        return $this->services['seo_url.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition'] ?? $this->getSeoUrlDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'seo_url_template.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSeoUrlTemplate_RepositoryService()
    {
        return $this->services['seo_url_template.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition'] ?? $this->getSeoUrlTemplateDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'services_resetter' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter
     */
    protected function getServicesResetterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DependencyInjection/ServicesResetter.php';

        return $this->services['services_resetter'] = new \Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter(new RewindableGenerator(function () {
            if (isset($this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'])) {
                yield 'Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder' => ($this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'])) {
                yield 'Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader' => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'])) {
                yield 'Shopware\\Core\\Framework\\App\\ActiveAppsLoader' => ($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'])) {
                yield 'Shopware\\Core\\System\\CustomField\\CustomFieldService' => ($this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'])) {
                yield 'Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces' => ($this->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'])) {
                yield 'Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer' => ($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'] ?? null);
            }
            if (false) {
                yield 'shopware.increment.gateway.array' => null;
            }
            if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'])) {
                yield 'Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper' => ($this->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'])) {
                yield 'Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider' => ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'])) {
                yield 'Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader' => ($this->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'])) {
                yield 'Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore' => ($this->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'])) {
                yield 'Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface' => ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator'])) {
                yield 'Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator' => ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator'] ?? null);
            }
            if (isset($this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) {
                yield 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\SearchKeywordUpdater' => ($this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'])) {
                yield 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter' => ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer' => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer' => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer' => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer' => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer' => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer' => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber' => ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber' => ($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'] ?? null);
            }
            if (isset($this->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'])) {
                yield 'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader' => ($this->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'] ?? null);
            }
            if (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
                yield 'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService' => ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'])) {
                yield 'Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator' => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
                yield 'Shopware\\Core\\Checkout\\Cart\\CartRuleLoader' => ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHelper'])) {
                yield 'Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHelper' => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHelper'] ?? null);
            }
            if (isset($this->privates['Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener'])) {
                yield 'Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener' => ($this->privates['Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener'] ?? null);
            }
            if (isset($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'])) {
                yield 'Shopware\\Storefront\\Theme\\StorefrontPluginRegistry' => ($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? null);
            }
            if (isset($this->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'])) {
                yield 'Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder' => ($this->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? null);
            }
            if (isset($this->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'])) {
                yield 'Shopware\\Storefront\\Theme\\SalesChannelThemeLoader' => ($this->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'] ?? null);
            }
            if (isset($this->services['cache.app'])) {
                yield 'cache.app' => ($this->services['cache.app'] ?? null);
            }
            if (isset($this->services['cache.system'])) {
                yield 'cache.system' => ($this->services['cache.system'] ?? null);
            }
            if (isset($this->privates['cache.validator'])) {
                yield 'cache.validator' => ($this->privates['cache.validator'] ?? null);
            }
            if (isset($this->privates['cache.serializer'])) {
                yield 'cache.serializer' => ($this->privates['cache.serializer'] ?? null);
            }
            if (isset($this->privates['cache.annotations'])) {
                yield 'cache.annotations' => ($this->privates['cache.annotations'] ?? null);
            }
            if (isset($this->privates['cache.property_info'])) {
                yield 'cache.property_info' => ($this->privates['cache.property_info'] ?? null);
            }
            if (isset($this->privates['cache.messenger.restart_workers_signal'])) {
                yield 'cache.messenger.restart_workers_signal' => ($this->privates['cache.messenger.restart_workers_signal'] ?? null);
            }
            if (isset($this->privates['mailer.message_logger_listener'])) {
                yield 'mailer.message_logger_listener' => ($this->privates['mailer.message_logger_listener'] ?? null);
            }
            if (isset($this->privates['debug.stopwatch'])) {
                yield 'debug.stopwatch' => ($this->privates['debug.stopwatch'] ?? null);
            }
            if (isset($this->privates['cache.rate_limiter'])) {
                yield 'cache.rate_limiter' => ($this->privates['cache.rate_limiter'] ?? null);
            }
            if (isset($this->privates['.cache.object.inner'])) {
                yield '.cache.object.inner' => ($this->privates['.cache.object.inner'] ?? null);
            }
            if (isset($this->privates['.cache.http.inner'])) {
                yield '.cache.http.inner' => ($this->privates['.cache.http.inner'] ?? null);
            }
            if (isset($this->privates['cache.tags'])) {
                yield 'cache.tags' => ($this->privates['cache.tags'] ?? null);
            }
            if (isset($this->privates['session_listener'])) {
                yield 'session_listener' => ($this->privates['session_listener'] ?? null);
            }
            if (isset($this->services['cache.validator_expression_language'])) {
                yield 'cache.validator_expression_language' => ($this->services['cache.validator_expression_language'] ?? null);
            }
            if (isset($this->privates['messenger.transport.in_memory.factory'])) {
                yield 'messenger.transport.in_memory.factory' => ($this->privates['messenger.transport.in_memory.factory'] ?? null);
            }
            if (isset($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'])) {
                yield 'monolog.handler.main' => ($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? null);
            }
            if (isset($this->privates['monolog.handler.console'])) {
                yield 'monolog.handler.console' => ($this->privates['monolog.handler.console'] ?? null);
            }
            if (isset($this->privates['monolog.handler.business_event_handler_buffer'])) {
                yield 'monolog.handler.business_event_handler_buffer' => ($this->privates['monolog.handler.business_event_handler_buffer'] ?? null);
            }
        }, function () {
            return 0 + (int) (isset($this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'])) + (int) (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'])) + (int) (isset($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'])) + (int) (isset($this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'])) + (int) (isset($this->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'])) + (int) (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'])) + (int) (false) + (int) (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'])) + (int) (isset($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'])) + (int) (isset($this->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'])) + (int) (isset($this->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator'])) + (int) (isset($this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) + (int) (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'])) + (int) (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) + (int) (isset($this->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'])) + (int) (isset($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) + (int) (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'])) + (int) (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) + (int) (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHelper'])) + (int) (isset($this->privates['Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener'])) + (int) (isset($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'])) + (int) (isset($this->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'])) + (int) (isset($this->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'])) + (int) (isset($this->services['cache.app'])) + (int) (isset($this->services['cache.system'])) + (int) (isset($this->privates['cache.validator'])) + (int) (isset($this->privates['cache.serializer'])) + (int) (isset($this->privates['cache.annotations'])) + (int) (isset($this->privates['cache.property_info'])) + (int) (isset($this->privates['cache.messenger.restart_workers_signal'])) + (int) (isset($this->privates['mailer.message_logger_listener'])) + (int) (isset($this->privates['debug.stopwatch'])) + (int) (isset($this->privates['cache.rate_limiter'])) + (int) (isset($this->privates['.cache.object.inner'])) + (int) (isset($this->privates['.cache.http.inner'])) + (int) (isset($this->privates['cache.tags'])) + (int) (isset($this->privates['session_listener'])) + (int) (isset($this->services['cache.validator_expression_language'])) + (int) (isset($this->privates['messenger.transport.in_memory.factory'])) + (int) (isset($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'])) + (int) (isset($this->privates['monolog.handler.console'])) + (int) (isset($this->privates['monolog.handler.business_event_handler_buffer']));
        }), ['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder' => [0 => 'reset'], 'Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader' => [0 => 'reset'], 'Shopware\\Core\\Framework\\App\\ActiveAppsLoader' => [0 => 'reset'], 'Shopware\\Core\\System\\CustomField\\CustomFieldService' => [0 => 'reset'], 'Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces' => [0 => 'reset'], 'Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer' => [0 => 'reset'], 'shopware.increment.gateway.array' => [0 => 'resetAll'], 'Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper' => [0 => 'reset'], 'Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider' => [0 => 'reset'], 'Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader' => [0 => 'reset'], 'Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore' => [0 => 'reset'], 'Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface' => [0 => 'reset'], 'Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator' => [0 => 'reset'], 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\SearchKeywordUpdater' => [0 => 'reset'], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter' => [0 => 'reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer' => [0 => 'reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer' => [0 => 'reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer' => [0 => 'reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer' => [0 => 'reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer' => [0 => 'reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer' => [0 => 'reset'], 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber' => [0 => 'reset'], 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber' => [0 => 'reset'], 'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader' => [0 => 'reset'], 'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService' => [0 => 'reset'], 'Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator' => [0 => 'reset'], 'Shopware\\Core\\Checkout\\Cart\\CartRuleLoader' => [0 => 'reset'], 'Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHelper' => [0 => 'reset'], 'Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener' => [0 => 'reset'], 'Shopware\\Storefront\\Theme\\StorefrontPluginRegistry' => [0 => 'reset'], 'Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder' => [0 => 'reset'], 'Shopware\\Storefront\\Theme\\SalesChannelThemeLoader' => [0 => 'reset'], 'cache.app' => [0 => 'reset'], 'cache.system' => [0 => 'reset'], 'cache.validator' => [0 => 'reset'], 'cache.serializer' => [0 => 'reset'], 'cache.annotations' => [0 => 'reset'], 'cache.property_info' => [0 => 'reset'], 'cache.messenger.restart_workers_signal' => [0 => 'reset'], 'mailer.message_logger_listener' => [0 => 'reset'], 'debug.stopwatch' => [0 => 'reset'], 'cache.rate_limiter' => [0 => 'reset'], '.cache.object.inner' => [0 => 'reset'], '.cache.http.inner' => [0 => 'reset'], 'cache.tags' => [0 => 'reset'], 'session_listener' => [0 => 'reset'], 'cache.validator_expression_language' => [0 => 'reset'], 'messenger.transport.in_memory.factory' => [0 => 'reset'], 'monolog.handler.main' => [0 => 'reset'], 'monolog.handler.console' => [0 => 'reset'], 'monolog.handler.business_event_handler_buffer' => [0 => 'reset']]);
    }

    /*
     * Gets the public 'shipping_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getShippingMethod_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['shipping_method.repository'])) {
            return $this->services['shipping_method.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['shipping_method.repository'])) {
            return $this->services['shipping_method.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['shipping_method.repository'])) {
            return $this->services['shipping_method.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['shipping_method.repository'])) {
            return $this->services['shipping_method.repository'];
        }

        return $this->services['shipping_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition'] ?? $this->getShippingMethodDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'shipping_method_price.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getShippingMethodPrice_RepositoryService()
    {
        return $this->services['shipping_method_price.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition'] ?? $this->getShippingMethodPriceDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'shipping_method_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getShippingMethodTag_RepositoryService()
    {
        return $this->services['shipping_method_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition'] ?? $this->getShippingMethodTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'shipping_method_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getShippingMethodTranslation_RepositoryService()
    {
        return $this->services['shipping_method_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition'] ?? $this->getShippingMethodTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'shopware.filesystem.asset' shared service.
     *
     * @return \League\Flysystem\FilesystemInterface
     */
    protected function getShopware_Filesystem_AssetService()
    {
        return $this->services['shopware.filesystem.asset'] = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? $this->getFilesystemFactoryService())->factory($this->parameters['shopware.filesystem.asset']);
    }

    /*
     * Gets the public 'shopware.filesystem.private' shared service.
     *
     * @return \League\Flysystem\FilesystemInterface
     */
    protected function getShopware_Filesystem_PrivateService()
    {
        return $this->services['shopware.filesystem.private'] = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? $this->getFilesystemFactoryService())->factory($this->parameters['shopware.filesystem.private']);
    }

    /*
     * Gets the public 'shopware.filesystem.public' shared service.
     *
     * @return \League\Flysystem\FilesystemInterface
     */
    protected function getShopware_Filesystem_PublicService()
    {
        return $this->services['shopware.filesystem.public'] = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? $this->getFilesystemFactoryService())->factory($this->parameters['shopware.filesystem.public']);
    }

    /*
     * Gets the public 'shopware.filesystem.sitemap' shared service.
     *
     * @return \League\Flysystem\FilesystemInterface
     */
    protected function getShopware_Filesystem_SitemapService()
    {
        return $this->services['shopware.filesystem.sitemap'] = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? $this->getFilesystemFactoryService())->factory($this->parameters['shopware.filesystem.sitemap']);
    }

    /*
     * Gets the public 'shopware.filesystem.temp' shared service.
     *
     * @return \League\Flysystem\FilesystemInterface
     */
    protected function getShopware_Filesystem_TempService()
    {
        return $this->services['shopware.filesystem.temp'] = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? $this->getFilesystemFactoryService())->factory($this->parameters['shopware.filesystem.temp']);
    }

    /*
     * Gets the public 'shopware.filesystem.theme' shared service.
     *
     * @return \League\Flysystem\FilesystemInterface
     */
    protected function getShopware_Filesystem_ThemeService()
    {
        return $this->services['shopware.filesystem.theme'] = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? $this->getFilesystemFactoryService())->factory($this->parameters['shopware.filesystem.theme']);
    }

    /*
     * Gets the public 'shopware.increment.gateway.registry' shared service.
     *
     * @return \Shopware\Core\Framework\Increment\IncrementGatewayRegistry
     */
    protected function getShopware_Increment_Gateway_RegistryService()
    {
        return $this->services['shopware.increment.gateway.registry'] = new \Shopware\Core\Framework\Increment\IncrementGatewayRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['shopware.increment.user_activity.gateway.mysql'] ?? $this->getShopware_Increment_UserActivity_Gateway_MysqlService());
            yield 1 => ($this->privates['shopware.increment.message_queue.gateway.mysql'] ?? $this->getShopware_Increment_MessageQueue_Gateway_MysqlService());
        }, 2));
    }

    /*
     * Gets the public 'shopware.store_client' shared service.
     *
     * @return \GuzzleHttp\Client
     */
    protected function getShopware_StoreClientService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->services['shopware.store_client'] = $this->createProxy('Client_b190fb5', function () {
                return \Client_b190fb5::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getShopware_StoreClientService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/StoreClientFactory.php';

        return (new \Shopware\Core\Framework\Store\Services\StoreClientFactory(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), new RewindableGenerator(function () {
            yield 0 => ($this->services['Shopware\\Core\\Framework\\Store\\Services\\VerifyResponseSignatureMiddleware'] ?? $this->getVerifyResponseSignatureMiddlewareService());
            yield 1 => ($this->services['Shopware\\Core\\Framework\\Store\\Services\\StoreSessionExpiredMiddleware'] ?? $this->getStoreSessionExpiredMiddlewareService());
            yield 2 => ($this->services['Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware'] ?? $this->getShopSecretInvalidMiddlewareService());
        }, 3)))->create();
    }

    /*
     * Gets the public 'snippet.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSnippet_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['snippet.repository'])) {
            return $this->services['snippet.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['snippet.repository'])) {
            return $this->services['snippet.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['snippet.repository'])) {
            return $this->services['snippet.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['snippet.repository'])) {
            return $this->services['snippet.repository'];
        }

        return $this->services['snippet.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Snippet\\SnippetDefinition'] ?? $this->getSnippetDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'snippet_set.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSnippetSet_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['snippet_set.repository'])) {
            return $this->services['snippet_set.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['snippet_set.repository'])) {
            return $this->services['snippet_set.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['snippet_set.repository'])) {
            return $this->services['snippet_set.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['snippet_set.repository'])) {
            return $this->services['snippet_set.repository'];
        }

        return $this->services['snippet_set.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition'] ?? $this->getSnippetSetDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'state_machine.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getStateMachine_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['state_machine.repository'])) {
            return $this->services['state_machine.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['state_machine.repository'])) {
            return $this->services['state_machine.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['state_machine.repository'])) {
            return $this->services['state_machine.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['state_machine.repository'])) {
            return $this->services['state_machine.repository'];
        }

        return $this->services['state_machine.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\StateMachine\\StateMachineDefinition'] ?? $this->getStateMachineDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'state_machine_history.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getStateMachineHistory_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['state_machine_history.repository'])) {
            return $this->services['state_machine_history.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['state_machine_history.repository'])) {
            return $this->services['state_machine_history.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['state_machine_history.repository'])) {
            return $this->services['state_machine_history.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['state_machine_history.repository'])) {
            return $this->services['state_machine_history.repository'];
        }

        return $this->services['state_machine_history.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition'] ?? $this->getStateMachineHistoryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'state_machine_state.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getStateMachineState_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['state_machine_state.repository'])) {
            return $this->services['state_machine_state.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['state_machine_state.repository'])) {
            return $this->services['state_machine_state.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['state_machine_state.repository'])) {
            return $this->services['state_machine_state.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['state_machine_state.repository'])) {
            return $this->services['state_machine_state.repository'];
        }

        return $this->services['state_machine_state.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition'] ?? $this->getStateMachineStateDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'state_machine_state_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getStateMachineStateTranslation_RepositoryService()
    {
        return $this->services['state_machine_state_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition'] ?? $this->getStateMachineStateTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'state_machine_transition.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getStateMachineTransition_RepositoryService()
    {
        return $this->services['state_machine_transition.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition'] ?? $this->getStateMachineTransitionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'state_machine_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getStateMachineTranslation_RepositoryService()
    {
        return $this->services['state_machine_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition'] ?? $this->getStateMachineTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'storefront.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getStorefront_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['storefront.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/storefront');
    }

    /*
     * Gets the public 'storefront.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getStorefront_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['storefront.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/storefront');
    }

    /*
     * Gets the public 'swag_platform_demo_data.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getSwagPlatformDemoData_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['swag_platform_demo_data.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/swag_platform_demo_data');
    }

    /*
     * Gets the public 'swag_platform_demo_data.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getSwagPlatformDemoData_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['swag_platform_demo_data.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/swag_platform_demo_data');
    }

    /*
     * Gets the public 'system.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getSystem_Filesystem_PrivateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['system.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'plugins/system');
    }

    /*
     * Gets the public 'system.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected function getSystem_Filesystem_PublicService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/AbstractFilesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $this->services['system.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), 'plugins/system');
    }

    /*
     * Gets the public 'system_config.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getSystemConfig_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['system_config.repository'])) {
            return $this->services['system_config.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['system_config.repository'])) {
            return $this->services['system_config.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['system_config.repository'])) {
            return $this->services['system_config.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['system_config.repository'])) {
            return $this->services['system_config.repository'];
        }

        return $this->services['system_config.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition'] ?? $this->getSystemConfigDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getTag_RepositoryService()
    {
        return $this->services['tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Tag\\TagDefinition'] ?? $this->getTagDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'tax.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getTax_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['tax.repository'])) {
            return $this->services['tax.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['tax.repository'])) {
            return $this->services['tax.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['tax.repository'])) {
            return $this->services['tax.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['tax.repository'])) {
            return $this->services['tax.repository'];
        }

        return $this->services['tax.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Tax\\TaxDefinition'] ?? $this->getTaxDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'tax_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getTaxRule_RepositoryService()
    {
        return $this->services['tax_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition'] ?? $this->getTaxRuleDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'tax_rule_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getTaxRuleType_RepositoryService()
    {
        return $this->services['tax_rule_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition'] ?? $this->getTaxRuleTypeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'tax_rule_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getTaxRuleTypeTranslation_RepositoryService()
    {
        return $this->services['tax_rule_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition'] ?? $this->getTaxRuleTypeTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'theme.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getTheme_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['theme.repository'])) {
            return $this->services['theme.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['theme.repository'])) {
            return $this->services['theme.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['theme.repository'])) {
            return $this->services['theme.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['theme.repository'])) {
            return $this->services['theme.repository'];
        }

        return $this->services['theme.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Storefront\\Theme\\ThemeDefinition'] ?? $this->getThemeDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'theme_child.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getThemeChild_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['theme_child.repository'])) {
            return $this->services['theme_child.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['theme_child.repository'])) {
            return $this->services['theme_child.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['theme_child.repository'])) {
            return $this->services['theme_child.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['theme_child.repository'])) {
            return $this->services['theme_child.repository'];
        }

        return $this->services['theme_child.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'] ?? $this->getThemeChildDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'theme_media.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getThemeMedia_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['theme_media.repository'])) {
            return $this->services['theme_media.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['theme_media.repository'])) {
            return $this->services['theme_media.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['theme_media.repository'])) {
            return $this->services['theme_media.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['theme_media.repository'])) {
            return $this->services['theme_media.repository'];
        }

        return $this->services['theme_media.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition'] ?? $this->getThemeMediaDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'theme_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getThemeSalesChannel_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['theme_sales_channel.repository'])) {
            return $this->services['theme_sales_channel.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['theme_sales_channel.repository'])) {
            return $this->services['theme_sales_channel.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['theme_sales_channel.repository'])) {
            return $this->services['theme_sales_channel.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['theme_sales_channel.repository'])) {
            return $this->services['theme_sales_channel.repository'];
        }

        return $this->services['theme_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition'] ?? $this->getThemeSalesChannelDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'theme_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getThemeTranslation_RepositoryService()
    {
        return $this->services['theme_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition'] ?? $this->getThemeTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'translator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Translation\Translator
     */
    protected function getTranslatorService()
    {
        $a = ($this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'] ?? $this->getSnippetServiceService());

        if (isset($this->services['translator'])) {
            return $this->services['translator'];
        }
        $b = ($this->services['snippet_set.repository'] ?? $this->getSnippetSet_RepositoryService());

        if (isset($this->services['translator'])) {
            return $this->services['translator'];
        }

        return $this->services['translator'] = new \Shopware\Core\Framework\Adapter\Translation\Translator(($this->privates['translator.default'] ?? $this->getTranslator_DefaultService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->privates['translator.formatter.default'] ?? $this->getTranslator_Formatter_DefaultService()), $a, 'prod', $b, ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService()));
    }

    /*
     * Gets the public 'unit.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getUnit_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['unit.repository'])) {
            return $this->services['unit.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['unit.repository'])) {
            return $this->services['unit.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['unit.repository'])) {
            return $this->services['unit.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['unit.repository'])) {
            return $this->services['unit.repository'];
        }

        return $this->services['unit.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Unit\\UnitDefinition'] ?? $this->getUnitDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'unit_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getUnitTranslation_RepositoryService()
    {
        return $this->services['unit_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition'] ?? $this->getUnitTranslationDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'user.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getUser_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['user.repository'])) {
            return $this->services['user.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['user.repository'])) {
            return $this->services['user.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['user.repository'])) {
            return $this->services['user.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['user.repository'])) {
            return $this->services['user.repository'];
        }

        return $this->services['user.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\User\\UserDefinition'] ?? $this->getUserDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'user_access_key.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getUserAccessKey_RepositoryService()
    {
        return $this->services['user_access_key.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition'] ?? $this->getUserAccessKeyDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'user_config.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getUserConfig_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['user_config.repository'])) {
            return $this->services['user_config.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['user_config.repository'])) {
            return $this->services['user_config.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['user_config.repository'])) {
            return $this->services['user_config.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['user_config.repository'])) {
            return $this->services['user_config.repository'];
        }

        return $this->services['user_config.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition'] ?? $this->getUserConfigDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'user_recovery.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getUserRecovery_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['user_recovery.repository'])) {
            return $this->services['user_recovery.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['user_recovery.repository'])) {
            return $this->services['user_recovery.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['user_recovery.repository'])) {
            return $this->services['user_recovery.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['user_recovery.repository'])) {
            return $this->services['user_recovery.repository'];
        }

        return $this->services['user_recovery.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition'] ?? $this->getUserRecoveryDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'version.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getVersion_RepositoryService()
    {
        return $this->services['version.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] ?? $this->getVersionDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'version_commit.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getVersionCommit_RepositoryService()
    {
        return $this->services['version_commit.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] ?? $this->getVersionCommitDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'version_commit_data.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getVersionCommitData_RepositoryService()
    {
        return $this->services['version_commit_data.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] ?? $this->getVersionCommitDataDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'webhook.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getWebhook_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['webhook.repository'])) {
            return $this->services['webhook.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['webhook.repository'])) {
            return $this->services['webhook.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['webhook.repository'])) {
            return $this->services['webhook.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['webhook.repository'])) {
            return $this->services['webhook.repository'];
        }

        return $this->services['webhook.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Webhook\\WebhookDefinition'] ?? $this->getWebhookDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the public 'webhook_event_log.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator
     */
    protected function getWebhookEventLog_RepositoryService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->services['webhook_event_log.repository'])) {
            return $this->services['webhook_event_log.repository'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->services['webhook_event_log.repository'])) {
            return $this->services['webhook_event_log.repository'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->services['webhook_event_log.repository'])) {
            return $this->services['webhook_event_log.repository'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->services['webhook_event_log.repository'])) {
            return $this->services['webhook_event_log.repository'];
        }

        return $this->services['webhook_event_log.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryForwardCompatibilityDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition'] ?? $this->getWebhookEventLogDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the private '.Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function getSalesChannelUpdateDomainCommand_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('sales-channel:update:domain', [], 'Changes the domain of all sales channels', false, function (): \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand {
            return ($this->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand'] ?? $this->getSalesChannelUpdateDomainCommandService());
        });
    }

    /*
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function getElasticsearchAdminIndexingCommand_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:admin:index', [], 'Index the elasticsearch for the admin search', false, function (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand {
            return ($this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] ?? $this->getElasticsearchAdminIndexingCommandService());
        });
    }

    /*
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function getElasticsearchAdminResetCommand_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:admin:reset', [], 'Reset Admin Elasticsearch indexing', false, function (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand {
            return ($this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand'] ?? $this->getElasticsearchAdminResetCommandService());
        });
    }

    /*
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function getElasticsearchAdminTestCommand_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:admin:test', [], 'Allows you to test the admin search index', false, function (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand {
            return ($this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand'] ?? $this->getElasticsearchAdminTestCommandService());
        });
    }

    /*
     * Gets the private '.Symfony\Component\Dotenv\Command\DotenvDumpCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function getDotenvDumpCommand_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('dotenv:dump', [], 'Compiles .env files to .env.local.php', false, function (): \Symfony\Component\Dotenv\Command\DotenvDumpCommand {
            return ($this->privates['Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand'] ?? $this->getDotenvDumpCommandService());
        });
    }

    /*
     * Gets the private '.cache.http.inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function get_Cache_Http_InnerService()
    {
        $this->privates['.cache.http.inner'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('SNwqfAZjeZ', 172800, ($this->targetDir.''.'/pools/app'), ($this->privates['cache.default_marshaller'] ?? ($this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false))));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the private '.cache.object.inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function get_Cache_Object_InnerService()
    {
        $this->privates['.cache.object.inner'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('HJGnhPDit2', 172800, ($this->targetDir.''.'/pools/app'), ($this->privates['cache.default_marshaller'] ?? ($this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false))));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the private '.console.command.about.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_About_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.about.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('about', [], 'Display information about the current project', false, function (): \Symfony\Bundle\FrameworkBundle\Command\AboutCommand {
            return ($this->privates['console.command.about'] ?? $this->getConsole_Command_AboutService());
        });
    }

    /*
     * Gets the private '.console.command.cache_clear.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_CacheClear_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.cache_clear.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:clear', [], 'Clear the cache', false, function (): \Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand {
            return ($this->privates['console.command.cache_clear'] ?? $this->getConsole_Command_CacheClearService());
        });
    }

    /*
     * Gets the private '.console.command.cache_pool_clear.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_CachePoolClear_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.cache_pool_clear.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:clear', [], 'Clear cache pools', false, function (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand {
            return ($this->privates['console.command.cache_pool_clear'] ?? $this->getConsole_Command_CachePoolClearService());
        });
    }

    /*
     * Gets the private '.console.command.cache_pool_delete.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_CachePoolDelete_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.cache_pool_delete.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:delete', [], 'Delete an item from a cache pool', false, function (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand {
            return ($this->privates['console.command.cache_pool_delete'] ?? $this->getConsole_Command_CachePoolDeleteService());
        });
    }

    /*
     * Gets the private '.console.command.cache_pool_list.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_CachePoolList_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.cache_pool_list.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:list', [], 'List available cache pools', false, function (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand {
            return ($this->privates['console.command.cache_pool_list'] ?? $this->getConsole_Command_CachePoolListService());
        });
    }

    /*
     * Gets the private '.console.command.cache_pool_prune.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_CachePoolPrune_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.cache_pool_prune.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:prune', [], 'Prune cache pools', false, function (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand {
            return ($this->privates['console.command.cache_pool_prune'] ?? $this->getConsole_Command_CachePoolPruneService());
        });
    }

    /*
     * Gets the private '.console.command.cache_warmup.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_CacheWarmup_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.cache_warmup.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:warmup', [], 'Warm up an empty cache', false, function (): \Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand {
            return ($this->privates['console.command.cache_warmup'] ?? $this->getConsole_Command_CacheWarmupService());
        });
    }

    /*
     * Gets the private '.console.command.config_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_ConfigDebug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.config_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:config', [], 'Dump the current configuration for an extension', false, function (): \Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand {
            return ($this->privates['console.command.config_debug'] ?? $this->getConsole_Command_ConfigDebugService());
        });
    }

    /*
     * Gets the private '.console.command.config_dump_reference.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_ConfigDumpReference_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.config_dump_reference.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('config:dump-reference', [], 'Dump the default configuration for an extension', false, function (): \Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand {
            return ($this->privates['console.command.config_dump_reference'] ?? $this->getConsole_Command_ConfigDumpReferenceService());
        });
    }

    /*
     * Gets the private '.console.command.container_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_ContainerDebug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.container_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:container', [], 'Display current services for an application', false, function (): \Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand {
            return ($this->privates['console.command.container_debug'] ?? $this->getConsole_Command_ContainerDebugService());
        });
    }

    /*
     * Gets the private '.console.command.container_lint.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_ContainerLint_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.container_lint.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('lint:container', [], 'Ensure that arguments injected into services match type declarations', false, function (): \Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand {
            return ($this->privates['console.command.container_lint'] ?? $this->getConsole_Command_ContainerLintService());
        });
    }

    /*
     * Gets the private '.console.command.debug_autowiring.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_DebugAutowiring_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.debug_autowiring.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:autowiring', [], 'List classes/interfaces you can use for autowiring', false, function (): \Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand {
            return ($this->privates['console.command.debug_autowiring'] ?? $this->getConsole_Command_DebugAutowiringService());
        });
    }

    /*
     * Gets the private '.console.command.dotenv_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_DotenvDebug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.dotenv_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:dotenv', [], 'Lists all dotenv files with variables and values', false, function (): \Symfony\Component\Dotenv\Command\DebugCommand {
            return ($this->privates['console.command.dotenv_debug'] ?? $this->getConsole_Command_DotenvDebugService());
        });
    }

    /*
     * Gets the private '.console.command.event_dispatcher_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_EventDispatcherDebug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.event_dispatcher_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:event-dispatcher', [], 'Display configured listeners for an application', false, function (): \Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand {
            return ($this->privates['console.command.event_dispatcher_debug'] ?? $this->getConsole_Command_EventDispatcherDebugService());
        });
    }

    /*
     * Gets the private '.console.command.messenger_consume_messages.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_MessengerConsumeMessages_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.messenger_consume_messages.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:consume', [], 'Consume messages', false, function (): \Symfony\Component\Messenger\Command\ConsumeMessagesCommand {
            return ($this->privates['console.command.messenger_consume_messages'] ?? $this->getConsole_Command_MessengerConsumeMessagesService());
        });
    }

    /*
     * Gets the private '.console.command.messenger_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_MessengerDebug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.messenger_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:messenger', [], 'List messages you can dispatch using the message buses', false, function (): \Symfony\Component\Messenger\Command\DebugCommand {
            return ($this->privates['console.command.messenger_debug'] ?? $this->getConsole_Command_MessengerDebugService());
        });
    }

    /*
     * Gets the private '.console.command.messenger_setup_transports.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_MessengerSetupTransports_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.messenger_setup_transports.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:setup-transports', [], 'Prepare the required infrastructure for the transport', false, function (): \Symfony\Component\Messenger\Command\SetupTransportsCommand {
            return ($this->privates['console.command.messenger_setup_transports'] ?? $this->getConsole_Command_MessengerSetupTransportsService());
        });
    }

    /*
     * Gets the private '.console.command.messenger_stop_workers.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_MessengerStopWorkers_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.messenger_stop_workers.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:stop-workers', [], 'Stop workers after their current message', false, function (): \Symfony\Component\Messenger\Command\StopWorkersCommand {
            return ($this->privates['console.command.messenger_stop_workers'] ?? $this->getConsole_Command_MessengerStopWorkersService());
        });
    }

    /*
     * Gets the private '.console.command.router_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_RouterDebug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.router_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:router', [], 'Display current routes for an application', false, function (): \Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand {
            return ($this->privates['console.command.router_debug'] ?? $this->getConsole_Command_RouterDebugService());
        });
    }

    /*
     * Gets the private '.console.command.router_match.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_RouterMatch_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.router_match.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('router:match', [], 'Help debug routes by simulating a path info match', false, function (): \Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand {
            return ($this->privates['console.command.router_match'] ?? $this->getConsole_Command_RouterMatchService());
        });
    }

    /*
     * Gets the private '.console.command.secrets_decrypt_to_local.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_SecretsDecryptToLocal_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.secrets_decrypt_to_local.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:decrypt-to-local', [], 'Decrypt all secrets and stores them in the local vault', false, function (): \Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand {
            return ($this->privates['console.command.secrets_decrypt_to_local'] ?? $this->getConsole_Command_SecretsDecryptToLocalService());
        });
    }

    /*
     * Gets the private '.console.command.secrets_encrypt_from_local.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_SecretsEncryptFromLocal_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.secrets_encrypt_from_local.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:encrypt-from-local', [], 'Encrypt all local secrets to the vault', false, function (): \Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand {
            return ($this->privates['console.command.secrets_encrypt_from_local'] ?? $this->getConsole_Command_SecretsEncryptFromLocalService());
        });
    }

    /*
     * Gets the private '.console.command.secrets_generate_key.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_SecretsGenerateKey_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.secrets_generate_key.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:generate-keys', [], 'Generate new encryption keys', false, function (): \Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand {
            return ($this->privates['console.command.secrets_generate_key'] ?? $this->getConsole_Command_SecretsGenerateKeyService());
        });
    }

    /*
     * Gets the private '.console.command.secrets_list.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_SecretsList_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.secrets_list.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:list', [], 'List all secrets', false, function (): \Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand {
            return ($this->privates['console.command.secrets_list'] ?? $this->getConsole_Command_SecretsListService());
        });
    }

    /*
     * Gets the private '.console.command.secrets_remove.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_SecretsRemove_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.secrets_remove.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:remove', [], 'Remove a secret from the vault', false, function (): \Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand {
            return ($this->privates['console.command.secrets_remove'] ?? $this->getConsole_Command_SecretsRemoveService());
        });
    }

    /*
     * Gets the private '.console.command.secrets_set.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_SecretsSet_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.secrets_set.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:set', [], 'Set a secret in the vault', false, function (): \Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand {
            return ($this->privates['console.command.secrets_set'] ?? $this->getConsole_Command_SecretsSetService());
        });
    }

    /*
     * Gets the private '.console.command.translation_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_TranslationDebug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.translation_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:translation', [], 'Display translation messages information', false, function (): \Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand {
            return ($this->privates['console.command.translation_debug'] ?? $this->getConsole_Command_TranslationDebugService());
        });
    }

    /*
     * Gets the private '.console.command.translation_extract.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_TranslationExtract_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.translation_extract.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('translation:extract', [0 => 'translation:update'], 'Extract missing translations keys from code to translation files.', false, function (): \Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand {
            return ($this->privates['console.command.translation_extract'] ?? $this->getConsole_Command_TranslationExtractService());
        });
    }

    /*
     * Gets the private '.console.command.translation_pull.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_TranslationPull_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.translation_pull.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('translation:pull', [], 'Pull translations from a given provider.', false, function (): \Symfony\Component\Translation\Command\TranslationPullCommand {
            return ($this->privates['console.command.translation_pull'] ?? $this->getConsole_Command_TranslationPullService());
        });
    }

    /*
     * Gets the private '.console.command.translation_push.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_TranslationPush_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.translation_push.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('translation:push', [], 'Push translations to a given provider.', false, function (): \Symfony\Component\Translation\Command\TranslationPushCommand {
            return ($this->privates['console.command.translation_push'] ?? $this->getConsole_Command_TranslationPushService());
        });
    }

    /*
     * Gets the private '.console.command.validator_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_ValidatorDebug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.validator_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:validator', [], 'Display validation constraints for classes', false, function (): \Symfony\Component\Validator\Command\DebugCommand {
            return ($this->privates['console.command.validator_debug'] ?? $this->getConsole_Command_ValidatorDebugService());
        });
    }

    /*
     * Gets the private '.console.command.xliff_lint.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_XliffLint_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.xliff_lint.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('lint:xliff', [], 'Lint an XLIFF file and outputs encountered errors', false, function (): \Symfony\Component\Translation\Command\XliffLintCommand {
            return ($this->privates['console.command.xliff_lint'] ?? $this->getConsole_Command_XliffLintService());
        });
    }

    /*
     * Gets the private '.console.command.yaml_lint.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Console_Command_YamlLint_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.console.command.yaml_lint.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('lint:yaml', [], 'Lint a YAML file and outputs encountered errors', false, function (): \Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand {
            return ($this->privates['console.command.yaml_lint'] ?? $this->getConsole_Command_YamlLintService());
        });
    }

    /*
     * Gets the private '.errored..service_locator.KfbR3DY.Symfony\Component\Config\Loader\LoaderInterface' shared service.
     *
     * @return \Symfony\Component\Config\Loader\LoaderInterface
     */
    protected function getLoaderInterfaceService()
    {
        $this->throw('Cannot autowire service ".service_locator.KfbR3DY": it references interface "Symfony\\Component\\Config\\Loader\\LoaderInterface" but no such service exists. You should maybe alias this interface to one of these existing services: "Shopware\\Core\\Framework\\Api\\Route\\ApiRouteLoader", "routing.loader.xml", "routing.loader.yml", "routing.loader.php", "routing.loader.glob", "routing.loader.directory", "routing.loader.container", "routing.loader", "routing.loader.annotation", "routing.loader.annotation.directory", "routing.loader.annotation.file".');
    }

    /*
     * Gets the private '.errored..service_locator.Q1m2WkM.Shopware\Core\Framework\Validation\DataBag\RequestDataBag' shared service.
     *
     * @return \Shopware\Core\Framework\Validation\DataBag\RequestDataBag
     */
    protected function getRequestDataBagService()
    {
        $this->throw('Cannot autowire service ".service_locator.Q1m2WkM": it references class "Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag" but no such service exists.');
    }

    /*
     * Gets the private '.messenger.handler_descriptor.2yo6BZJ' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_2yo6BZJService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService());

        if (isset($this->privates['.messenger.handler_descriptor.2yo6BZJ'])) {
            return $this->privates['.messenger.handler_descriptor.2yo6BZJ'];
        }

        return $this->privates['.messenger.handler_descriptor.2yo6BZJ'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.3.rzR14' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_3_RzR14Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.3.rzR14'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileHandler'] ?? $this->getDeleteFileHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.4htA3jl' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_4htA3jlService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'] ?? $this->getProductExportPartialGenerationHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.4htA3jl'])) {
            return $this->privates['.messenger.handler_descriptor.4htA3jl'];
        }

        return $this->privates['.messenger.handler_descriptor.4htA3jl'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.6XWr01B' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_6XWr01BService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.6XWr01B'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\SleepTaskHandler'] ?? $this->getSleepTaskHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.6a6vTR.' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_6a6vTR_Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'] ?? $this->getGenerateThumbnailsHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.6a6vTR.'])) {
            return $this->privates['.messenger.handler_descriptor.6a6vTR.'];
        }

        return $this->privates['.messenger.handler_descriptor.6a6vTR.'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.6kBcctU' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_6kBcctUService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.6kBcctU'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'] ?? $this->getNewsletterRecipientTaskHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.88lOdtC' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_88lOdtCService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'] ?? $this->getGenerateThumbnailsHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.88lOdtC'])) {
            return $this->privates['.messenger.handler_descriptor.88lOdtC'];
        }

        return $this->privates['.messenger.handler_descriptor.88lOdtC'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.9FtfQXI' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_9FtfQXIService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.9FtfQXI'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler'] ?? $this->getCacheWarmerTaskHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.9zA2HRZ' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_9zA2HRZService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? $this->getElasticsearchIndexerService());

        if (isset($this->privates['.messenger.handler_descriptor.9zA2HRZ'])) {
            return $this->privates['.messenger.handler_descriptor.9zA2HRZ'];
        }

        return $this->privates['.messenger.handler_descriptor.9zA2HRZ'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.BzkW.st' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_BzkW_StService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'] ?? $this->getRequeueDeadMessagesHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.BzkW.st'])) {
            return $this->privates['.messenger.handler_descriptor.BzkW.st'];
        }

        return $this->privates['.messenger.handler_descriptor.BzkW.st'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.D8Msq11' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_D8Msq11Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.D8Msq11'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'] ?? $this->getCleanupCartTaskHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.RWDR7vF' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_RWDR7vFService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'] ?? $this->getSitemapGenerateTaskHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.RWDR7vF'])) {
            return $this->privates['.messenger.handler_descriptor.RWDR7vF'];
        }

        return $this->privates['.messenger.handler_descriptor.RWDR7vF'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.RaXVyBY' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_RaXVyBYService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] ?? $this->getCreateAliasTaskHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.RaXVyBY'])) {
            return $this->privates['.messenger.handler_descriptor.RaXVyBY'];
        }

        return $this->privates['.messenger.handler_descriptor.RaXVyBY'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.Sx4TzkJ' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_Sx4TzkJService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'] ?? $this->getImportExportHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.Sx4TzkJ'])) {
            return $this->privates['.messenger.handler_descriptor.Sx4TzkJ'];
        }

        return $this->privates['.messenger.handler_descriptor.Sx4TzkJ'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.TaMu3bd' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_TaMu3bdService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.TaMu3bd'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler'] ?? $this->getDeleteFileHandler2Service()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.W5d8anj' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_W5d8anjService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\EncryptedMessageHandler'] ?? $this->getEncryptedMessageHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.W5d8anj'])) {
            return $this->privates['.messenger.handler_descriptor.W5d8anj'];
        }

        return $this->privates['.messenger.handler_descriptor.W5d8anj'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.Z5qzcmD' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_Z5qzcmDService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'] ?? $this->getWebhookEventMessageHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.Z5qzcmD'])) {
            return $this->privates['.messenger.handler_descriptor.Z5qzcmD'];
        }

        return $this->privates['.messenger.handler_descriptor.Z5qzcmD'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.ZFmY.qW' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_ZFmY_QWService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? $this->getElasticsearchIndexerService());

        if (isset($this->privates['.messenger.handler_descriptor.ZFmY.qW'])) {
            return $this->privates['.messenger.handler_descriptor.ZFmY.qW'];
        }

        return $this->privates['.messenger.handler_descriptor.ZFmY.qW'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor._mx1WXF' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_Mx1WXFService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor._mx1WXF'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'] ?? $this->getCleanupSalesChannelContextTaskHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.aM76mVQ' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_AM76mVQService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'] ?? $this->getInvalidateCacheTaskHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.aM76mVQ'])) {
            return $this->privates['.messenger.handler_descriptor.aM76mVQ'];
        }

        return $this->privates['.messenger.handler_descriptor.aM76mVQ'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.bD1J5H6' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_BD1J5H6Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'] ?? $this->getDeleteCascadeAppsHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.bD1J5H6'])) {
            return $this->privates['.messenger.handler_descriptor.bD1J5H6'];
        }

        return $this->privates['.messenger.handler_descriptor.bD1J5H6'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.blq.UUc' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_Blq_UUcService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? $this->getAdminSearchRegistryService());

        if (isset($this->privates['.messenger.handler_descriptor.blq.UUc'])) {
            return $this->privates['.messenger.handler_descriptor.blq.UUc'];
        }

        return $this->privates['.messenger.handler_descriptor.blq.UUc'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.dVP21hY' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_DVP21hYService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.dVP21hY'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'] ?? $this->getRegisterScheduledTaskHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.g5T3Vdz' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_G5T3VdzService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['mailer.messenger.message_handler'] ?? $this->getMailer_Messenger_MessageHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.g5T3Vdz'])) {
            return $this->privates['.messenger.handler_descriptor.g5T3Vdz'];
        }

        return $this->privates['.messenger.handler_descriptor.g5T3Vdz'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.goUFZIo' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_GoUFZIoService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'] ?? $this->getCleanupOldCacheFoldersHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.goUFZIo'])) {
            return $this->privates['.messenger.handler_descriptor.goUFZIo'];
        }

        return $this->privates['.messenger.handler_descriptor.goUFZIo'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.h1gRAD1' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_H1gRAD1Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'] ?? $this->getLogCleanupTaskHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.h1gRAD1'])) {
            return $this->privates['.messenger.handler_descriptor.h1gRAD1'];
        }

        return $this->privates['.messenger.handler_descriptor.h1gRAD1'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.hq66vfV' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_Hq66vfVService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService());

        if (isset($this->privates['.messenger.handler_descriptor.hq66vfV'])) {
            return $this->privates['.messenger.handler_descriptor.hq66vfV'];
        }

        return $this->privates['.messenger.handler_descriptor.hq66vfV'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.n5_pcyU' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_N5PcyUService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'] ?? $this->getCleanupVersionTaskHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.n5_pcyU'])) {
            return $this->privates['.messenger.handler_descriptor.n5_pcyU'];
        }

        return $this->privates['.messenger.handler_descriptor.n5_pcyU'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.rvKU_JQ' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_RvKUJQService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\RetryMessageHandler'] ?? $this->getRetryMessageHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.rvKU_JQ'])) {
            return $this->privates['.messenger.handler_descriptor.rvKU_JQ'];
        }

        return $this->privates['.messenger.handler_descriptor.rvKU_JQ'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.vN2QjSm' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_VN2QjSmService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'] ?? $this->getUpdateAppsHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.vN2QjSm'])) {
            return $this->privates['.messenger.handler_descriptor.vN2QjSm'];
        }

        return $this->privates['.messenger.handler_descriptor.vN2QjSm'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.vhvNn_P' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_VhvNnPService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.vhvNn_P'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'] ?? $this->getCleanupProductKeywordDictionaryTaskHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.wUKKx8c' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_WUKKx8cService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'] ?? $this->getCleanupUnusedDownloadMediaTaskHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.wUKKx8c'])) {
            return $this->privates['.messenger.handler_descriptor.wUKKx8c'];
        }

        return $this->privates['.messenger.handler_descriptor.wUKKx8c'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.wYSIMNj' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_WYSIMNjService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'] ?? $this->getProductExportGenerateTaskHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.wYSIMNj'])) {
            return $this->privates['.messenger.handler_descriptor.wYSIMNj'];
        }

        return $this->privates['.messenger.handler_descriptor.wYSIMNj'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.yKXilMm' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_YKXilMmService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.yKXilMm'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'] ?? $this->getCleanupImportExportFileTaskHandlerService()), []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.z290ooz' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_Z290oozService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'] ?? $this->getSitemapGenerateTaskHandlerService());

        if (isset($this->privates['.messenger.handler_descriptor.z290ooz'])) {
            return $this->privates['.messenger.handler_descriptor.z290ooz'];
        }

        return $this->privates['.messenger.handler_descriptor.z290ooz'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /*
     * Gets the private '.messenger.handler_descriptor.zfOhFjq' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected function get_Messenger_HandlerDescriptor_ZfOhFjqService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $this->privates['.messenger.handler_descriptor.zfOhFjq'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'] ?? $this->getUpdateProductStreamMappingTaskHandlerService()), []);
    }

    /*
     * Gets the private '.service_locator.KfbR3DY' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_KfbR3DYService()
    {
        return $this->privates['.service_locator.KfbR3DY'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'loader' => ['privates', '.errored..service_locator.KfbR3DY.Symfony\\Component\\Config\\Loader\\LoaderInterface', NULL, 'Cannot autowire service ".service_locator.KfbR3DY": it references interface "Symfony\\Component\\Config\\Loader\\LoaderInterface" but no such service exists. You should maybe alias this interface to one of these existing services: "Shopware\\Core\\Framework\\Api\\Route\\ApiRouteLoader", "routing.loader.xml", "routing.loader.yml", "routing.loader.php", "routing.loader.glob", "routing.loader.directory", "routing.loader.container", "routing.loader", "routing.loader.annotation", "routing.loader.annotation.directory", "routing.loader.annotation.file".'],
        ], [
            'loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]);
    }

    /*
     * Gets the private '.service_locator.N1ijGuF' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_N1ijGuFService()
    {
        return $this->privates['.service_locator.N1ijGuF'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'pluginLoader' => ['services', 'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader', 'getKernelPluginLoaderService', false],
        ], [
            'pluginLoader' => 'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader',
        ]);
    }

    /*
     * Gets the private '.service_locator.Q1m2WkM' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_Q1m2WkMService()
    {
        return $this->privates['.service_locator.Q1m2WkM'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'dataBag' => ['privates', '.errored..service_locator.Q1m2WkM.Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag', NULL, 'Cannot autowire service ".service_locator.Q1m2WkM": it references class "Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag" but no such service exists.'],
        ], [
            'dataBag' => 'Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag',
        ]);
    }

    /*
     * Gets the private '.service_locator.ltYzMMM' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function get_ServiceLocator_LtYzMMMService()
    {
        return $this->privates['.service_locator.ltYzMMM'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'default' => ['privates', 'messenger.transport.default', 'getMessenger_Transport_DefaultService', false],
            'messenger.transport.default' => ['privates', 'messenger.transport.default', 'getMessenger_Transport_DefaultService', false],
        ], [
            'default' => '?',
            'messenger.transport.default' => '?',
        ]);
    }

    /*
     * Gets the private '.session.deprecated' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\SessionInterface
     */
    protected function get_Session_DeprecatedService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Session/DeprecatedSessionFactory.php';

        return $this->privates['.session.deprecated'] = (new \Symfony\Bundle\FrameworkBundle\Session\DeprecatedSessionFactory(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()))))->getSession();
    }

    /*
     * Gets the private '.twig.command.debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Twig_Command_Debug_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.twig.command.debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:twig', [], 'Show a list of twig functions, filters, globals and tests', false, function (): \Symfony\Bridge\Twig\Command\DebugCommand {
            return ($this->privates['twig.command.debug'] ?? $this->getTwig_Command_DebugService());
        });
    }

    /*
     * Gets the private '.twig.command.lint.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected function get_Twig_Command_Lint_LazyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $this->privates['.twig.command.lint.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('lint:twig', [], 'Lint a Twig template and outputs encountered errors', false, function (): \Symfony\Bundle\TwigBundle\Command\LintCommand {
            return ($this->privates['twig.command.lint'] ?? $this->getTwig_Command_LintService());
        });
    }

    /*
     * Gets the private 'Shopware\Administration\System\SalesChannel\Subscriber\SalesChannelUserConfigSubscriber' shared service.
     *
     * @return \Shopware\Administration\System\SalesChannel\Subscriber\SalesChannelUserConfigSubscriber
     */
    protected function getSalesChannelUserConfigSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/System/SalesChannel/Subscriber/SalesChannelUserConfigSubscriber.php';

        $a = ($this->services['user_config.repository'] ?? $this->getUserConfig_RepositoryService());

        if (isset($this->privates['Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber'])) {
            return $this->privates['Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber'];
        }

        return $this->privates['Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber'] = new \Shopware\Administration\System\SalesChannel\Subscriber\SalesChannelUserConfigSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Address\AddressValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Address\AddressValidator
     */
    protected function getAddressValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Address/AddressValidator.php';

        $a = ($this->services['country.repository'] ?? $this->getCountry_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'] = new \Shopware\Core\Checkout\Cart\Address\AddressValidator($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\CachedRuleLoader' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CachedRuleLoader
     */
    protected function getCachedRuleLoaderService()
    {
        $a = ($this->services['rule.repository'] ?? $this->getRule_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'] = new \Shopware\Core\Checkout\Cart\CachedRuleLoader(new \Shopware\Core\Checkout\Cart\RuleLoader($a), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\CartCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CartCalculator
     */
    protected function getCartCalculatorService()
    {
        $a = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? $this->getCartRuleLoaderService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] = new \Shopware\Core\Checkout\Cart\CartCalculator($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\CartPersister' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CartPersister
     */
    protected function getCartPersisterService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'];
        }
        $b = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] = new \Shopware\Core\Checkout\Cart\CartPersister($b, $a, new \Shopware\Core\Checkout\Cart\CartSerializationCleaner($b, $a), false);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\CartRuleLoader' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CartRuleLoader
     */
    protected function getCartRuleLoaderService()
    {
        $a = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Cart\\Processor'] ?? $this->getProcessorService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'];
        }
        $c = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'] ?? $this->getCachedRuleLoaderService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] = new \Shopware\Core\Checkout\Cart\CartRuleLoader($a, $b, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), $c, ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxDetector'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxDetector'] = new \Shopware\Core\Checkout\Cart\Tax\TaxDetector())), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $d);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\CartValueResolver' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CartValueResolver
     */
    protected function getCartValueResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartValueResolver.php';

        $a = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\CartValueResolver'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartValueResolver'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\CartValueResolver'] = new \Shopware\Core\Checkout\Cart\CartValueResolver($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Cleanup\CleanupCartTaskHandler' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Cleanup\CleanupCartTaskHandler
     */
    protected function getCleanupCartTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Cleanup/CleanupCartTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'] = new \Shopware\Core\Checkout\Cart\Cleanup\CleanupCartTaskHandler($a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), 120);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Command\CartMigrateCommand' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Command\CartMigrateCommand
     */
    protected function getCartMigrateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Command/CartMigrateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/RedisConnectionFactory.php';

        $this->privates['Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand'] = $instance = new \Shopware\Core\Checkout\Cart\Command\CartMigrateCommand(NULL, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), false, 120, new \Shopware\Core\Framework\Adapter\Cache\RedisConnectionFactory($this->getEnv('REDIS_PREFIX')));

        $instance->setName('cart:migrate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\CreditCartProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CreditCartProcessor
     */
    protected function getCreditCartProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CreditCartProcessor.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\CreditCartProcessor'] = new \Shopware\Core\Checkout\Cart\CreditCartProcessor(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AbsolutePriceCalculator'] ?? $this->getAbsolutePriceCalculatorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\CustomCartProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CustomCartProcessor
     */
    protected function getCustomCartProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartDataCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CustomCartProcessor.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\CustomCartProcessor'] = new \Shopware\Core\Checkout\Cart\CustomCartProcessor(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Delivery\DeliveryProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Delivery\DeliveryProcessor
     */
    protected function getDeliveryProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartDataCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Delivery/DeliveryProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Delivery/DeliveryCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Delivery/DeliveryBuilder.php';

        $a = ($this->services['shipping_method.repository'] ?? $this->getShippingMethod_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'] = new \Shopware\Core\Checkout\Cart\Delivery\DeliveryProcessor(($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryBuilder'] = new \Shopware\Core\Checkout\Cart\Delivery\DeliveryBuilder())), new \Shopware\Core\Checkout\Cart\Delivery\DeliveryCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] = new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder()))), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Facade\CartFacadeHelper' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Facade\CartFacadeHelper
     */
    protected function getCartFacadeHelperService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Facade/CartFacadeHelper.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHelper'] = new \Shopware\Core\Checkout\Cart\Facade\CartFacadeHelper(($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] ?? $this->getLineItemFactoryRegistryService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Processor'] ?? $this->getProcessorService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CreditLineItemFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CreditLineItemFactory
     */
    protected function getCreditLineItemFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/LineItemFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/CreditLineItemFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/PriceDefinitionFactory.php';

        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CreditLineItemFactory'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CreditLineItemFactory'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CreditLineItemFactory'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CreditLineItemFactory(($this->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] = new \Shopware\Core\Checkout\Cart\PriceDefinitionFactory())), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CustomLineItemFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CustomLineItemFactory
     */
    protected function getCustomLineItemFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/LineItemFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/CustomLineItemFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/PriceDefinitionFactory.php';

        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CustomLineItemFactory'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CustomLineItemFactory'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CustomLineItemFactory'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CustomLineItemFactory(($this->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] = new \Shopware\Core\Checkout\Cart\PriceDefinitionFactory())), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItemFactoryHandler\ProductLineItemFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\ProductLineItemFactory
     */
    protected function getProductLineItemFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/LineItemFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/ProductLineItemFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/PriceDefinitionFactory.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\ProductLineItemFactory'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\ProductLineItemFactory(($this->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] = new \Shopware\Core\Checkout\Cart\PriceDefinitionFactory())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItemFactoryRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItemFactoryRegistry
     */
    protected function getLineItemFactoryRegistryService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\ProductLineItemFactory'] ?? $this->getProductLineItemFactoryService());
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\PromotionLineItemFactory'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\PromotionLineItemFactory'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\PromotionLineItemFactory()));
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CreditLineItemFactory'] ?? $this->getCreditLineItemFactoryService());
            yield 3 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CustomLineItemFactory'] ?? $this->getCustomLineItemFactoryService());
        }, 4), $a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupBuilder' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupBuilder
     */
    protected function getLineItemGroupBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/LineItemGroupBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/LineItemGroupRuleMatcherInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/RulesMatcher/AnyRuleMatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/RulesMatcher/AbstractAnyRuleLineItemMatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/RulesMatcher/AnyRuleLineItemMatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/AbstractProductLineItemProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/ProductLineItemProvider.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupBuilder'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupBuilder(($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupServiceRegistry'] ?? $this->getLineItemGroupServiceRegistryService()), new \Shopware\Core\Checkout\Cart\LineItem\Group\RulesMatcher\AnyRuleMatcher(new \Shopware\Core\Checkout\Cart\LineItem\Group\RulesMatcher\AnyRuleLineItemMatcher()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemQuantitySplitter'] ?? $this->getLineItemQuantitySplitterService()), new \Shopware\Core\Checkout\Cart\LineItem\Group\ProductLineItemProvider());
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupServiceRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupServiceRegistry
     */
    protected function getLineItemGroupServiceRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/LineItemGroupServiceRegistry.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupServiceRegistry'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupServiceRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupCountPackager'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupCountPackager'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\Packager\LineItemGroupCountPackager()));
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupUnitPriceGrossPackager'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupUnitPriceGrossPackager'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\Packager\LineItemGroupUnitPriceGrossPackager()));
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupUnitPriceNetPackager'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupUnitPriceNetPackager'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\Packager\LineItemGroupUnitPriceNetPackager()));
        }, 3), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Sorter\\LineItemGroupPriceAscSorter'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Sorter\\LineItemGroupPriceAscSorter'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\Sorter\LineItemGroupPriceAscSorter()));
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Sorter\\LineItemGroupPriceDescSorter'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Sorter\\LineItemGroupPriceDescSorter'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\Sorter\LineItemGroupPriceDescSorter()));
        }, 2));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItem\LineItemQuantitySplitter' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItem\LineItemQuantitySplitter
     */
    protected function getLineItemQuantitySplitterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/LineItemQuantitySplitter.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemQuantitySplitter'] = new \Shopware\Core\Checkout\Cart\LineItem\LineItemQuantitySplitter(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Order\OrderConverter' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Order\OrderConverter
     */
    protected function getOrderConverterService()
    {
        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $d = ($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $e = ($this->services['order_address.repository'] ?? $this->getOrderAddress_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $f = ($this->services['product_download.repository'] ?? $this->getProductDownload_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] = new \Shopware\Core\Checkout\Cart\Order\OrderConverter($a, $b, $c, $d, ($this->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] ?? $this->getOrderDefinitionService()), $e, ($this->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? $this->getInitialStateIdLoaderService()), new \Shopware\Core\Checkout\Cart\Order\LineItemDownloadLoader($f));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\AbsolutePriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\AbsolutePriceCalculator
     */
    protected function getAbsolutePriceCalculatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/AbsolutePriceCalculator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AbsolutePriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\AbsolutePriceCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] = new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\AmountCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\AmountCalculator
     */
    protected function getAmountCalculatorService()
    {
        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AmountCalculator'] = new \Shopware\Core\Checkout\Cart\Price\AmountCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] = new \Shopware\Core\Checkout\Cart\Price\CashRounding())), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] = new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder())), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] = new \Shopware\Core\Checkout\Cart\Tax\TaxCalculator())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\CurrencyPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\CurrencyPriceCalculator
     */
    protected function getCurrencyPriceCalculatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/CurrencyPriceCalculator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CurrencyPriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\CurrencyPriceCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] = new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\GrossPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\GrossPriceCalculator
     */
    protected function getGrossPriceCalculatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/GrossPriceCalculator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\GrossPriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\GrossPriceCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] = new \Shopware\Core\Checkout\Cart\Tax\TaxCalculator())), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] = new \Shopware\Core\Checkout\Cart\Price\CashRounding())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\NetPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\NetPriceCalculator
     */
    protected function getNetPriceCalculatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/NetPriceCalculator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\NetPriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\NetPriceCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] = new \Shopware\Core\Checkout\Cart\Tax\TaxCalculator())), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] = new \Shopware\Core\Checkout\Cart\Price\CashRounding())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\PercentagePriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\PercentagePriceCalculator
     */
    protected function getPercentagePriceCalculatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/PercentagePriceCalculator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\PercentagePriceCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] = new \Shopware\Core\Checkout\Cart\Price\CashRounding())), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] = new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\QuantityPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\QuantityPriceCalculator
     */
    protected function getQuantityPriceCalculatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/QuantityPriceCalculator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\QuantityPriceCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\GrossPriceCalculator'] ?? $this->getGrossPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\NetPriceCalculator'] ?? $this->getNetPriceCalculatorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Processor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Processor
     */
    protected function getProcessorService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? $this->getScriptExecutorService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Cart\\Processor'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Cart\\Processor'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Processor'] = new \Shopware\Core\Checkout\Cart\Processor(new \Shopware\Core\Checkout\Cart\Validator(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryValidator'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryValidator'] = new \Shopware\Core\Checkout\Cart\Delivery\DeliveryValidator()));
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemValidator'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemValidator'] = new \Shopware\Core\Checkout\Cart\LineItem\LineItemValidator()));
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'] ?? $this->getAddressValidatorService());
            yield 3 => ($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemValidator'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemValidator'] = new \Shopware\Core\Content\Product\Cart\ProductLineItemValidator()));
            yield 4 => ($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentMethodValidator'] ?? ($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentMethodValidator'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentMethodValidator()));
        }, 5)), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AmountCalculator'] ?? $this->getAmountCalculatorService()), new \Shopware\Core\Checkout\Cart\Transaction\TransactionProcessor(), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'] ?? $this->getProductCartProcessorService());
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionProcessor'] ?? $this->getPromotionProcessorService());
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\CustomCartProcessor'] ?? $this->getCustomCartProcessorService());
            yield 3 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Processor\\ContainerCartProcessor'] ?? $this->getContainerCartProcessorService());
            yield 4 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Processor\\DiscountCartProcessor'] ?? $this->getDiscountCartProcessorService());
            yield 5 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\CreditCartProcessor'] ?? $this->getCreditCartProcessorService());
            yield 6 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'] ?? $this->getDeliveryProcessorService());
            yield 7 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionDeliveryProcessor'] ?? $this->getPromotionDeliveryProcessorService());
        }, 8), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'] ?? $this->getProductCartProcessorService());
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'] ?? $this->getPromotionCollectorService());
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\CustomCartProcessor'] ?? $this->getCustomCartProcessorService());
            yield 3 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'] ?? $this->getDeliveryProcessorService());
        }, 4), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Processor\ContainerCartProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Processor\ContainerCartProcessor
     */
    protected function getContainerCartProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Processor/ContainerCartProcessor.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Processor\\ContainerCartProcessor'] = new \Shopware\Core\Checkout\Cart\Processor\ContainerCartProcessor(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? $this->getPercentagePriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CurrencyPriceCalculator'] ?? $this->getCurrencyPriceCalculatorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Cart\Processor\DiscountCartProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Processor\DiscountCartProcessor
     */
    protected function getDiscountCartProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Processor/DiscountCartProcessor.php';

        return $this->privates['Shopware\\Core\\Checkout\\Cart\\Processor\\DiscountCartProcessor'] = new \Shopware\Core\Checkout\Cart\Processor\DiscountCartProcessor(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? $this->getPercentagePriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CurrencyPriceCalculator'] ?? $this->getCurrencyPriceCalculatorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Command\DeleteUnusedGuestCustomersCommand' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Command\DeleteUnusedGuestCustomersCommand
     */
    protected function getDeleteUnusedGuestCustomersCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Command/DeleteUnusedGuestCustomersCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/DeleteUnusedGuestCustomerService.php';

        $this->privates['Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand'] = $instance = new \Shopware\Core\Checkout\Customer\Command\DeleteUnusedGuestCustomersCommand(new \Shopware\Core\Checkout\Customer\DeleteUnusedGuestCustomerService(($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService())));

        $instance->setName('customer:delete-unused-guests');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\DataAbstractionLayer\CustomerIndexer' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\DataAbstractionLayer\CustomerIndexer
     */
    protected function getCustomerIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/DataAbstractionLayer/CustomerIndexer.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'] = new \Shopware\Core\Checkout\Customer\DataAbstractionLayer\CustomerIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? $this->getManyToManyIdFieldUpdaterService()), ($this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\Indexing\\CustomerNewsletterSalesChannelsUpdater'] ?? $this->getCustomerNewsletterSalesChannelsUpdaterService()), $b);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Password\LegacyPasswordVerifier' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Password\LegacyPasswordVerifier
     */
    protected function getLegacyPasswordVerifierService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Password/LegacyPasswordVerifier.php';

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyPasswordVerifier'] = new \Shopware\Core\Checkout\Customer\Password\LegacyPasswordVerifier(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyEncoder\\Md5'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyEncoder\\Md5'] = new \Shopware\Core\Checkout\Customer\Password\LegacyEncoder\Md5()));
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyEncoder\\Sha256'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyEncoder\\Sha256'] = new \Shopware\Core\Checkout\Customer\Password\LegacyEncoder\Sha256()));
        }, 2));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\SalesChannel\AccountService' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\AccountService
     */
    protected function getAccountServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AccountService.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'];
        }
        $c = ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'] ?? $this->getSwitchDefaultAddressRouteService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'];
        }
        $d = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'] ?? $this->getCartRestorerService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] = new \Shopware\Core\Checkout\Customer\SalesChannel\AccountService($a, $b, ($this->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyPasswordVerifier'] ?? $this->getLegacyPasswordVerifierService()), $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerBeforeDeleteSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerBeforeDeleteSubscriber
     */
    protected function getCustomerBeforeDeleteSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerBeforeDeleteSubscriber.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'];
        }
        $b = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerBeforeDeleteSubscriber($a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerChangePasswordSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerChangePasswordSubscriber
     */
    protected function getCustomerChangePasswordSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerChangePasswordSubscriber.php';

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerChangePasswordSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerChangePasswordSubscriber(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerDefaultSalutationSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerDefaultSalutationSubscriber
     */
    protected function getCustomerDefaultSalutationSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerDefaultSalutationSubscriber.php';

        $a = ($this->services['salutation.repository'] ?? $this->getSalutation_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerDefaultSalutationSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerDefaultSalutationSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerDefaultSalutationSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerDefaultSalutationSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerFlowEventsSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerFlowEventsSubscriber
     */
    protected function getCustomerFlowEventsSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerFlowEventsSubscriber.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'];
        }
        $b = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'] ?? $this->getSalesChannelContextRestorerService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerFlowEventsSubscriber($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerGroupSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerGroupSubscriber
     */
    protected function getCustomerGroupSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerGroupSubscriber.php';

        $a = ($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'];
        }
        $b = ($this->services['seo_url.repository'] ?? $this->getSeoUrl_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'];
        }
        $c = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'];
        }
        $d = ($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'] ?? $this->getSeoUrlPersisterService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerGroupSubscriber($a, $b, $c, $d, ($this->privates['slugify'] ?? $this->getSlugifyService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerMetaFieldSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerMetaFieldSubscriber
     */
    protected function getCustomerMetaFieldSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerMetaFieldSubscriber.php';

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerMetaFieldSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerMetaFieldSubscriber(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerRemoteAddressSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerRemoteAddressSubscriber
     */
    protected function getCustomerRemoteAddressSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerRemoteAddressSubscriber.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerRemoteAddressSubscriber($a, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerTokenSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerTokenSubscriber
     */
    protected function getCustomerTokenSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerTokenSubscriber.php';

        $a = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerTokenSubscriber($a, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\AddressValidationFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\AddressValidationFactory
     */
    protected function getAddressValidationFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/AddressValidationFactory.php';

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\AddressValidationFactory'] = new \Shopware\Core\Checkout\Customer\Validation\AddressValidationFactory(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerEmailUniqueValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerEmailUniqueValidator
     */
    protected function getCustomerEmailUniqueValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/Constraint/CustomerEmailUniqueValidator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerEmailUniqueValidator'] = new \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerEmailUniqueValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerPasswordMatchesValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerPasswordMatchesValidator
     */
    protected function getCustomerPasswordMatchesValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/Constraint/CustomerPasswordMatchesValidator.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] ?? $this->getAccountServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator'] = new \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerPasswordMatchesValidator($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerVatIdentificationValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerVatIdentificationValidator
     */
    protected function getCustomerVatIdentificationValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/Constraint/CustomerVatIdentificationValidator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerVatIdentificationValidator'] = new \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerVatIdentificationValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerZipCodeValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerZipCodeValidator
     */
    protected function getCustomerZipCodeValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/Constraint/CustomerZipCodeValidator.php';

        $a = ($this->services['country.repository'] ?? $this->getCountry_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator'] = new \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerZipCodeValidator($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\CustomerProfileValidationFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\CustomerProfileValidationFactory
     */
    protected function getCustomerProfileValidationFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/CustomerProfileValidationFactory.php';

        return $this->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\CustomerProfileValidationFactory'] = new \Shopware\Core\Checkout\Customer\Validation\CustomerProfileValidationFactory(($this->services['Shopware\\Core\\System\\Salutation\\SalutationDefinition'] ?? $this->getSalutationDefinitionService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\DocumentGenerator\CreditNoteGenerator' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentGenerator\CreditNoteGenerator
     */
    protected function getCreditNoteGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/DocumentGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/CreditNoteGenerator.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? $this->getDocumentTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\CreditNoteGenerator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\CreditNoteGenerator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\CreditNoteGenerator'] = new \Shopware\Core\Checkout\Document\DocumentGenerator\CreditNoteGenerator($a, \dirname(__DIR__, 4));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\DocumentGenerator\DeliveryNoteGenerator' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentGenerator\DeliveryNoteGenerator
     */
    protected function getDeliveryNoteGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/DocumentGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/DeliveryNoteGenerator.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? $this->getDocumentTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\DeliveryNoteGenerator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\DeliveryNoteGenerator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\DeliveryNoteGenerator'] = new \Shopware\Core\Checkout\Document\DocumentGenerator\DeliveryNoteGenerator($a, \dirname(__DIR__, 4));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\DocumentGenerator\DocumentGeneratorRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentGenerator\DocumentGeneratorRegistry
     */
    protected function getDocumentGeneratorRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/DocumentGeneratorRegistry.php';

        return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\DocumentGeneratorRegistry'] = new \Shopware\Core\Checkout\Document\DocumentGenerator\DocumentGeneratorRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\InvoiceGenerator'] ?? $this->getInvoiceGeneratorService());
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\DeliveryNoteGenerator'] ?? $this->getDeliveryNoteGeneratorService());
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\StornoGenerator'] ?? $this->getStornoGeneratorService());
            yield 3 => ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\CreditNoteGenerator'] ?? $this->getCreditNoteGeneratorService());
        }, 4));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\DocumentGenerator\InvoiceGenerator' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentGenerator\InvoiceGenerator
     */
    protected function getInvoiceGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/DocumentGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/InvoiceGenerator.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? $this->getDocumentTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\InvoiceGenerator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\InvoiceGenerator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\InvoiceGenerator'] = new \Shopware\Core\Checkout\Document\DocumentGenerator\InvoiceGenerator($a, \dirname(__DIR__, 4));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\DocumentGenerator\StornoGenerator' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentGenerator\StornoGenerator
     */
    protected function getStornoGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/DocumentGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGenerator/StornoGenerator.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? $this->getDocumentTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\StornoGenerator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\StornoGenerator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\StornoGenerator'] = new \Shopware\Core\Checkout\Document\DocumentGenerator\StornoGenerator($a, \dirname(__DIR__, 4));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\DocumentService' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentService
     */
    protected function getDocumentServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/FileGenerator/FileGeneratorRegistry.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentGenerator\\DocumentGeneratorRegistry'] ?? $this->getDocumentGeneratorRegistryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'];
        }
        $b = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'];
        }
        $c = ($this->services['document.repository'] ?? $this->getDocument_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'];
        }
        $d = ($this->services['document_type.repository'] ?? $this->getDocumentType_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'];
        }
        $e = ($this->services['document_base_config.repository'] ?? $this->getDocumentBaseConfig_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'];
        }
        $f = ($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'];
        }
        $g = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] = new \Shopware\Core\Checkout\Document\DocumentService(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, new \Shopware\Core\Checkout\Document\FileGenerator\FileGeneratorRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Document\\FileGenerator\\PdfGenerator'] ?? $this->getPdfGeneratorService());
        }, 1)), $b, $c, $d, $e, $f, $g);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\FileGenerator\PdfGenerator' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\FileGenerator\PdfGenerator
     */
    protected function getPdfGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/FileGenerator/FileGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/FileGenerator/PdfGenerator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Document\\FileGenerator\\PdfGenerator'] = new \Shopware\Core\Checkout\Document\FileGenerator\PdfGenerator($this->parameters['shopware.dompdf.options']);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\Renderer\CreditNoteRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Renderer\CreditNoteRenderer
     */
    protected function getCreditNoteRendererService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/AbstractDocumentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/CreditNoteRenderer.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? $this->getDocumentConfigLoaderService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }
        $d = ($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? $this->getDocumentTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }
        $e = ($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'] = new \Shopware\Core\Checkout\Document\Renderer\CreditNoteRenderer($a, $b, $c, $d, $e, ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\ReferenceInvoiceLoader'] ?? $this->getReferenceInvoiceLoaderService()), \dirname(__DIR__, 4), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\Renderer\DeliveryNoteRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Renderer\DeliveryNoteRenderer
     */
    protected function getDeliveryNoteRendererService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/AbstractDocumentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/DeliveryNoteRenderer.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? $this->getDocumentConfigLoaderService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }
        $d = ($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? $this->getDocumentTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }
        $e = ($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'] = new \Shopware\Core\Checkout\Document\Renderer\DeliveryNoteRenderer($a, $b, $c, $d, $e, \dirname(__DIR__, 4), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\Renderer\InvoiceRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Renderer\InvoiceRenderer
     */
    protected function getInvoiceRendererService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/AbstractDocumentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/InvoiceRenderer.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? $this->getDocumentConfigLoaderService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }
        $d = ($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? $this->getDocumentTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }
        $e = ($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'] = new \Shopware\Core\Checkout\Document\Renderer\InvoiceRenderer($a, $b, $c, $d, $e, \dirname(__DIR__, 4), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\Renderer\StornoRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Renderer\StornoRenderer
     */
    protected function getStornoRendererService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/AbstractDocumentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/StornoRenderer.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? $this->getDocumentConfigLoaderService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }
        $d = ($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? $this->getDocumentTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }
        $e = ($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'] = new \Shopware\Core\Checkout\Document\Renderer\StornoRenderer($a, $b, $c, $d, $e, ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\ReferenceInvoiceLoader'] ?? $this->getReferenceInvoiceLoaderService()), \dirname(__DIR__, 4), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\Service\DocumentConfigLoader' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Service\DocumentConfigLoader
     */
    protected function getDocumentConfigLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/DocumentConfigLoader.php';

        $a = ($this->services['document_base_config.repository'] ?? $this->getDocumentBaseConfig_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] = new \Shopware\Core\Checkout\Document\Service\DocumentConfigLoader($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\Service\DocumentGenerator' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Service\DocumentGenerator
     */
    protected function getDocumentGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/DocumentGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/DocumentRendererRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/PdfRenderer.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'];
        }
        $b = ($this->services['document.repository'] ?? $this->getDocument_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] = new \Shopware\Core\Checkout\Document\Service\DocumentGenerator(new \Shopware\Core\Checkout\Document\Renderer\DocumentRendererRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'] ?? $this->getInvoiceRendererService());
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'] ?? $this->getDeliveryNoteRendererService());
            yield 2 => ($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'] ?? $this->getStornoRendererService());
            yield 3 => ($this->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'] ?? $this->getCreditNoteRendererService());
        }, 4)), new \Shopware\Core\Checkout\Document\Service\PdfRenderer($this->parameters['shopware.dompdf.options']), $a, $b, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\Service\ReferenceInvoiceLoader' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Service\ReferenceInvoiceLoader
     */
    protected function getReferenceInvoiceLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/ReferenceInvoiceLoader.php';

        return $this->privates['Shopware\\Core\\Checkout\\Document\\Service\\ReferenceInvoiceLoader'] = new \Shopware\Core\Checkout\Document\Service\ReferenceInvoiceLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Document\Twig\DocumentTemplateRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Twig\DocumentTemplateRenderer
     */
    protected function getDocumentTemplateRendererService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Twig/DocumentTemplateRenderer.php';

        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'];
        }
        $b = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'];
        }
        $c = ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] = new \Shopware\Core\Checkout\Document\Twig\DocumentTemplateRenderer(($this->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] ?? $this->getTemplateFinderService()), $a, $b, $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionStateHandler' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionStateHandler
     */
    protected function getOrderTransactionStateHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransaction/OrderTransactionStateHandler.php';

        $a = ($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? $this->getStateMachineRegistryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionStateHandler($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Order\Listener\OrderStateChangeEventListener' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Listener\OrderStateChangeEventListener
     */
    protected function getOrderStateChangeEventListenerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Listener/OrderStateChangeEventListener.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $b = ($this->services['order_transaction.repository'] ?? $this->getOrderTransaction_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $c = ($this->services['order_delivery.repository'] ?? $this->getOrderDelivery_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $e = ($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? $this->getBusinessEventCollectorService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $f = ($this->services['state_machine_state.repository'] ?? $this->getStateMachineState_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] = new \Shopware\Core\Checkout\Order\Listener\OrderStateChangeEventListener($a, $b, $c, $d, $e, $f);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Order\SalesChannel\OrderService' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\SalesChannel\OrderService
     */
    protected function getOrderServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/OrderService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Validation/OrderValidationFactory.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $c = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $d = ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $e = ($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? $this->getStateMachineRegistryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $f = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $g = ($this->services['mail_template.repository'] ?? $this->getMailTemplate_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $h = ($this->services['document.repository'] ?? $this->getDocument_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $i = ($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] ?? $this->getMailServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $j = ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }
        $k = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] = new \Shopware\Core\Checkout\Order\SalesChannel\OrderService($a, new \Shopware\Core\Checkout\Order\Validation\OrderValidationFactory(), $b, $c, $d, $e, $f, $g, $h, $i, $j, $k);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\CashPayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\CashPayment
     */
    protected function getCashPaymentService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/CashPayment.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\CashPayment($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DebitPayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DebitPayment
     */
    protected function getDebitPaymentService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DebitPayment.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DebitPayment($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DefaultPayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DefaultPayment
     */
    protected function getDefaultPaymentService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DefaultPayment($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\InvoicePayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\InvoicePayment
     */
    protected function getInvoicePaymentService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/InvoicePayment.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\InvoicePayment($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PaymentHandlerRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PaymentHandlerRegistry
     */
    protected function getPaymentHandlerRegistryService()
    {
        $a = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler' => ['privates', 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler', 'getAppPaymentHandlerService', false],
        ], [
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler' => 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler',
        ]);

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PaymentHandlerRegistry(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment', 'getCashPaymentService', false],
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment', 'getDebitPaymentService', false],
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment', 'getDefaultPaymentService', false],
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment', 'getInvoicePaymentService', false],
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment', 'getPrePaymentService', false],
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler' => ['privates', 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler', 'getAppSyncPaymentHandlerService', false],
        ], [
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment',
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler' => 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler',
        ]), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler' => ['privates', 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler', 'getAppAsyncPaymentHandlerService', false],
        ], [
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler' => 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler',
        ]), $a, $a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PrePayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PrePayment
     */
    protected function getPrePaymentService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PrePayment.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PrePayment($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\Token\JWTFactoryV2' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\Token\JWTFactoryV2
     */
    protected function getJWTFactoryV2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/Token/TokenFactoryInterfaceV2.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/Token/JWTFactoryV2.php';

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\Token\\JWTFactoryV2'] = new \Shopware\Core\Checkout\Payment\Cart\Token\JWTFactoryV2(($this->privates['shopware.jwt_config'] ?? $this->getShopware_JwtConfigService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodIndexer' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodIndexer
     */
    protected function getPaymentMethodIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/DataAbstractionLayer/PaymentMethodIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/DataAbstractionLayer/PaymentDistinguishableNameGenerator.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'];
        }
        $b = ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'] = new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $b, new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentDistinguishableNameGenerator($b));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodValidator
     */
    protected function getPaymentMethodValidator2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/DataAbstractionLayer/PaymentMethodValidator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodValidator'] = new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Payment\PaymentService' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\PaymentService
     */
    protected function getPaymentServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/PaymentService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentTransactionChainProcessor.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\Token\\JWTFactoryV2'] ?? $this->getJWTFactoryV2Service());
        $b = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());
        $c = ($this->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] ?? $this->getPaymentHandlerRegistryService());

        return $this->privates['Shopware\\Core\\Checkout\\Payment\\PaymentService'] = new \Shopware\Core\Checkout\Payment\PaymentService(new \Shopware\Core\Checkout\Payment\Cart\PaymentTransactionChainProcessor($a, $b, ($this->services['router'] ?? $this->getRouterService()), $c, ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? $this->getInitialStateIdLoaderService())), $a, $c, ($this->services['order_transaction.repository'] ?? $this->getOrderTransaction_RepositoryService()), ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), $b, ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\FilterServiceRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\FilterServiceRegistry
     */
    protected function getFilterServiceRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/FilterServiceRegistry.php';

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\FilterServiceRegistry'] = new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\FilterServiceRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Sorter\\FilterSorterPriceAsc'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Sorter\\FilterSorterPriceAsc'] = new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\Sorter\FilterSorterPriceAsc()));
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Sorter\\FilterSorterPriceDesc'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Sorter\\FilterSorterPriceDesc'] = new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\Sorter\FilterSorterPriceDesc()));
        }, 2), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Picker\\VerticalPicker'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Picker\\VerticalPicker'] = new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\Picker\VerticalPicker()));
            yield 1 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Picker\\HorizontalPicker'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Picker\\HorizontalPicker'] = new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\Picker\HorizontalPicker()));
        }, 2));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\Cart\PromotionCollector' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Cart\PromotionCollector
     */
    protected function getPromotionCollectorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartDataCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCartInformationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCollector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Gateway/PromotionGatewayInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Gateway/PromotionGateway.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Service/PromotionDateTimeServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Service/PromotionDateTimeService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionItemBuilder.php';

        $a = ($this->services['promotion.repository'] ?? $this->getPromotion_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionCollector(new \Shopware\Core\Checkout\Promotion\Gateway\PromotionGateway($a, new \Shopware\Core\Checkout\Promotion\Service\PromotionDateTimeService()), ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionItemBuilder())), ($this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? $this->getHtmlSanitizerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\Cart\PromotionDeliveryProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Cart\PromotionDeliveryProcessor
     */
    protected function getPromotionDeliveryProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionDeliveryProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCartInformationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionDeliveryCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionItemBuilder.php';

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionDeliveryProcessor'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionDeliveryProcessor(new \Shopware\Core\Checkout\Promotion\Cart\PromotionDeliveryCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? $this->getPercentagePriceCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionItemBuilder()))), ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupBuilder'] ?? $this->getLineItemGroupBuilderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\Cart\PromotionProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Cart\PromotionProcessor
     */
    protected function getPromotionProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCartInformationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Composition/DiscountCompositionBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/PackageFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/AdvancedPackageFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/AdvancedPackagePicker.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/SetGroupScopeFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/AdvancedPackageRules.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/DiscountPackager.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/ScopePackager/CartScopeDiscountPackager.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/ScopePackager/SetGroupScopeDiscountPackager.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/ScopePackager/SetScopeDiscountPackager.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupBuilder'] ?? $this->getLineItemGroupBuilderService());
        $b = ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\FilterServiceRegistry'] ?? $this->getFilterServiceRegistryService());

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionProcessor'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionProcessor(new \Shopware\Core\Checkout\Promotion\Cart\PromotionCalculator(($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AmountCalculator'] ?? $this->getAmountCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AbsolutePriceCalculator'] ?? $this->getAbsolutePriceCalculatorService()), $a, new \Shopware\Core\Checkout\Promotion\Cart\Discount\Composition\DiscountCompositionBuilder(), new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\AdvancedPackageFilter($b), new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\AdvancedPackagePicker($b), new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\AdvancedPackageRules(), ($this->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemQuantitySplitter'] ?? $this->getLineItemQuantitySplitterService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? $this->getPercentagePriceCalculatorService()), new \Shopware\Core\Checkout\Promotion\Cart\Discount\ScopePackager\CartScopeDiscountPackager(), new \Shopware\Core\Checkout\Promotion\Cart\Discount\ScopePackager\SetGroupScopeDiscountPackager($a), new \Shopware\Core\Checkout\Promotion\Cart\Discount\ScopePackager\SetScopeDiscountPackager($a)), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionIndexer' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionIndexer
     */
    protected function getPromotionIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/DataAbstractionLayer/PromotionIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/DataAbstractionLayer/PromotionExclusionUpdater.php';

        $a = ($this->services['promotion.repository'] ?? $this->getPromotion_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'] = new \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, new \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionExclusionUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), ($this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionRedemptionUpdater'] ?? $this->getPromotionRedemptionUpdaterService()), $b);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionRedemptionUpdater' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionRedemptionUpdater
     */
    protected function getPromotionRedemptionUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/DataAbstractionLayer/PromotionRedemptionUpdater.php';

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionRedemptionUpdater'] = new \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionRedemptionUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\Subscriber\PromotionIndividualCodeRedeemer' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Subscriber\PromotionIndividualCodeRedeemer
     */
    protected function getPromotionIndividualCodeRedeemerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Subscriber/PromotionIndividualCodeRedeemer.php';

        $a = ($this->services['promotion_individual_code.repository'] ?? $this->getPromotionIndividualCode_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer'] = new \Shopware\Core\Checkout\Promotion\Subscriber\PromotionIndividualCodeRedeemer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\Subscriber\Storefront\StorefrontCartSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Subscriber\Storefront\StorefrontCartSubscriber
     */
    protected function getStorefrontCartSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Subscriber/Storefront/StorefrontCartSubscriber.php';

        $a = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService());

        if (isset($this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'])) {
            return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'] = new \Shopware\Core\Checkout\Promotion\Subscriber\Storefront\StorefrontCartSubscriber($a, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Promotion\Validator\PromotionValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Validator\PromotionValidator
     */
    protected function getPromotionValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Validator/PromotionValidator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Promotion\\Validator\\PromotionValidator'] = new \Shopware\Core\Checkout\Promotion\Validator\PromotionValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Checkout\Shipping\Validator\ShippingMethodValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Validator\ShippingMethodValidator
     */
    protected function getShippingMethodValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Validator/ShippingMethodValidator.php';

        return $this->privates['Shopware\\Core\\Checkout\\Shipping\\Validator\\ShippingMethodValidator'] = new \Shopware\Core\Checkout\Shipping\Validator\ShippingMethodValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Category\DataAbstractionLayer\CategoryIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Category\DataAbstractionLayer\CategoryIndexer
     */
    protected function getCategoryIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/DataAbstractionLayer/CategoryIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/DataAbstractionLayer/CategoryBreadcrumbUpdater.php';

        $a = ($this->services['category.repository'] ?? $this->getCategory_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'];
        }
        $b = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'];
        }
        $d = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        return $this->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'] = new \Shopware\Core\Content\Category\DataAbstractionLayer\CategoryIndexer($d, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ChildCountUpdater'] ?? $this->getChildCountUpdaterService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\TreeUpdater'] ?? $this->getTreeUpdaterService()), new \Shopware\Core\Content\Category\DataAbstractionLayer\CategoryBreadcrumbUpdater($d, $a, $b), $c);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Category\Service\CategoryBreadcrumbBuilder' shared service.
     *
     * @return \Shopware\Core\Content\Category\Service\CategoryBreadcrumbBuilder
     */
    protected function getCategoryBreadcrumbBuilderService()
    {
        $a = ($this->services['category.repository'] ?? $this->getCategory_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'])) {
            return $this->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'];
        }

        return $this->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'] = new \Shopware\Core\Content\Category\Service\CategoryBreadcrumbBuilder($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Category\Service\NavigationLoader' shared service.
     *
     * @return \Shopware\Core\Content\Category\Service\NavigationLoader
     */
    protected function getNavigationLoaderService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'])) {
            return $this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'];
        }
        $b = ($this->services['Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute'] ?? $this->getTreeBuildingNavigationRouteService());

        if (isset($this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'])) {
            return $this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'];
        }

        return $this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] = new \Shopware\Core\Content\Category\Service\NavigationLoader($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Category\Subscriber\CategorySubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Category\Subscriber\CategorySubscriber
     */
    protected function getCategorySubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Subscriber/CategorySubscriber.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'];
        }

        return $this->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'] = new \Shopware\Core\Content\Category\Subscriber\CategorySubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Category\Validation\EntryPointValidator' shared service.
     *
     * @return \Shopware\Core\Content\Category\Validation\EntryPointValidator
     */
    protected function getEntryPointValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Validation/EntryPointValidator.php';

        return $this->privates['Shopware\\Core\\Content\\Category\\Validation\\EntryPointValidator'] = new \Shopware\Core\Content\Category\Validation\EntryPointValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Cms\DataResolver\Element\FormCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Cms\DataResolver\Element\FormCmsElementResolver
     */
    protected function getFormCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/FormCmsElementResolver.php';

        $a = ($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? $this->getCachedSalutationRouteService());

        if (isset($this->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\FormCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\FormCmsElementResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\FormCmsElementResolver'] = new \Shopware\Core\Content\Cms\DataResolver\Element\FormCmsElementResolver($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Cms\DataResolver\Element\TextCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Cms\DataResolver\Element\TextCmsElementResolver
     */
    protected function getTextCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/TextCmsElementResolver.php';

        return $this->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\TextCmsElementResolver'] = new \Shopware\Core\Content\Cms\DataResolver\Element\TextCmsElementResolver(($this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? $this->getHtmlSanitizerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageLoader' shared service.
     *
     * @return \Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageLoader
     */
    protected function getSalesChannelCmsPageLoaderService()
    {
        $a = ($this->services['cms_page.repository'] ?? $this->getCmsPage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'])) {
            return $this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'];
        }
        $b = ($this->services['Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver'] ?? $this->getCmsSlotsDataResolverService());

        if (isset($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'])) {
            return $this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'])) {
            return $this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'];
        }

        return $this->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] = new \Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageLoader($a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Cms\Subscriber\CmsPageDefaultChangeSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Subscriber\CmsPageDefaultChangeSubscriber
     */
    protected function getCmsPageDefaultChangeSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Subscriber/CmsPageDefaultChangeSubscriber.php';

        return $this->privates['Shopware\\Core\\Content\\Cms\\Subscriber\\CmsPageDefaultChangeSubscriber'] = new \Shopware\Core\Content\Cms\Subscriber\CmsPageDefaultChangeSubscriber(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Api\FlowActionCollector' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Api\FlowActionCollector
     */
    protected function getFlowActionCollectorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Api/FlowActionCollector.php';

        return $this->privates['Shopware\\Core\\Content\\Flow\\Api\\FlowActionCollector'] = new \Shopware\Core\Content\Flow\Api\FlowActionCollector(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'] ?? $this->getAddOrderTagActionService());
            yield 1 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'] ?? $this->getAddCustomerTagActionService());
            yield 2 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'] ?? $this->getRemoveOrderTagActionService());
            yield 3 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'] ?? $this->getRemoveCustomerTagActionService());
            yield 4 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'] ?? $this->getChangeCustomerGroupActionService());
            yield 5 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'] ?? $this->getChangeCustomerStatusActionService());
            yield 6 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'] ?? $this->getGenerateDocumentActionService());
            yield 7 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'] ?? $this->getGrantDownloadAccessActionService());
            yield 8 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'] ?? $this->getSendMailActionService());
            yield 9 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'] ?? $this->getSetOrderStateActionService());
            yield 10 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'] ?? $this->getSetCustomerCustomFieldActionService());
            yield 11 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'] ?? $this->getSetCustomerGroupCustomFieldActionService());
            yield 12 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'] ?? $this->getAddCustomerAffiliateAndCampaignCodeActionService());
            yield 13 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'] ?? $this->getAddOrderAffiliateAndCampaignCodeActionService());
            yield 14 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'] ?? $this->getSetOrderCustomFieldActionService());
            yield 15 => ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\StopFlowAction'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\StopFlowAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\StopFlowAction()));
        }, 16), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['app_flow_action.repository'] ?? $this->getAppFlowAction_RepositoryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerAffiliateAndCampaignCodeAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerAffiliateAndCampaignCodeAction
     */
    protected function getAddCustomerAffiliateAndCampaignCodeActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/AddCustomerAffiliateAndCampaignCodeAction.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerAffiliateAndCampaignCodeAction(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerTagAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerTagAction
     */
    protected function getAddCustomerTagActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/AddCustomerTagAction.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerTagAction($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\AddOrderAffiliateAndCampaignCodeAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\AddOrderAffiliateAndCampaignCodeAction
     */
    protected function getAddOrderAffiliateAndCampaignCodeActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/AddOrderAffiliateAndCampaignCodeAction.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\AddOrderAffiliateAndCampaignCodeAction(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\AddOrderTagAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\AddOrderTagAction
     */
    protected function getAddOrderTagActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/AddOrderTagAction.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\AddOrderTagAction($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerGroupAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerGroupAction
     */
    protected function getChangeCustomerGroupActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/ChangeCustomerGroupAction.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerGroupAction($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerStatusAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerStatusAction
     */
    protected function getChangeCustomerStatusActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/ChangeCustomerStatusAction.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerStatusAction($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\GenerateDocumentAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\GenerateDocumentAction
     */
    protected function getGenerateDocumentActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/GenerateDocumentAction.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? $this->getDocumentGeneratorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'];
        }
        $c = ($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\GenerateDocumentAction($a, $b, $c, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\GrantDownloadAccessAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\GrantDownloadAccessAction
     */
    protected function getGrantDownloadAccessActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/GrantDownloadAccessAction.php';

        $a = ($this->services['order_line_item_download.repository'] ?? $this->getOrderLineItemDownload_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\GrantDownloadAccessAction($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\RemoveCustomerTagAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\RemoveCustomerTagAction
     */
    protected function getRemoveCustomerTagActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/RemoveCustomerTagAction.php';

        $a = ($this->services['customer_tag.repository'] ?? $this->getCustomerTag_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\RemoveCustomerTagAction($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\RemoveOrderTagAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\RemoveOrderTagAction
     */
    protected function getRemoveOrderTagActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/RemoveOrderTagAction.php';

        $a = ($this->services['order_tag.repository'] ?? $this->getOrderTag_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\RemoveOrderTagAction($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SendMailAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SendMailAction
     */
    protected function getSendMailActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SendMailAction.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] ?? $this->getMailServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'];
        }
        $b = ($this->services['mail_template.repository'] ?? $this->getMailTemplate_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'];
        }
        $d = ($this->services['mail_template_type.repository'] ?? $this->getMailTemplateType_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'];
        }
        $e = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SendMailAction($a, $b, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), $c, $d, $e, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService()), true);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerCustomFieldAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerCustomFieldAction
     */
    protected function getSetCustomerCustomFieldActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/CustomFieldActionTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SetCustomerCustomFieldAction.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerCustomFieldAction(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerGroupCustomFieldAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerGroupCustomFieldAction
     */
    protected function getSetCustomerGroupCustomFieldActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/CustomFieldActionTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SetCustomerGroupCustomFieldAction.php';

        $a = ($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerGroupCustomFieldAction(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SetOrderCustomFieldAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SetOrderCustomFieldAction
     */
    protected function getSetOrderCustomFieldActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/CustomFieldActionTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SetOrderCustomFieldAction.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SetOrderCustomFieldAction(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SetOrderStateAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SetOrderStateAction
     */
    protected function getSetOrderStateActionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SetOrderStateAction.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? $this->getOrderServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SetOrderStateAction(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\CustomerGroupStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerGroupStorer
     */
    protected function getCustomerGroupStorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/CustomerGroupStorer.php';

        $a = ($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerGroupStorer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\CustomerRecoveryStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerRecoveryStorer
     */
    protected function getCustomerRecoveryStorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/CustomerRecoveryStorer.php';

        $a = ($this->services['customer_recovery.repository'] ?? $this->getCustomerRecovery_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerRecoveryStorer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\CustomerStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerStorer
     */
    protected function getCustomerStorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/CustomerStorer.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerStorer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\NewsletterRecipientStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\NewsletterRecipientStorer
     */
    protected function getNewsletterRecipientStorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/NewsletterRecipientStorer.php';

        $a = ($this->services['newsletter_recipient.repository'] ?? $this->getNewsletterRecipient_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\NewsletterRecipientStorer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\OrderStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\OrderStorer
     */
    protected function getOrderStorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/OrderStorer.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\OrderStorer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\OrderTransactionStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\OrderTransactionStorer
     */
    protected function getOrderTransactionStorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/OrderTransactionStorer.php';

        $a = ($this->services['order_transaction.repository'] ?? $this->getOrderTransaction_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\OrderTransactionStorer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\UserStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\UserStorer
     */
    protected function getUserStorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/UserStorer.php';

        $a = ($this->services['user_recovery.repository'] ?? $this->getUserRecovery_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\UserStorer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Flow\Indexing\FlowIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Indexing\FlowIndexer
     */
    protected function getFlowIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Indexing/FlowIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Indexing/FlowPayloadUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowBuilder.php';

        $a = ($this->services['flow.repository'] ?? $this->getFlow_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'];
        }
        $b = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'];
        }
        $d = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] = new \Shopware\Core\Content\Flow\Indexing\FlowIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, new \Shopware\Core\Content\Flow\Indexing\FlowPayloadUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), new \Shopware\Core\Content\Flow\Dispatching\FlowBuilder(), $b), $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Command\DeleteExpiredFilesCommand' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Command\DeleteExpiredFilesCommand
     */
    protected function getDeleteExpiredFilesCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Command/DeleteExpiredFilesCommand.php';

        $this->privates['Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand'] = $instance = new \Shopware\Core\Content\ImportExport\Command\DeleteExpiredFilesCommand(($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'] ?? $this->getDeleteExpiredFilesServiceService()));

        $instance->setName('import-export:delete-expired');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Command\ImportEntityCommand' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Command\ImportEntityCommand
     */
    protected function getImportEntityCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Command/ImportEntityCommand.php';

        $this->privates['Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand'] = $instance = new \Shopware\Core\Content\ImportExport\Command\ImportEntityCommand(($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'] ?? $this->getImportExportServiceService()), ($this->services['import_export_profile.repository'] ?? $this->getImportExportProfile_RepositoryService()), ($this->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'] ?? $this->getImportExportFactoryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()));

        $instance->setName('import:entity');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CountrySerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CountrySerializer
     */
    protected function getCountrySerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/CountrySerializer.php';

        $a = ($this->services['country.repository'] ?? $this->getCountry_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CountrySerializer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CustomerSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CustomerSerializer
     */
    protected function getCustomerSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/CustomerSerializer.php';

        $a = ($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'];
        }
        $b = ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'];
        }
        $c = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CustomerSerializer($a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\LanguageSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\LanguageSerializer
     */
    protected function getLanguageSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/LanguageSerializer.php';

        $a = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\LanguageSerializer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializer
     */
    protected function getMediaSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/MediaSerializer.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'];
        }
        $b = ($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? $this->getFileSaverService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'];
        }
        $c = ($this->services['media_folder.repository'] ?? $this->getMediaFolder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'];
        }
        $d = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializer($a, $b, $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductCrossSellingSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductCrossSellingSerializer
     */
    protected function getProductCrossSellingSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/ProductCrossSellingSerializer.php';

        $a = ($this->services['product_cross_selling_assigned_products.repository'] ?? $this->getProductCrossSellingAssignedProducts_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductCrossSellingSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductCrossSellingSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductCrossSellingSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductCrossSellingSerializer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductSerializer
     */
    protected function getProductSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/ProductSerializer.php';

        $a = ($this->services['product_visibility.repository'] ?? $this->getProductVisibility_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'];
        }
        $b = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'];
        }
        $c = ($this->services['product_media.repository'] ?? $this->getProductMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'];
        }
        $d = ($this->services['product_configurator_setting.repository'] ?? $this->getProductConfiguratorSetting_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductSerializer($a, $b, $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\PromotionIndividualCodeSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\PromotionIndividualCodeSerializer
     */
    protected function getPromotionIndividualCodeSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/PromotionIndividualCodeSerializer.php';

        $a = ($this->services['promotion_individual_code.repository'] ?? $this->getPromotionIndividualCode_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'];
        }
        $b = ($this->services['promotion.repository'] ?? $this->getPromotion_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\PromotionIndividualCodeSerializer($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\SalutationSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\SalutationSerializer
     */
    protected function getSalutationSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/SalutationSerializer.php';

        $a = ($this->services['salutation.repository'] ?? $this->getSalutation_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\SalutationSerializer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\CustomFieldsSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\CustomFieldsSerializer
     */
    protected function getCustomFieldsSerializer2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/CustomFieldsSerializer.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'] ?? $this->getCustomFieldsSerializerService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\CustomFieldsSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\CustomFieldsSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\CustomFieldsSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\CustomFieldsSerializer($a, ($this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? $this->getCustomFieldServiceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\PriceSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\PriceSerializer
     */
    protected function getPriceSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/PriceSerializer.php';

        $a = ($this->services['currency.repository'] ?? $this->getCurrency_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\PriceSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\PriceSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\PriceSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\PriceSerializer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\ToOneSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\ToOneSerializer
     */
    protected function getToOneSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/ToOneSerializer.php';

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\ToOneSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\ToOneSerializer(($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\PrimaryKeyResolver'] ?? $this->getPrimaryKeyResolverService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\TranslationsSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\TranslationsSerializer
     */
    protected function getTranslationsSerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/TranslationsSerializer.php';

        $a = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\TranslationsSerializer'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\TranslationsSerializer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\TranslationsSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\TranslationsSerializer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\PrimaryKeyResolver' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\PrimaryKeyResolver
     */
    protected function getPrimaryKeyResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/PrimaryKeyResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\PrimaryKeyResolver'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\PrimaryKeyResolver(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\FieldSerializer'] ?? ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\FieldSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\FieldSerializer())));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\SystemDefaultValidator' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\SystemDefaultValidator
     */
    protected function getSystemDefaultValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/SystemDefaultValidator.php';

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\SystemDefaultValidator'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\SystemDefaultValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Event\Subscriber\FileDeletedSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Event\Subscriber\FileDeletedSubscriber
     */
    protected function getFileDeletedSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Event/Subscriber/FileDeletedSubscriber.php';

        $a = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\FileDeletedSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\FileDeletedSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\FileDeletedSubscriber'] = new \Shopware\Core\Content\ImportExport\Event\Subscriber\FileDeletedSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Event\Subscriber\ProductCategoryPathsSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductCategoryPathsSubscriber
     */
    protected function getProductCategoryPathsSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Event/Subscriber/ProductCategoryPathsSubscriber.php';

        $a = ($this->services['category.repository'] ?? $this->getCategory_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] ?? $this->getSyncServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'] = new \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductCategoryPathsSubscriber($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Event\Subscriber\ProductVariantsSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductVariantsSubscriber
     */
    protected function getProductVariantsSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Event/Subscriber/ProductVariantsSubscriber.php';

        $a = ($this->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] ?? $this->getSyncServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'];
        }
        $b = ($this->services['property_group.repository'] ?? $this->getPropertyGroup_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'];
        }
        $c = ($this->services['property_group_option.repository'] ?? $this->getPropertyGroupOption_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'] = new \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductVariantsSubscriber($a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Message\DeleteFileHandler' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Message\DeleteFileHandler
     */
    protected function getDeleteFileHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Message/DeleteFileHandler.php';

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileHandler'] = new \Shopware\Core\Content\ImportExport\Message\DeleteFileHandler(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Processing\Pipe\PipeFactory' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Processing\Pipe\PipeFactory
     */
    protected function getPipeFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Processing/Pipe/AbstractPipeFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Processing/Pipe/PipeFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/SerializerRegistry.php';

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Pipe\\PipeFactory'] = new \Shopware\Core\Content\ImportExport\Processing\Pipe\PipeFactory(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\SerializerRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'] ?? $this->getMediaSerializerService());
            yield 1 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'] ?? $this->getSalutationSerializerService());
            yield 2 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'] ?? $this->getCountrySerializerService());
            yield 3 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'] ?? $this->getLanguageSerializerService());
            yield 4 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'] ?? $this->getCustomerSerializerService());
            yield 5 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'] ?? $this->getPromotionIndividualCodeSerializerService());
            yield 6 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'] ?? $this->getProductSerializerService());
            yield 7 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductCrossSellingSerializer'] ?? $this->getProductCrossSellingSerializerService());
            yield 8 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\OrderSerializer'] ?? ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\OrderSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\OrderSerializer()));
            yield 9 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\EntitySerializer'] ?? ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\EntitySerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\EntitySerializer()));
        }, 10), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\ToOneSerializer'] ?? $this->getToOneSerializerService());
            yield 1 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\TranslationsSerializer'] ?? $this->getTranslationsSerializerService());
            yield 2 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\PriceSerializer'] ?? $this->getPriceSerializerService());
            yield 3 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\CustomFieldsSerializer'] ?? $this->getCustomFieldsSerializer2Service());
            yield 4 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\FieldSerializer'] ?? ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\FieldSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\FieldSerializer()));
        }, 5)), ($this->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\PrimaryKeyResolver'] ?? $this->getPrimaryKeyResolverService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Processing\Writer\CsvFileWriterFactory' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Processing\Writer\CsvFileWriterFactory
     */
    protected function getCsvFileWriterFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Processing/Writer/AbstractWriterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Processing/Writer/CsvFileWriterFactory.php';

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Writer\\CsvFileWriterFactory'] = new \Shopware\Core\Content\ImportExport\Processing\Writer\CsvFileWriterFactory(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\ScheduledTask\CleanupImportExportFileTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ScheduledTask\CleanupImportExportFileTaskHandler
     */
    protected function getCleanupImportExportFileTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ScheduledTask/CleanupImportExportFileTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'];
        }
        $b = ($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'] ?? $this->getDeleteExpiredFilesServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'] = new \Shopware\Core\Content\ImportExport\ScheduledTask\CleanupImportExportFileTaskHandler($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Service\DeleteExpiredFilesService' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Service\DeleteExpiredFilesService
     */
    protected function getDeleteExpiredFilesServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/DeleteExpiredFilesService.php';

        $a = ($this->services['import_export_file.repository'] ?? $this->getImportExportFile_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'] = new \Shopware\Core\Content\ImportExport\Service\DeleteExpiredFilesService($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Service\FileService' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Service\FileService
     */
    protected function getFileServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/AbstractFileService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/FileService.php';

        $a = ($this->services['import_export_file.repository'] ?? $this->getImportExportFile_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'] = new \Shopware\Core\Content\ImportExport\Service\FileService(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ImportExport\Service\ImportExportService' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Service\ImportExportService
     */
    protected function getImportExportServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/ImportExportService.php';

        $a = ($this->services['import_export_log.repository'] ?? $this->getImportExportLog_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'];
        }
        $b = ($this->services['user.repository'] ?? $this->getUser_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'];
        }
        $c = ($this->services['import_export_profile.repository'] ?? $this->getImportExportProfile_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'];
        }
        $d = ($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'] ?? $this->getFileServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'])) {
            return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'];
        }

        return $this->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'] = new \Shopware\Core\Content\ImportExport\Service\ImportExportService($a, $b, $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Content\LandingPage\DataAbstractionLayer\LandingPageIndexer' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\DataAbstractionLayer\LandingPageIndexer
     */
    protected function getLandingPageIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/DataAbstractionLayer/LandingPageIndexer.php';

        $a = ($this->services['landing_page.repository'] ?? $this->getLandingPage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'];
        }

        return $this->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'] = new \Shopware\Core\Content\LandingPage\DataAbstractionLayer\LandingPageIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? $this->getManyToManyIdFieldUpdaterService()), $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\LandingPage\LandingPageValidator' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\LandingPageValidator
     */
    protected function getLandingPageValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/LandingPageValidator.php';

        $a = ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\LandingPage\\LandingPageValidator'])) {
            return $this->privates['Shopware\\Core\\Content\\LandingPage\\LandingPageValidator'];
        }

        return $this->privates['Shopware\\Core\\Content\\LandingPage\\LandingPageValidator'] = new \Shopware\Core\Content\LandingPage\LandingPageValidator($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\MailTemplate\Subscriber\MailSendSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Subscriber\MailSendSubscriber
     */
    protected function getMailSendSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Subscriber/MailSendSubscriber.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] ?? $this->getMailServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }
        $b = ($this->services['mail_template.repository'] ?? $this->getMailTemplate_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }
        $c = ($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }
        $d = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }
        $e = ($this->services['document.repository'] ?? $this->getDocument_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }
        $f = ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }
        $g = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }
        $h = ($this->services['mail_template_type.repository'] ?? $this->getMailTemplateType_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }
        $i = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Content\\MailTemplate\\Subscriber\\MailSendSubscriber'] = new \Shopware\Core\Content\MailTemplate\Subscriber\MailSendSubscriber($a, $b, $c, $d, $e, $f, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), $g, $h, $i, ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Mail\Service\MailService' shared service.
     *
     * @return \Shopware\Core\Content\Mail\Service\MailService
     */
    protected function getMailServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/AbstractMailService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailService.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? $this->getDataValidatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'];
        }
        $b = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? $this->getStringTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'];
        }
        $c = ($this->services['Shopware\\Core\\Content\\Mail\\Service\\MailFactory'] ?? $this->getMailFactoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'];
        }
        $d = ($this->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'] ?? $this->getMailSenderService());

        if (isset($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'];
        }
        $e = ($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'] ?? $this->getMediaRepositoryDecoratorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'];
        }
        $f = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'];
        }
        $g = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'];
        }
        $h = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'];
        }

        return $this->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] = new \Shopware\Core\Content\Mail\Service\MailService($a, $b, $c, $d, $e, ($this->services['Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] ?? $this->getSalesChannelDefinitionService()), $f, $g, $h, ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? $this->getUrlGeneratorInterfaceService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Cms\ImageCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Media\Cms\ImageCmsElementResolver
     */
    protected function getImageCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/ImageCmsElementResolver.php';

        $a = ($this->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'] ?? $this->getDefaultMediaResolverService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Cms\\ImageCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Cms\\ImageCmsElementResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\Cms\\ImageCmsElementResolver'] = new \Shopware\Core\Content\Media\Cms\ImageCmsElementResolver($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Cms\Type\ImageGalleryTypeDataResolver' shared service.
     *
     * @return \Shopware\Core\Content\Media\Cms\Type\ImageGalleryTypeDataResolver
     */
    protected function getImageGalleryTypeDataResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/Type/ImageSliderTypeDataResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/Type/ImageGalleryTypeDataResolver.php';

        return $this->privates['Shopware\\Core\\Content\\Media\\Cms\\Type\\ImageGalleryTypeDataResolver'] = new \Shopware\Core\Content\Media\Cms\Type\ImageGalleryTypeDataResolver(($this->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'] ?? $this->getDefaultMediaResolverService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Cms\Type\ImageSliderTypeDataResolver' shared service.
     *
     * @return \Shopware\Core\Content\Media\Cms\Type\ImageSliderTypeDataResolver
     */
    protected function getImageSliderTypeDataResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/Type/ImageSliderTypeDataResolver.php';

        return $this->privates['Shopware\\Core\\Content\\Media\\Cms\\Type\\ImageSliderTypeDataResolver'] = new \Shopware\Core\Content\Media\Cms\Type\ImageSliderTypeDataResolver(($this->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'] ?? $this->getDefaultMediaResolverService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Commands\DeleteNotUsedMediaCommand' shared service.
     *
     * @return \Shopware\Core\Content\Media\Commands\DeleteNotUsedMediaCommand
     */
    protected function getDeleteNotUsedMediaCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Commands/DeleteNotUsedMediaCommand.php';

        $this->privates['Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand'] = $instance = new \Shopware\Core\Content\Media\Commands\DeleteNotUsedMediaCommand(($this->privates['Shopware\\Core\\Content\\Media\\DeleteNotUsedMediaService'] ?? $this->getDeleteNotUsedMediaServiceService()));

        $instance->setName('media:delete-unused');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Commands\GenerateMediaTypesCommand' shared service.
     *
     * @return \Shopware\Core\Content\Media\Commands\GenerateMediaTypesCommand
     */
    protected function getGenerateMediaTypesCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Commands/GenerateMediaTypesCommand.php';

        $this->privates['Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand'] = $instance = new \Shopware\Core\Content\Media\Commands\GenerateMediaTypesCommand(($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\TypeDetector'] ?? $this->getTypeDetectorService()), ($this->services['media.repository'] ?? $this->getMedia_RepositoryService()));

        $instance->setName('media:generate-media-types');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Commands\GenerateThumbnailsCommand' shared service.
     *
     * @return \Shopware\Core\Content\Media\Commands\GenerateThumbnailsCommand
     */
    protected function getGenerateThumbnailsCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Commands/GenerateThumbnailsCommand.php';

        $this->privates['Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand'] = $instance = new \Shopware\Core\Content\Media\Commands\GenerateThumbnailsCommand(($this->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'] ?? $this->getThumbnailServiceService()), ($this->services['media.repository'] ?? $this->getMedia_RepositoryService()), ($this->services['media_folder.repository'] ?? $this->getMediaFolder_RepositoryService()), ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService()));

        $instance->setName('media:generate-thumbnails');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderConfigurationIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderConfigurationIndexer
     */
    protected function getMediaFolderConfigurationIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaFolderConfigurationIndexer.php';

        $a = ($this->services['media_folder_configuration.repository'] ?? $this->getMediaFolderConfiguration_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'] = new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderConfigurationIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderIndexer
     */
    protected function getMediaFolderIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaFolderIndexer.php';

        $a = ($this->services['media_folder.repository'] ?? $this->getMediaFolder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'] = new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $b, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ChildCountUpdater'] ?? $this->getChildCountUpdaterService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\TreeUpdater'] ?? $this->getTreeUpdaterService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\DataAbstractionLayer\MediaIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Media\DataAbstractionLayer\MediaIndexer
     */
    protected function getMediaIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaIndexer.php';

        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'];
        }
        $b = ($this->services['media_thumbnail.repository'] ?? $this->getMediaThumbnail_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'] = new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $b, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $c);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\DataAbstractionLayer\MediaRepositoryDecorator' shared service.
     *
     * @return \Shopware\Core\Content\Media\DataAbstractionLayer\MediaRepositoryDecorator
     */
    protected function getMediaRepositoryDecoratorService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaRepositoryDecorator'] = new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaRepositoryDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] ?? $this->getMediaDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\DataAbstractionLayer\MediaThumbnailRepositoryDecorator' shared service.
     *
     * @return \Shopware\Core\Content\Media\DataAbstractionLayer\MediaThumbnailRepositoryDecorator
     */
    protected function getMediaThumbnailRepositoryDecoratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaThumbnailRepositoryDecorator.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? $this->getVersionManagerService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'];
        }
        $b = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? $this->getEntityAggregatorInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'] = new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaThumbnailRepositoryDecorator(new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($this->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition'] ?? $this->getMediaThumbnailDefinitionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? $this->getEntityReaderInterfaceService()), $a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? $this->getEntityLoadedEventFactoryService())));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\DeleteNotUsedMediaService' shared service.
     *
     * @return \Shopware\Core\Content\Media\DeleteNotUsedMediaService
     */
    protected function getDeleteNotUsedMediaServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DeleteNotUsedMediaService.php';

        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DeleteNotUsedMediaService'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DeleteNotUsedMediaService'];
        }
        $b = ($this->services['media_default_folder.repository'] ?? $this->getMediaDefaultFolder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\DeleteNotUsedMediaService'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\DeleteNotUsedMediaService'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\DeleteNotUsedMediaService'] = new \Shopware\Core\Content\Media\DeleteNotUsedMediaService($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\File\FileNameProvider' shared service.
     *
     * @return \Shopware\Core\Content\Media\File\WindowsStyleFileNameProvider
     */
    protected function getFileNameProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileNameProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/WindowsStyleFileNameProvider.php';

        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'] = new \Shopware\Core\Content\Media\File\WindowsStyleFileNameProvider($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\MediaService' shared service.
     *
     * @return \Shopware\Core\Content\Media\MediaService
     */
    protected function getMediaServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/MediaService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileFetcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileUrlValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileUrlValidator.php';

        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\MediaService'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\MediaService'];
        }
        $b = ($this->services['media_folder.repository'] ?? $this->getMediaFolder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\MediaService'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\MediaService'];
        }
        $c = ($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? $this->getFileSaverService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\MediaService'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\MediaService'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\MediaService'] = new \Shopware\Core\Content\Media\MediaService($a, $b, new \Shopware\Core\Content\Media\File\FileLoader(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? $this->getUrlGeneratorInterfaceService()), $a, ($this->privates['Nyholm\\Psr7\\Factory\\Psr17Factory'] ?? ($this->privates['Nyholm\\Psr7\\Factory\\Psr17Factory'] = new \Nyholm\Psr7\Factory\Psr17Factory()))), $c, new \Shopware\Core\Content\Media\File\FileFetcher(new \Shopware\Core\Content\Media\File\FileUrlValidator(), true, true, 0));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Message\DeleteFileHandler' shared service.
     *
     * @return \Shopware\Core\Content\Media\Message\DeleteFileHandler
     */
    protected function getDeleteFileHandler2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Message/DeleteFileHandler.php';

        return $this->privates['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler'] = new \Shopware\Core\Content\Media\Message\DeleteFileHandler(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Message\GenerateThumbnailsHandler' shared service.
     *
     * @return \Shopware\Core\Content\Media\Message\GenerateThumbnailsHandler
     */
    protected function getGenerateThumbnailsHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Message/GenerateThumbnailsHandler.php';

        $a = ($this->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'] ?? $this->getThumbnailServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'];
        }
        $b = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'] = new \Shopware\Core\Content\Media\Message\GenerateThumbnailsHandler($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Pathname\PathnameStrategy\FilenamePathnameStrategy' shared service.
     *
     * @return \Shopware\Core\Content\Media\Pathname\PathnameStrategy\FilenamePathnameStrategy
     */
    protected function getFilenamePathnameStrategyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PathnameStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/AbstractPathNameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/FilenamePathnameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PlainPathnameStrategy.php';

        return new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\FilenamePathnameStrategy(($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] = new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PlainPathnameStrategy())));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Pathname\PathnameStrategy\IdPathnameStrategy' shared service.
     *
     * @return \Shopware\Core\Content\Media\Pathname\PathnameStrategy\IdPathnameStrategy
     */
    protected function getIdPathnameStrategyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PathnameStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/AbstractPathNameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/IdPathnameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PlainPathnameStrategy.php';

        return new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\IdPathnameStrategy(($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] = new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PlainPathnameStrategy())));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Pathname\PathnameStrategy\PhysicalFilenamePathnameStrategy' shared service.
     *
     * @return \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PhysicalFilenamePathnameStrategy
     */
    protected function getPhysicalFilenamePathnameStrategyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PathnameStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/AbstractPathNameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PhysicalFilenamePathnameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PlainPathnameStrategy.php';

        return new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PhysicalFilenamePathnameStrategy(($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] = new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PlainPathnameStrategy())));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Pathname\UrlGeneratorInterface' shared service.
     *
     * @return \Shopware\Core\Content\Media\Pathname\UrlGenerator
     */
    protected function getUrlGeneratorInterfaceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/UrlGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/UrlGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PathnameStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/StrategyFactory.php';

        return $this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] = new \Shopware\Core\Content\Media\Pathname\UrlGenerator((new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\StrategyFactory(new RewindableGenerator(function () {
            yield 0 => $this->getFilenamePathnameStrategyService();
            yield 1 => $this->getPhysicalFilenamePathnameStrategyService();
            yield 2 => ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] = new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PlainPathnameStrategy()));
            yield 3 => $this->getIdPathnameStrategyService();
        }, 4)))->factory($this->getEnv('default:default_cdn_strategy:SHOPWARE_CDN_STRATEGY_DEFAULT')), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), '');
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Subscriber\MediaDeletionSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Media\Subscriber\MediaDeletionSubscriber
     */
    protected function getMediaDeletionSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Subscriber/MediaDeletionSubscriber.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'];
        }
        $b = ($this->services['media_thumbnail.repository'] ?? $this->getMediaThumbnail_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'];
        }
        $c = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'];
        }
        $d = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'] = new \Shopware\Core\Content\Media\Subscriber\MediaDeletionSubscriber(($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? $this->getUrlGeneratorInterfaceService()), $a, $b, $c, ($this->privates['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler'] ?? $this->getDeleteFileHandler2Service()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $d);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Subscriber\MediaLoadedSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Media\Subscriber\MediaLoadedSubscriber
     */
    protected function getMediaLoadedSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Subscriber/MediaLoadedSubscriber.php';

        return $this->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaLoadedSubscriber'] = new \Shopware\Core\Content\Media\Subscriber\MediaLoadedSubscriber(($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? $this->getUrlGeneratorInterfaceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\Thumbnail\ThumbnailService' shared service.
     *
     * @return \Shopware\Core\Content\Media\Thumbnail\ThumbnailService
     */
    protected function getThumbnailServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Thumbnail/ThumbnailService.php';

        $a = ($this->services['media_thumbnail.repository'] ?? $this->getMediaThumbnail_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'];
        }
        $b = ($this->services['media_folder.repository'] ?? $this->getMediaFolder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'])) {
            return $this->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'];
        }

        return $this->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'] = new \Shopware\Core\Content\Media\Thumbnail\ThumbnailService($a, ($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), ($this->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? $this->getUrlGeneratorInterfaceService()), $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Media\TypeDetector\TypeDetector' shared service.
     *
     * @return \Shopware\Core\Content\Media\TypeDetector\TypeDetector
     */
    protected function getTypeDetectorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/TypeDetector/TypeDetectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/TypeDetector/TypeDetector.php';

        return $this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\TypeDetector'] = new \Shopware\Core\Content\Media\TypeDetector\TypeDetector(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\AudioTypeDetector'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\AudioTypeDetector'] = new \Shopware\Core\Content\Media\TypeDetector\AudioTypeDetector()));
            yield 1 => ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\DocumentTypeDetector'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\DocumentTypeDetector'] = new \Shopware\Core\Content\Media\TypeDetector\DocumentTypeDetector()));
            yield 2 => ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\ImageTypeDetector'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\ImageTypeDetector'] = new \Shopware\Core\Content\Media\TypeDetector\ImageTypeDetector()));
            yield 3 => ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\VideoTypeDetector'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\VideoTypeDetector'] = new \Shopware\Core\Content\Media\TypeDetector\VideoTypeDetector()));
            yield 4 => ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\DefaultTypeDetector'] ?? ($this->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\DefaultTypeDetector'] = new \Shopware\Core\Content\Media\TypeDetector\DefaultTypeDetector()));
        }, 5));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Newsletter\DataAbstractionLayer\Indexing\CustomerNewsletterSalesChannelsUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\DataAbstractionLayer\Indexing\CustomerNewsletterSalesChannelsUpdater
     */
    protected function getCustomerNewsletterSalesChannelsUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/DataAbstractionLayer/Indexing/CustomerNewsletterSalesChannelsUpdater.php';

        return $this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\Indexing\\CustomerNewsletterSalesChannelsUpdater'] = new \Shopware\Core\Content\Newsletter\DataAbstractionLayer\Indexing\CustomerNewsletterSalesChannelsUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Newsletter\DataAbstractionLayer\NewsletterRecipientIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\DataAbstractionLayer\NewsletterRecipientIndexer
     */
    protected function getNewsletterRecipientIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/DataAbstractionLayer/NewsletterRecipientIndexer.php';

        $a = ($this->services['newsletter_recipient.repository'] ?? $this->getNewsletterRecipient_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'] = new \Shopware\Core\Content\Newsletter\DataAbstractionLayer\NewsletterRecipientIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\Indexing\\CustomerNewsletterSalesChannelsUpdater'] ?? $this->getCustomerNewsletterSalesChannelsUpdaterService()), $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Newsletter\Event\Subscriber\NewsletterRecipientDeletedSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Event\Subscriber\NewsletterRecipientDeletedSubscriber
     */
    protected function getNewsletterRecipientDeletedSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Event/Subscriber/NewsletterRecipientDeletedSubscriber.php';

        $a = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\Newsletter\\Event\\Subscriber\\NewsletterRecipientDeletedSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Newsletter\\Event\\Subscriber\\NewsletterRecipientDeletedSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Content\\Newsletter\\Event\\Subscriber\\NewsletterRecipientDeletedSubscriber'] = new \Shopware\Core\Content\Newsletter\Event\Subscriber\NewsletterRecipientDeletedSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Newsletter\ScheduledTask\NewsletterRecipientTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\ScheduledTask\NewsletterRecipientTaskHandler
     */
    protected function getNewsletterRecipientTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/ScheduledTask/NewsletterRecipientTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'];
        }
        $b = ($this->services['newsletter_recipient.repository'] ?? $this->getNewsletterRecipient_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'] = new \Shopware\Core\Content\Newsletter\ScheduledTask\NewsletterRecipientTaskHandler($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ProductExport\Command\ProductExportGenerateCommand' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Command\ProductExportGenerateCommand
     */
    protected function getProductExportGenerateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Command/ProductExportGenerateCommand.php';

        $this->privates['Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand'] = $instance = new \Shopware\Core\Content\ProductExport\Command\ProductExportGenerateCommand(($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService()), ($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExporter'] ?? $this->getProductExporterService()));

        $instance->setName('product-export:generate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Content\ProductExport\EventListener\ProductExportEventListener' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\EventListener\ProductExportEventListener
     */
    protected function getProductExportEventListenerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/EventListener/ProductExportEventListener.php';

        $a = ($this->services['product_export.repository'] ?? $this->getProductExport_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener'];
        }

        return $this->privates['Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener'] = new \Shopware\Core\Content\ProductExport\EventListener\ProductExportEventListener($a, ($this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] ?? $this->getProductExportFileHandlerService()), ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportGenerateTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportGenerateTaskHandler
     */
    protected function getProductExportGenerateTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ScheduledTask/ProductExportGenerateTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }
        $c = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }
        $d = ($this->services['product_export.repository'] ?? $this->getProductExport_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }
        $e = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'] = new \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportGenerateTaskHandler($a, $b, $c, $d, $e);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportPartialGenerationHandler' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportPartialGenerationHandler
     */
    protected function getProductExportPartialGenerationHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ScheduledTask/ProductExportPartialGenerationHandler.php';

        $a = ($this->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'] ?? $this->getProductExportGeneratorService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $c = ($this->services['product_export.repository'] ?? $this->getProductExport_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $d = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $e = ($this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'] ?? $this->getProductExportRendererService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $f = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $g = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $h = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'] = new \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportPartialGenerationHandler($a, $b, $c, ($this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] ?? $this->getProductExportFileHandlerService()), $d, $e, $f, $g, $h, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), 100, ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ProductExport\Service\ProductExportFileHandler' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Service\ProductExportFileHandler
     */
    protected function getProductExportFileHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportFileHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportFileHandler.php';

        return $this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] = new \Shopware\Core\Content\ProductExport\Service\ProductExportFileHandler(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), 'export');
    }

    /*
     * Gets the private 'Shopware\Core\Content\ProductExport\Service\ProductExportRenderer' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Service\ProductExportRenderer
     */
    protected function getProductExportRendererService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportRenderer.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? $this->getStringTemplateRendererService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'] = new \Shopware\Core\Content\ProductExport\Service\ProductExportRenderer($a, $b, ($this->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? $this->getSeoUrlPlaceholderHandlerInterfaceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\ProductStream\DataAbstractionLayer\ProductStreamIndexer' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\DataAbstractionLayer\ProductStreamIndexer
     */
    protected function getProductStreamIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/DataAbstractionLayer/ProductStreamIndexer.php';

        $a = ($this->services['product_stream.repository'] ?? $this->getProductStream_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'];
        }

        return $this->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'] = new \Shopware\Core\Content\ProductStream\DataAbstractionLayer\ProductStreamIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()), ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()), $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\ProductStream\ScheduledTask\UpdateProductStreamMappingTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\ScheduledTask\UpdateProductStreamMappingTaskHandler
     */
    protected function getUpdateProductStreamMappingTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/ScheduledTask/UpdateProductStreamMappingTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'];
        }
        $b = ($this->services['product_stream.repository'] ?? $this->getProductStream_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'] = new \Shopware\Core\Content\ProductStream\ScheduledTask\UpdateProductStreamMappingTaskHandler($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cart\ProductCartProcessor' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cart\ProductCartProcessor
     */
    protected function getProductCartProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartDataCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductCartProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductGatewayInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductGateway.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductFeatureBuilder.php';

        $a = ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'];
        }
        $c = ($this->services['custom_field.repository'] ?? $this->getCustomField_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'];
        }
        $d = ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator'] ?? $this->getProductPriceCalculatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'] = new \Shopware\Core\Content\Product\Cart\ProductCartProcessor(new \Shopware\Core\Content\Product\Cart\ProductGateway($a, $b), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()), new \Shopware\Core\Content\Product\Cart\ProductFeatureBuilder($c, ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService())), $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cart\ProductLineItemCommandValidator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cart\ProductLineItemCommandValidator
     */
    protected function getProductLineItemCommandValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductLineItemCommandValidator.php';

        return $this->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemCommandValidator'] = new \Shopware\Core\Content\Product\Cart\ProductLineItemCommandValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cleanup\CleanupProductKeywordDictionaryTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cleanup\CleanupProductKeywordDictionaryTaskHandler
     */
    protected function getCleanupProductKeywordDictionaryTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cleanup/CleanupProductKeywordDictionaryTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'] = new \Shopware\Core\Content\Product\Cleanup\CleanupProductKeywordDictionaryTaskHandler($a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cleanup\CleanupUnusedDownloadMediaTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cleanup\CleanupUnusedDownloadMediaTaskHandler
     */
    protected function getCleanupUnusedDownloadMediaTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cleanup/CleanupUnusedDownloadMediaTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'];
        }
        $b = ($this->privates['Shopware\\Core\\Content\\Media\\DeleteNotUsedMediaService'] ?? $this->getDeleteNotUsedMediaServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'] = new \Shopware\Core\Content\Product\Cleanup\CleanupUnusedDownloadMediaTaskHandler($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cms\BuyBoxCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\BuyBoxCmsElementResolver
     */
    protected function getBuyBoxCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/AbstractProductDetailCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/BuyBoxCmsElementResolver.php';

        $a = ($this->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'] ?? $this->getProductPageConfiguratorLoaderService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'];
        }
        $b = ($this->services['product_review.repository'] ?? $this->getProductReview_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\BuyBoxCmsElementResolver($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cms\CrossSellingCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\CrossSellingCmsElementResolver
     */
    protected function getCrossSellingCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/AbstractProductDetailCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/CrossSellingCmsElementResolver.php';

        $a = ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'] ?? $this->getCachedProductCrossSellingRouteService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cms\\CrossSellingCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\CrossSellingCmsElementResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\CrossSellingCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\CrossSellingCmsElementResolver($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cms\ProductBoxCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\ProductBoxCmsElementResolver
     */
    protected function getProductBoxCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/ProductBoxCmsElementResolver.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductBoxCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductBoxCmsElementResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductBoxCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductBoxCmsElementResolver($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cms\ProductDescriptionReviewsCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\ProductDescriptionReviewsCmsElementResolver
     */
    protected function getProductDescriptionReviewsCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/AbstractProductDetailCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/ProductDescriptionReviewsCmsElementResolver.php';

        $a = ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'] ?? $this->getCachedProductReviewRouteService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductDescriptionReviewsCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductDescriptionReviewsCmsElementResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductDescriptionReviewsCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductDescriptionReviewsCmsElementResolver($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cms\ProductListingCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\ProductListingCmsElementResolver
     */
    protected function getProductListingCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/ProductListingCmsElementResolver.php';

        $a = ($this->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'] ?? $this->getResolveCriteriaProductListingRouteService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductListingCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductListingCmsElementResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductListingCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductListingCmsElementResolver($a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Cms\ProductSliderCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\ProductSliderCmsElementResolver
     */
    protected function getProductSliderCmsElementResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/ProductSliderCmsElementResolver.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductSliderCmsElementResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductSliderCmsElementResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductSliderCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductSliderCmsElementResolver(($this->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] ?? $this->getProductStreamBuilderService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\DataAbstractionLayer\ProductIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\ProductIndexer
     */
    protected function getProductIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/ProductIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/VariantListingUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/ProductCategoryDenormalizer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/RatingAverageUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/CheapestPriceUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/AbstractCheapestPriceQuantitySelector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/CheapestPriceQuantitySelector.php';

        $a = ($this->services['product.repository'] ?? $this->getProduct_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $b = ($this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'] ?? $this->getSearchKeywordReplacementService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $c = ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? $this->getStockUpdaterService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $e = ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'] ?? $this->getProductStreamUpdaterService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $f = ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'] ?? $this->getStatesUpdaterService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $g = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $h = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\ProductIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $h, new \Shopware\Core\Content\Product\DataAbstractionLayer\VariantListingUpdater($h), new \Shopware\Core\Content\Product\DataAbstractionLayer\ProductCategoryDenormalizer($h), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\InheritanceUpdater'] ?? $this->getInheritanceUpdaterService()), new \Shopware\Core\Content\Product\DataAbstractionLayer\RatingAverageUpdater($h), $b, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ChildCountUpdater'] ?? $this->getChildCountUpdaterService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? $this->getManyToManyIdFieldUpdaterService()), $c, $d, new \Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPriceUpdater($h, new \Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPriceQuantitySelector()), $e, $f, $g);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\DataAbstractionLayer\ProductStreamUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\ProductStreamUpdater
     */
    protected function getProductStreamUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/ProductStreamUpdater.php';

        $a = ($this->services['product.repository'] ?? $this->getProduct_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'];
        }
        $b = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\ProductStreamUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()), $a, $b, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? $this->getManyToManyIdFieldUpdaterService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\DataAbstractionLayer\StatesUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\StatesUpdater
     */
    protected function getStatesUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/StatesUpdater.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\StatesUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdater
     */
    protected function getStockUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/StockUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/StockUpdate/StockUpdateFilterProvider.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, new \Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdate\StockUpdateFilterProvider(new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0)));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingFeaturesSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingFeaturesSubscriber
     */
    protected function getProductListingFeaturesSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/ProductListingFeaturesSubscriber.php';

        $a = ($this->services['property_group_option.repository'] ?? $this->getPropertyGroupOption_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'];
        }
        $b = ($this->services['product_sorting.repository'] ?? $this->getProductSorting_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'];
        }
        $c = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingFeaturesSubscriber(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, $b, $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingLoader' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingLoader
     */
    protected function getProductListingLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/ProductListingLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        $a = ($this->services['sales_channel.product.repository'] ?? $this->getSalesChannel_Product_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingLoader($a, $b, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $c, ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] = new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory())));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Price\ProductPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Price\ProductPriceCalculator
     */
    protected function getProductPriceCalculatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Price/AbstractProductPriceCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Price/ProductPriceCalculator.php';

        $a = ($this->services['unit.repository'] ?? $this->getUnit_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator'];
        }

        return $this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator'] = new \Shopware\Core\Content\Product\SalesChannel\Price\ProductPriceCalculator($a, ($this->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? $this->getQuantityPriceCalculatorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Product\Subscriber\ProductSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Product\Subscriber\ProductSubscriber
     */
    protected function getProductSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Subscriber/ProductSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractSalesChannelProductBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannelProductBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractPropertyGroupSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/PropertyGroupSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractProductMaxPurchaseCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/ProductMaxPurchaseCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractIsNewDetector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/IsNewDetector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractProductVariationBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/ProductVariationBuilder.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'];
        }
        $b = ($this->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator'] ?? $this->getProductPriceCalculatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'])) {
            return $this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'];
        }
        $c = new \Shopware\Core\Content\Product\PropertyGroupSorter();
        $d = new \Shopware\Core\Content\Product\ProductMaxPurchaseCalculator($a);
        $e = new \Shopware\Core\Content\Product\IsNewDetector($a);

        return $this->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] = new \Shopware\Core\Content\Product\Subscriber\ProductSubscriber(new \Shopware\Core\Content\Product\SalesChannelProductBuilder($c, $d, $e), new \Shopware\Core\Content\Product\ProductVariationBuilder(), $b, $c, $d, $e, $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RuleAreaUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleAreaUpdater
     */
    protected function getRuleAreaUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RuleAreaUpdater.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'])) {
            return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'];
        }

        return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleAreaUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] ?? $this->getRuleDefinitionService()), ($this->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] ?? $this->getRuleConditionRegistryService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexer
     */
    protected function getRuleIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RuleIndexer.php';

        $a = ($this->services['rule.repository'] ?? $this->getRule_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'];
        }
        $b = ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'] ?? $this->getRuleAreaUpdaterService());

        if (isset($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'];
        }
        $c = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? $this->getCartRuleLoaderService());

        if (isset($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'])) {
            return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'];
        }

        return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater'] ?? $this->getRulePayloadUpdaterService()), $b, $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadSubscriber
     */
    protected function getRulePayloadSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RulePayloadSubscriber.php';

        return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadSubscriber'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadSubscriber(($this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater'] ?? $this->getRulePayloadUpdaterService()), ($this->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'] ?? ($this->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'] = new \Shopware\Core\Framework\Script\Debugging\ScriptTraces())), $this->targetDir.'', false);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadUpdater
     */
    protected function getRulePayloadUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RulePayloadUpdater.php';

        return $this->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] ?? $this->getRuleConditionRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Rule\RuleValidator' shared service.
     *
     * @return \Shopware\Core\Content\Rule\RuleValidator
     */
    protected function getRuleValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/RuleValidator.php';

        $a = ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService());

        if (isset($this->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'])) {
            return $this->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'];
        }
        $b = ($this->services['rule_condition.repository'] ?? $this->getRuleCondition_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'])) {
            return $this->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'];
        }
        $c = ($this->services['app_script_condition.repository'] ?? $this->getAppScriptCondition_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'])) {
            return $this->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'];
        }

        return $this->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'] = new \Shopware\Core\Content\Rule\RuleValidator($a, ($this->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] ?? $this->getRuleConditionRegistryService()), $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Seo\SalesChannel\StoreApiSeoResolver' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SalesChannel\StoreApiSeoResolver
     */
    protected function getStoreApiSeoResolverService()
    {
        $a = ($this->services['sales_channel.seo_url.repository'] ?? $this->getSalesChannel_SeoUrl_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver'])) {
            return $this->privates['Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver'];
        }

        return $this->privates['Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver'] = new \Shopware\Core\Content\Seo\SalesChannel\StoreApiSeoResolver($a, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteRegistry'] ?? $this->getSeoUrlRouteRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Seo\SeoUrlGenerator' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlGenerator
     */
    protected function getSeoUrlGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlTwigFactory.php';

        return $this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlGenerator'] = new \Shopware\Core\Content\Seo\SeoUrlGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['router.default'] ?? $this->getRouter_DefaultService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), (new \Shopware\Core\Content\Seo\SeoUrlTwigFactory())->createTwigEnvironment(($this->privates['slugify'] ?? $this->getSlugifyService()), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0)), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TwigVariableParser'] ?? $this->getTwigVariableParserService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Seo\SeoUrlPersister' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlPersister
     */
    protected function getSeoUrlPersisterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlPersister.php';

        $a = ($this->services['seo_url.repository'] ?? $this->getSeoUrl_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'])) {
            return $this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'])) {
            return $this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'];
        }

        return $this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'] = new \Shopware\Core\Content\Seo\SeoUrlPersister(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Seo\SeoUrlRoute\SeoUrlRouteRegistry' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlRoute\SeoUrlRouteRegistry
     */
    protected function getSeoUrlRouteRegistryService()
    {
        return $this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteRegistry'] = new \Shopware\Core\Content\Seo\SeoUrlRoute\SeoUrlRouteRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\ProductPageSeoUrlRoute'] ?? $this->getProductPageSeoUrlRouteService());
            yield 1 => ($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\NavigationPageSeoUrlRoute'] ?? $this->getNavigationPageSeoUrlRouteService());
            yield 2 => ($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\LandingPageSeoUrlRoute'] ?? $this->getLandingPageSeoUrlRouteService());
        }, 3));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Sitemap\Commands\SitemapGenerateCommand' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Commands\SitemapGenerateCommand
     */
    protected function getSitemapGenerateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Commands/SitemapGenerateCommand.php';

        $this->privates['Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand'] = $instance = new \Shopware\Core\Content\Sitemap\Commands\SitemapGenerateCommand(($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()), ($this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'] ?? $this->getSitemapExporterService()), ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));

        $instance->setName('sitemap:generate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Content\Sitemap\ConfigHandler\File' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\ConfigHandler\File
     */
    protected function getFileService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/ConfigHandler/ConfigHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/ConfigHandler/File.php';

        return $this->privates['Shopware\\Core\\Content\\Sitemap\\ConfigHandler\\File'] = new \Shopware\Core\Content\Sitemap\ConfigHandler\File($this->parameters['shopware.sitemap']);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Sitemap\Provider\CategoryUrlProvider' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Provider\CategoryUrlProvider
     */
    protected function getCategoryUrlProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/UrlProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/AbstractUrlProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/CategoryUrlProvider.php';

        return $this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\CategoryUrlProvider'] = new \Shopware\Core\Content\Sitemap\Provider\CategoryUrlProvider(($this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\ConfigHandler'] ?? $this->getConfigHandlerService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? $this->getCategoryDefinitionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), ($this->services['router'] ?? $this->getRouterService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Sitemap\Provider\CustomUrlProvider' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Provider\CustomUrlProvider
     */
    protected function getCustomUrlProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/UrlProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/AbstractUrlProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/CustomUrlProvider.php';

        return $this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\CustomUrlProvider'] = new \Shopware\Core\Content\Sitemap\Provider\CustomUrlProvider(($this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\ConfigHandler'] ?? $this->getConfigHandlerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Sitemap\Provider\ProductUrlProvider' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Provider\ProductUrlProvider
     */
    protected function getProductUrlProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/UrlProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/AbstractUrlProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/ProductUrlProvider.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider'];
        }

        return $this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider'] = new \Shopware\Core\Content\Sitemap\Provider\ProductUrlProvider(($this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\ConfigHandler'] ?? $this->getConfigHandlerService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), ($this->services['router'] ?? $this->getRouterService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Sitemap\ScheduledTask\SitemapGenerateTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\ScheduledTask\SitemapGenerateTaskHandler
     */
    protected function getSitemapGenerateTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/ScheduledTask/SitemapGenerateTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $b = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $c = ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $d = ($this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'] ?? $this->getSitemapExporterService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $e = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $f = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $g = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'] = new \Shopware\Core\Content\Sitemap\ScheduledTask\SitemapGenerateTaskHandler($a, $b, $c, $d, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), $e, $f, $g);
    }

    /*
     * Gets the private 'Shopware\Core\Content\Sitemap\Service\ConfigHandler' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Service\ConfigHandler
     */
    protected function getConfigHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/ConfigHandler.php';

        return $this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\ConfigHandler'] = new \Shopware\Core\Content\Sitemap\Service\ConfigHandler(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Sitemap\\ConfigHandler\\File'] ?? $this->getFileService());
        }, 1));
    }

    /*
     * Gets the private 'Shopware\Core\Content\Sitemap\Service\SitemapExporter' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Service\SitemapExporter
     */
    protected function getSitemapExporterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapExporterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapExporter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapHandleFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapHandleFactory.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'])) {
            return $this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'];
        }

        return $this->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'] = new \Shopware\Core\Content\Sitemap\Service\SitemapExporter(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\HomeUrlProvider'] ?? ($this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\HomeUrlProvider'] = new \Shopware\Core\Content\Sitemap\Provider\HomeUrlProvider()));
            yield 1 => ($this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\CategoryUrlProvider'] ?? $this->getCategoryUrlProviderService());
            yield 2 => ($this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\CustomUrlProvider'] ?? $this->getCustomUrlProviderService());
            yield 3 => ($this->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider'] ?? $this->getProductUrlProviderService());
        }, 4), ($this->services['cache.system'] ?? $this->getCache_SystemService()), 100, ($this->services['shopware.filesystem.sitemap'] ?? $this->getShopware_Filesystem_SitemapService()), new \Shopware\Core\Content\Sitemap\Service\SitemapHandleFactory($a), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheClearer' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheClearer
     */
    protected function getCacheClearer2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheClearer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $a = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] = new \Shopware\Core\Framework\Adapter\Cache\CacheClearer([0 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), 1 => ($this->privates['cache.http'] ?? $this->getCache_HttpService())], ($this->services['.container.private.cache_clearer'] ?? $this->get_Container_Private_CacheClearerService()), ($this->services['.container.private.filesystem'] ?? ($this->services['.container.private.filesystem'] = new \Symfony\Component\Filesystem\Filesystem())), $this->targetDir.'', 'prod', $a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheDecorator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheDecorator
     */
    protected function getCacheDecoratorService()
    {
        $a = new \Symfony\Component\Cache\Adapter\TagAwareAdapter(($this->privates['.cache.object.inner'] ?? $this->get_Cache_Object_InnerService()), ($this->privates['cache.tags'] ?? $this->getCache_TagsService()));
        $a->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] = new \Shopware\Core\Framework\Adapter\Cache\CacheDecorator($a, ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] ?? ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] = new \Shopware\Core\Framework\Adapter\Cache\CacheTagCollection())));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheInvalidationSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheInvalidationSubscriber
     */
    protected function getCacheInvalidationSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheInvalidationSubscriber.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] = new \Shopware\Core\Framework\Adapter\Cache\CacheInvalidationSubscriber($a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheInvalidator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheInvalidator
     */
    protected function getCacheInvalidatorService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'];
        }
        $b = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'];
        }
        $c = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService());

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] = new \Shopware\Core\Framework\Adapter\Cache\CacheInvalidator(0, 150, [0 => $c, 1 => ($this->privates['cache.http'] ?? $this->getCache_HttpService())], $c, $a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheStateSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheStateSubscriber
     */
    protected function getCacheStateSubscriberService()
    {
        $a = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'] = new \Shopware\Core\Framework\Adapter\Cache\CacheStateSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\InvalidateCacheTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\InvalidateCacheTaskHandler
     */
    protected function getInvalidateCacheTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/InvalidateCacheTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'];
        }
        $b = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'] = new \Shopware\Core\Framework\Adapter\Cache\InvalidateCacheTaskHandler($a, $b, 0);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\Message\CleanupOldCacheFoldersHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\Message\CleanupOldCacheFoldersHandler
     */
    protected function getCleanupOldCacheFoldersHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/Message/CleanupOldCacheFoldersHandler.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'] = new \Shopware\Core\Framework\Adapter\Cache\Message\CleanupOldCacheFoldersHandler($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\Script\ScriptCacheInvalidationSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\Script\ScriptCacheInvalidationSubscriber
     */
    protected function getScriptCacheInvalidationSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/Script/ScriptCacheInvalidationSubscriber.php';

        $a = ($this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? $this->getScriptExecutorService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\ScriptCacheInvalidationSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\ScriptCacheInvalidationSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\ScriptCacheInvalidationSubscriber'] = new \Shopware\Core\Framework\Adapter\Cache\Script\ScriptCacheInvalidationSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Command\S3FilesystemVisibilityCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Command\S3FilesystemVisibilityCommand
     */
    protected function getS3FilesystemVisibilityCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Command/S3FilesystemVisibilityCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand'] = $instance = new \Shopware\Core\Framework\Adapter\Command\S3FilesystemVisibilityCommand(($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()), ($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), ($this->services['shopware.filesystem.theme'] ?? $this->getShopware_Filesystem_ThemeService()), ($this->services['shopware.filesystem.sitemap'] ?? $this->getShopware_Filesystem_SitemapService()), ($this->services['shopware.filesystem.asset'] ?? $this->getShopware_Filesystem_AssetService()));

        $instance->setName('s3:set-visibility');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Filesystem\FilesystemFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\FilesystemFactory
     */
    protected function getFilesystemFactoryService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] = new \Shopware\Core\Framework\Adapter\Filesystem\FilesystemFactory(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.local'] ?? ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.local'] = new \Shopware\Core\Framework\Adapter\Filesystem\Adapter\LocalFactory()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.amazon_s3'] ?? ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.amazon_s3'] = new \Shopware\Core\Framework\Adapter\Filesystem\Adapter\AwsS3v3Factory()));
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.google_storage'] ?? ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.google_storage'] = new \Shopware\Core\Framework\Adapter\Filesystem\Adapter\GoogleStorageFactory()));
        }, 3), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\Plugin\\CopyBatch'] ?? ($this->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\Plugin\\CopyBatch'] = new \Shopware\Core\Framework\Adapter\Filesystem\Plugin\CopyBatch()));
        }, 1));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Translation\TranslatorCacheInvalidate' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Translation\TranslatorCacheInvalidate
     */
    protected function getTranslatorCacheInvalidateService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Translation/TranslatorCacheInvalidate.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'] = new \Shopware\Core\Framework\Adapter\Translation\TranslatorCacheInvalidate($a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Twig\EntityTemplateLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\EntityTemplateLoader
     */
    protected function getEntityTemplateLoaderService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'] = new \Shopware\Core\Framework\Adapter\Twig\EntityTemplateLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), 'prod');
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Twig\NamespaceHierarchy\BundleHierarchyBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\NamespaceHierarchy\BundleHierarchyBuilder
     */
    protected function getBundleHierarchyBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/NamespaceHierarchy/BundleHierarchyBuilder.php';

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\NamespaceHierarchy\\BundleHierarchyBuilder'] = new \Shopware\Core\Framework\Adapter\Twig\NamespaceHierarchy\BundleHierarchyBuilder(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Twig\StringTemplateRenderer' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\StringTemplateRenderer
     */
    protected function getStringTemplateRendererService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/StringTemplateRenderer.php';

        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] = new \Shopware\Core\Framework\Adapter\Twig\StringTemplateRenderer($a, $this->targetDir.'');
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Adapter\Twig\TwigVariableParser' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\TwigVariableParser
     */
    protected function getTwigVariableParserService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TwigVariableParser.php';

        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TwigVariableParser'])) {
            return $this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TwigVariableParser'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TwigVariableParser'] = new \Shopware\Core\Framework\Adapter\Twig\TwigVariableParser($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\Acl\AclAnnotationValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\AclAnnotationValidator
     */
    protected function getAclAnnotationValidatorService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclAnnotationValidator'] = new \Shopware\Core\Framework\Api\Acl\AclAnnotationValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\Acl\AclWriteValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\AclWriteValidator
     */
    protected function getAclWriteValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/AclWriteValidator.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator'])) {
            return $this->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator'] = new \Shopware\Core\Framework\Api\Acl\AclWriteValidator($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\ApiDefinition\DefinitionService' shared service.
     *
     * @return \Shopware\Core\Framework\Api\ApiDefinition\DefinitionService
     */
    protected function getDefinitionServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/DefinitionService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/ApiDefinitionGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/StoreApiGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi/OpenApiSchemaBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi/OpenApiDefinitionSchemaBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi/OpenApiLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/BundleSchemaPathCollection.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi3Generator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi/OpenApiPathBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/EntitySchemaGenerator.php';

        $a = new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi\OpenApiSchemaBuilder('6.4.20.0');
        $b = new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi\OpenApiDefinitionSchemaBuilder();
        $c = new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi\OpenApiLoader(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
        $d = new \Shopware\Core\Framework\Api\ApiDefinition\Generator\BundleSchemaPathCollection(($this->privates['kernel.bundles'] ?? $this->getKernel_BundlesService()));

        return $this->privates['Shopware\\Core\\Framework\\Api\\ApiDefinition\\DefinitionService'] = new \Shopware\Core\Framework\Api\ApiDefinition\DefinitionService(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? $this->getSalesChannelDefinitionInstanceRegistryService()), new \Shopware\Core\Framework\Api\ApiDefinition\Generator\StoreApiGenerator($a, $b, $c, $this->parameters['kernel.bundles_metadata'], $d), new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi3Generator($a, new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi\OpenApiPathBuilder(), $b, $c, $this->parameters['kernel.bundles_metadata'], $d), new \Shopware\Core\Framework\Api\ApiDefinition\Generator\EntitySchemaGenerator());
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\Command\DumpClassSchemaCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Command\DumpClassSchemaCommand
     */
    protected function getDumpClassSchemaCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Command/DumpClassSchemaCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand'] = $instance = new \Shopware\Core\Framework\Api\Command\DumpClassSchemaCommand($this->parameters['kernel.bundles_metadata']);

        $instance->setName('framework:dump:class:schema');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\Command\DumpSchemaCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Command\DumpSchemaCommand
     */
    protected function getDumpSchemaCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Command/DumpSchemaCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand'] = $instance = new \Shopware\Core\Framework\Api\Command\DumpSchemaCommand(($this->privates['Shopware\\Core\\Framework\\Api\\ApiDefinition\\DefinitionService'] ?? $this->getDefinitionServiceService()));

        $instance->setName('framework:schema');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\Converter\ApiVersionConverter' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Converter\ApiVersionConverter
     */
    protected function getApiVersionConverterService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Api\\Converter\\ApiVersionConverter'] = new \Shopware\Core\Framework\Api\Converter\ApiVersionConverter(new \Shopware\Core\Framework\Api\Converter\ConverterRegistry(new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0), new \Shopware\Core\Framework\Api\Converter\DefaultApiConverter(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())))));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\EventListener\Authentication\ApiAuthenticationListener' shared service.
     *
     * @return \Shopware\Core\Framework\Api\EventListener\Authentication\ApiAuthenticationListener
     */
    protected function getApiAuthenticationListenerService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\AccessTokenRepository'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\AccessTokenRepository'] = new \Shopware\Core\Framework\Api\OAuth\AccessTokenRepository()));
        $b = ($this->privates['shopware.public_key'] ?? ($this->privates['shopware.public_key'] = new \League\OAuth2\Server\CryptKey((\dirname(__DIR__, 4).'/config/jwt/public.pem'))));
        $c = new \League\OAuth2\Server\AuthorizationValidators\BearerTokenValidator($a);
        $c->setPublicKey($b);
        $d = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        return $this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\ApiAuthenticationListener'] = new \Shopware\Core\Framework\Api\EventListener\Authentication\ApiAuthenticationListener(new \League\OAuth2\Server\ResourceServer($a, $b, new \Shopware\Core\Framework\Api\OAuth\BearerTokenValidator($c, $d, ($this->privates['shopware.jwt_config'] ?? $this->getShopware_JwtConfigService()))), ($this->privates['shopware.api.authorization_server'] ?? $this->getShopware_Api_AuthorizationServerService()), new \Shopware\Core\Framework\Api\OAuth\UserRepository($d), ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\RefreshTokenRepository'] ?? $this->getRefreshTokenRepositoryService()), ($this->privates['Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory'] ?? $this->getPsrHttpFactoryService()), ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] ?? $this->getRouteScopeRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\EventListener\Authentication\SalesChannelAuthenticationListener' shared service.
     *
     * @return \Shopware\Core\Framework\Api\EventListener\Authentication\SalesChannelAuthenticationListener
     */
    protected function getSalesChannelAuthenticationListenerService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\SalesChannelAuthenticationListener'] = new \Shopware\Core\Framework\Api\EventListener\Authentication\SalesChannelAuthenticationListener(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] ?? $this->getRouteScopeRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\EventListener\Authentication\UserCredentialsChangedSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Api\EventListener\Authentication\UserCredentialsChangedSubscriber
     */
    protected function getUserCredentialsChangedSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/Authentication/UserCredentialsChangedSubscriber.php';

        return $this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\UserCredentialsChangedSubscriber'] = new \Shopware\Core\Framework\Api\EventListener\Authentication\UserCredentialsChangedSubscriber(($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\RefreshTokenRepository'] ?? $this->getRefreshTokenRepositoryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\EventListener\ExpectationSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Api\EventListener\ExpectationSubscriber
     */
    protected function getExpectationSubscriberService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ExpectationSubscriber'] = new \Shopware\Core\Framework\Api\EventListener\ExpectationSubscriber('6.4.20.0', $this->parameters['kernel.plugin_infos']);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\OAuth\RefreshTokenRepository' shared service.
     *
     * @return \Shopware\Core\Framework\Api\OAuth\RefreshTokenRepository
     */
    protected function getRefreshTokenRepositoryService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\RefreshTokenRepository'] = new \Shopware\Core\Framework\Api\OAuth\RefreshTokenRepository(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\Response\ResponseFactoryInterfaceValueResolver' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Response\ResponseFactoryInterfaceValueResolver
     */
    protected function getResponseFactoryInterfaceValueResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/ResponseFactoryInterfaceValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/ResponseFactoryRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/ResponseFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/Type/JsonFactoryBase.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/Type/Api/JsonApiType.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Serializer/JsonApiEncoder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/Type/Api/JsonType.php';

        $a = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'] ?? $this->getStructEncoderService());

        return $this->privates['Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver'] = new \Shopware\Core\Framework\Api\Response\ResponseFactoryInterfaceValueResolver(new \Shopware\Core\Framework\Api\Response\ResponseFactoryRegistry(new \Shopware\Core\Framework\Api\Response\Type\Api\JsonApiType(new \Shopware\Core\Framework\Api\Serializer\JsonApiEncoder(), $a), new \Shopware\Core\Framework\Api\Response\Type\Api\JsonType(($this->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? $this->getJsonEntityEncoderService()), $a)));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Api\Serializer\JsonEntityEncoder' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Serializer\JsonEntityEncoder
     */
    protected function getJsonEntityEncoderService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] = new \Shopware\Core\Framework\Api\Serializer\JsonEntityEncoder(($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()), ($this->privates['Shopware\\Core\\Framework\\Api\\Converter\\ApiVersionConverter'] ?? $this->getApiVersionConverterService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\ActionButton\Executor' shared service.
     *
     * @return \Shopware\Core\Framework\App\ActionButton\Executor
     */
    protected function getExecutorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Executor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/ActionButtonResponseFactory.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Executor'] = new \Shopware\Core\Framework\App\ActionButton\Executor(($this->privates['shopware.app_system.guzzle'] ?? $this->getShopware_AppSystem_GuzzleService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), new \Shopware\Core\Framework\App\ActionButton\Response\ActionButtonResponseFactory(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\NotificationResponseFactory'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\NotificationResponseFactory'] = new \Shopware\Core\Framework\App\ActionButton\Response\NotificationResponseFactory()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\OpenModalResponseFactory'] ?? $this->getOpenModalResponseFactoryService());
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\OpenNewTabResponseFactory'] ?? $this->getOpenNewTabResponseFactoryService());
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\ReloadDataResponseFactory'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\ReloadDataResponseFactory'] = new \Shopware\Core\Framework\App\ActionButton\Response\ReloadDataResponseFactory()));
        }, 4)), ($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? $this->getShopIdProviderService()), ($this->services['router'] ?? $this->getRouterService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['kernel'] ?? $this->get('kernel', 1)));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\ActionButton\Response\OpenModalResponseFactory' shared service.
     *
     * @return \Shopware\Core\Framework\App\ActionButton\Response\OpenModalResponseFactory
     */
    protected function getOpenModalResponseFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/ActionButtonResponseFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/OpenModalResponseFactory.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\OpenModalResponseFactory'] = new \Shopware\Core\Framework\App\ActionButton\Response\OpenModalResponseFactory(($this->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] ?? $this->getQuerySignerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\ActionButton\Response\OpenNewTabResponseFactory' shared service.
     *
     * @return \Shopware\Core\Framework\App\ActionButton\Response\OpenNewTabResponseFactory
     */
    protected function getOpenNewTabResponseFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/ActionButtonResponseFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/OpenNewTabResponseFactory.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\OpenNewTabResponseFactory'] = new \Shopware\Core\Framework\App\ActionButton\Response\OpenNewTabResponseFactory(($this->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] ?? $this->getQuerySignerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\ActiveAppsLoader' shared service.
     *
     * @return \Shopware\Core\Framework\App\ActiveAppsLoader
     */
    protected function getActiveAppsLoaderService()
    {
        return $this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] = new \Shopware\Core\Framework\App\ActiveAppsLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\AppStateService' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppStateService
     */
    protected function getAppStateServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppStateService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/PaymentMethodStateService.php';

        $a = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $c = ($this->services['Shopware\\Core\\Framework\\App\\Template\\TemplateStateService'] ?? $this->getTemplateStateServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $d = ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'] ?? $this->getScriptPersisterService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $e = ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $f = ($this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? $this->getScriptExecutorService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $g = ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'] ?? $this->getRuleConditionPersisterService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\AppStateService'] = new \Shopware\Core\Framework\App\AppStateService($a, $b, ($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? $this->getActiveAppsLoaderService()), $c, $d, new \Shopware\Core\Framework\App\Payment\PaymentMethodStateService($e), $f, $g);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\AppUrlChangeResolver\MoveShopPermanentlyStrategy' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppUrlChangeResolver\MoveShopPermanentlyStrategy
     */
    protected function getMoveShopPermanentlyStrategyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/AbstractAppUrlChangeStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/MoveShopPermanentlyStrategy.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\MoveShopPermanentlyStrategy'] = new \Shopware\Core\Framework\App\AppUrlChangeResolver\MoveShopPermanentlyStrategy(($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService()), ($this->services['app.repository'] ?? $this->getApp_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'] ?? $this->getAppRegistrationServiceService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\AppUrlChangeResolver\ReinstallAppsStrategy' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppUrlChangeResolver\ReinstallAppsStrategy
     */
    protected function getReinstallAppsStrategyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/AbstractAppUrlChangeStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/ReinstallAppsStrategy.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\ReinstallAppsStrategy'] = new \Shopware\Core\Framework\App\AppUrlChangeResolver\ReinstallAppsStrategy(($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService()), ($this->services['app.repository'] ?? $this->getApp_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'] ?? $this->getAppRegistrationServiceService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\AppUrlChangeResolver\UninstallAppsStrategy' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppUrlChangeResolver\UninstallAppsStrategy
     */
    protected function getUninstallAppsStrategyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/AbstractAppUrlChangeStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/UninstallAppsStrategy.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\UninstallAppsStrategy'] = new \Shopware\Core\Framework\App\AppUrlChangeResolver\UninstallAppsStrategy(($this->services['app.repository'] ?? $this->getApp_RepositoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] ?? $this->getThemeAppLifecycleHandlerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Command\ActivateAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\ActivateAppCommand
     */
    protected function getActivateAppCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/AbstractAppActivationCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/ActivateAppCommand.php';

        $this->privates['Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\ActivateAppCommand(($this->services['app.repository'] ?? $this->getApp_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'] ?? $this->getAppStateServiceService()));

        $instance->setName('app:activate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Command\AppPrinter' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\AppPrinter
     */
    protected function getAppPrinterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/AppPrinter.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\Command\\AppPrinter'] = new \Shopware\Core\Framework\App\Command\AppPrinter(($this->services['app.repository'] ?? $this->getApp_RepositoryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Command\DeactivateAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\DeactivateAppCommand
     */
    protected function getDeactivateAppCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/AbstractAppActivationCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/DeactivateAppCommand.php';

        $this->privates['Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\DeactivateAppCommand(($this->services['app.repository'] ?? $this->getApp_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'] ?? $this->getAppStateServiceService()));

        $instance->setName('app:deactivate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Command\InstallAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\InstallAppCommand
     */
    protected function getInstallAppCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/InstallAppCommand.php';

        $this->privates['Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\InstallAppCommand(($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService()), ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? $this->getAppLifecycleService()), ($this->privates['Shopware\\Core\\Framework\\App\\Command\\AppPrinter'] ?? $this->getAppPrinterService()), ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\ManifestValidator'] ?? $this->getManifestValidatorService()));

        $instance->setName('app:install');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Command\RefreshAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\RefreshAppCommand
     */
    protected function getRefreshAppCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/RefreshAppCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AppLifecycleIterator.php';

        $a = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        $this->privates['Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\RefreshAppCommand(new \Shopware\Core\Framework\App\AppService(new \Shopware\Core\Framework\App\Lifecycle\AppLifecycleIterator($a, ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService())), ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? $this->getAppLifecycleService())), ($this->privates['Shopware\\Core\\Framework\\App\\Command\\AppPrinter'] ?? $this->getAppPrinterService()), ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\ManifestValidator'] ?? $this->getManifestValidatorService()), ($this->privates['Shopware\\Core\\Framework\\App\\Delta\\AppConfirmationDeltaProvider'] ?? $this->getAppConfirmationDeltaProviderService()), $a);

        $instance->setName('app:refresh');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Command\ResolveAppUrlChangeCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\ResolveAppUrlChangeCommand
     */
    protected function getResolveAppUrlChangeCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/ResolveAppUrlChangeCommand.php';

        $this->privates['Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand'] = $instance = new \Shopware\Core\Framework\App\Command\ResolveAppUrlChangeCommand(($this->services['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\Resolver'] ?? $this->getResolverService()));

        $instance->setName('app:url-change:resolve');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Command\UninstallAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\UninstallAppCommand
     */
    protected function getUninstallAppCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/UninstallAppCommand.php';

        $this->privates['Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\UninstallAppCommand(($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? $this->getAppLifecycleService()), ($this->services['app.repository'] ?? $this->getApp_RepositoryService()));

        $instance->setName('app:uninstall');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Command\ValidateAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\ValidateAppCommand
     */
    protected function getValidateAppCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/ValidateAppCommand.php';

        $this->privates['Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\ValidateAppCommand((\dirname(__DIR__, 4).'/custom/apps'), ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\ManifestValidator'] ?? $this->getManifestValidatorService()));

        $instance->setName('app:validate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Delta\AppConfirmationDeltaProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\Delta\AppConfirmationDeltaProvider
     */
    protected function getAppConfirmationDeltaProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Delta/AppConfirmationDeltaProvider.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\Delta\\AppConfirmationDeltaProvider'] = new \Shopware\Core\Framework\App\Delta\AppConfirmationDeltaProvider(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\App\\Delta\\PermissionsDeltaProvider'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\Delta\\PermissionsDeltaProvider'] = new \Shopware\Core\Framework\App\Delta\PermissionsDeltaProvider()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\App\\Delta\\DomainsDeltaProvider'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\Delta\\DomainsDeltaProvider'] = new \Shopware\Core\Framework\App\Delta\DomainsDeltaProvider()));
        }, 2));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Hmac\QuerySigner' shared service.
     *
     * @return \Shopware\Core\Framework\App\Hmac\QuerySigner
     */
    protected function getQuerySignerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Hmac/QuerySigner.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] = new \Shopware\Core\Framework\App\Hmac\QuerySigner($this->getEnv('APP_URL'), '6.4.20.0', ($this->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'] ?? $this->getLocaleProviderService()), ($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? $this->getShopIdProviderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\AppLifecycle' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\AppLifecycle
     */
    protected function getAppLifecycleService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AbstractAppLifecycle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AppLifecycle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/PermissionPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/CustomFieldPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/ActionButtonPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/TemplatePersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/AbstractTemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/App/Template/IconTemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/TemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/WebhookPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/PaymentMethodPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/CmsBlockPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Cms/AbstractBlockTemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Cms/BlockTemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Schema/CustomEntityPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/FlowActionPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/AppAdministrationSnippetPersister.php';

        $a = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $b = ($this->services['custom_field_set.repository'] ?? $this->getCustomFieldSet_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $c = ($this->services['app_action_button.repository'] ?? $this->getAppActionButton_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $d = ($this->services['app_template.repository'] ?? $this->getAppTemplate_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $e = ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'] ?? $this->getScriptPersisterService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $f = ($this->services['webhook.repository'] ?? $this->getWebhook_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $g = ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $h = ($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $i = ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'] ?? $this->getRuleConditionPersisterService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $j = ($this->services['app_cms_block.repository'] ?? $this->getAppCmsBlock_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $k = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $l = ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'] ?? $this->getAppRegistrationServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $m = ($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'] ?? $this->getAppStateServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $n = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $o = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $p = ($this->services['integration.repository'] ?? $this->getIntegration_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $q = ($this->services['acl_role.repository'] ?? $this->getAclRole_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $r = ($this->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'] ?? $this->getAssetServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $s = ($this->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? $this->getScriptExecutorService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $t = ($this->services['app_flow_action.repository'] ?? $this->getAppFlowAction_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $u = ($this->services['app_administration_snippet.repository'] ?? $this->getAppAdministrationSnippet_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $v = ($this->services['locale.repository'] ?? $this->getLocale_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $w = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());
        $x = ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService());

        return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] = new \Shopware\Core\Framework\App\Lifecycle\AppLifecycle($a, new \Shopware\Core\Framework\App\Lifecycle\Persister\PermissionPersister($w), new \Shopware\Core\Framework\App\Lifecycle\Persister\CustomFieldPersister($b), new \Shopware\Core\Framework\App\Lifecycle\Persister\ActionButtonPersister($c), new \Shopware\Core\Framework\App\Lifecycle\Persister\TemplatePersister(new \Shopware\Storefront\Framework\App\Template\IconTemplateLoader(new \Shopware\Core\Framework\App\Template\TemplateLoader(), ($this->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ?? ($this->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] = new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4)))), \dirname(__DIR__, 4)), $d, $a), $e, new \Shopware\Core\Framework\App\Lifecycle\Persister\WebhookPersister($f), new \Shopware\Core\Framework\App\Lifecycle\Persister\PaymentMethodPersister($g, $h), $i, new \Shopware\Core\Framework\App\Lifecycle\Persister\CmsBlockPersister($j, new \Shopware\Core\Framework\App\Cms\BlockTemplateLoader(), ($this->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? $this->getHtmlSanitizerService())), $x, $k, $l, $m, $n, $o, ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\ConfigValidator'] ?? $this->getConfigValidatorService()), $p, $q, $r, $s, \dirname(__DIR__, 4), new \Shopware\Core\System\CustomEntity\Schema\CustomEntityPersister($w), ($this->services['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntitySchemaUpdater'] ?? $this->getCustomEntitySchemaUpdaterService()), $w, new \Shopware\Core\Framework\App\Lifecycle\Persister\FlowActionPersister($t, $x, $w), new \Shopware\Administration\Snippet\AppAdministrationSnippetPersister($u, $v));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\AppLoader' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\AppLoader
     */
    protected function getAppLoaderService()
    {
        return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] = new \Shopware\Core\Framework\App\Lifecycle\AppLoader((\dirname(__DIR__, 4).'/custom/apps'), \dirname(__DIR__, 4), ($this->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] ?? ($this->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] = new \Shopware\Core\System\SystemConfig\Util\ConfigReader())), new \Shopware\Core\System\CustomEntity\Xml\CustomEntityXmlSchemaValidator());
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\Persister\RuleConditionPersister' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\Persister\RuleConditionPersister
     */
    protected function getRuleConditionPersisterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/RuleConditionPersister.php';

        $a = ($this->services['app_script_condition.repository'] ?? $this->getAppScriptCondition_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'];
        }
        $b = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'] = new \Shopware\Core\Framework\App\Lifecycle\Persister\RuleConditionPersister(($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\ScriptFileReader'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\ScriptFileReader'] = new \Shopware\Core\Framework\App\Lifecycle\ScriptFileReader((\dirname(__DIR__, 4).'/')))), $a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\Persister\ScriptPersister' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\Persister\ScriptPersister
     */
    protected function getScriptPersisterService()
    {
        $a = ($this->services['script.repository'] ?? $this->getScript_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'];
        }
        $b = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'] = new \Shopware\Core\Framework\App\Lifecycle\Persister\ScriptPersister(($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\ScriptFileReader'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\ScriptFileReader'] = new \Shopware\Core\Framework\App\Lifecycle\ScriptFileReader((\dirname(__DIR__, 4).'/')))), $a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\Registration\AppRegistrationService' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\Registration\AppRegistrationService
     */
    protected function getAppRegistrationServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Registration/AppRegistrationService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Registration/HandshakeFactory.php';

        $a = ($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? $this->getShopIdProviderService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'];
        }
        $b = ($this->privates['shopware.app_system.guzzle'] ?? $this->getShopware_AppSystem_GuzzleService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'];
        }
        $c = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'] = new \Shopware\Core\Framework\App\Lifecycle\Registration\AppRegistrationService(new \Shopware\Core\Framework\App\Lifecycle\Registration\HandshakeFactory($this->getEnv('APP_URL'), $a, ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService()), '6.4.20.0'), $b, $c, $this->getEnv('APP_URL'), $a, '6.4.20.0');
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Payment\Handler\AppAsyncPaymentHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\Payment\Handler\AppAsyncPaymentHandler
     */
    protected function getAppAsyncPaymentHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RefundPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PreparedPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppPaymentHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/AsynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppAsyncPaymentHandler.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'];
        }
        $b = ($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? $this->getStateMachineRegistryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'];
        }
        $c = ($this->services['order_transaction_capture_refund.repository'] ?? $this->getOrderTransactionCaptureRefund_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'] = new \Shopware\Core\Framework\App\Payment\Handler\AppAsyncPaymentHandler($a, $b, ($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PayloadService'] ?? $this->getPayloadServiceService()), $c);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Payment\Handler\AppPaymentHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\Payment\Handler\AppPaymentHandler
     */
    protected function getAppPaymentHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RefundPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PreparedPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppPaymentHandler.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'];
        }
        $b = ($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? $this->getStateMachineRegistryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'];
        }
        $c = ($this->services['order_transaction_capture_refund.repository'] ?? $this->getOrderTransactionCaptureRefund_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'] = new \Shopware\Core\Framework\App\Payment\Handler\AppPaymentHandler($a, $b, ($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PayloadService'] ?? $this->getPayloadServiceService()), $c);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Payment\Handler\AppSyncPaymentHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\Payment\Handler\AppSyncPaymentHandler
     */
    protected function getAppSyncPaymentHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RefundPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PreparedPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppPaymentHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppSyncPaymentHandler.php';

        $a = ($this->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? $this->getOrderTransactionStateHandlerService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'];
        }
        $b = ($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? $this->getStateMachineRegistryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'];
        }
        $c = ($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PayloadService'] ?? $this->getPayloadServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'];
        }
        $d = ($this->services['order_transaction_capture_refund.repository'] ?? $this->getOrderTransactionCaptureRefund_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'] = new \Shopware\Core\Framework\App\Payment\Handler\AppSyncPaymentHandler($a, $b, $c, $d);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Payment\Payload\PayloadService' shared service.
     *
     * @return \Shopware\Core\Framework\App\Payment\Payload\PayloadService
     */
    protected function getPayloadServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Payload/PayloadService.php';

        $a = ($this->privates['shopware.app_system.guzzle'] ?? $this->getShopware_AppSystem_GuzzleService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PayloadService'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PayloadService'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PayloadService'] = new \Shopware\Core\Framework\App\Payment\Payload\PayloadService(($this->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? $this->getJsonEntityEncoderService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), $a, ($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? $this->getShopIdProviderService()), $this->getEnv('APP_URL'));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\ScheduledTask\DeleteCascadeAppsHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\ScheduledTask\DeleteCascadeAppsHandler
     */
    protected function getDeleteCascadeAppsHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ScheduledTask/DeleteCascadeAppsHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'];
        }
        $b = ($this->services['acl_role.repository'] ?? $this->getAclRole_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'];
        }
        $c = ($this->services['integration.repository'] ?? $this->getIntegration_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'] = new \Shopware\Core\Framework\App\ScheduledTask\DeleteCascadeAppsHandler($a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\ScheduledTask\UpdateAppsHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\ScheduledTask\UpdateAppsHandler
     */
    protected function getUpdateAppsHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ScheduledTask/UpdateAppsHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Update/AbstractAppUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Update/AppUpdater.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }
        $b = ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] ?? $this->getAbstractExtensionDataProviderService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }
        $c = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }
        $d = ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'] ?? $this->getExtensionDownloaderService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }
        $e = ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'] ?? $this->getAbstractStoreAppLifecycleServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'] = new \Shopware\Core\Framework\App\ScheduledTask\UpdateAppsHandler($a, new \Shopware\Core\Framework\App\Lifecycle\Update\AppUpdater($b, $c, $d, $e));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Subscriber\CustomFieldProtectionSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\App\Subscriber\CustomFieldProtectionSubscriber
     */
    protected function getCustomFieldProtectionSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Subscriber/CustomFieldProtectionSubscriber.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\Subscriber\\CustomFieldProtectionSubscriber'] = new \Shopware\Core\Framework\App\Subscriber\CustomFieldProtectionSubscriber(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Validation\ConfigValidator' shared service.
     *
     * @return \Shopware\Core\Framework\App\Validation\ConfigValidator
     */
    protected function getConfigValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/AbstractManifestValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/ConfigValidator.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\Validation\\ConfigValidator'] = new \Shopware\Core\Framework\App\Validation\ConfigValidator(($this->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] ?? ($this->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] = new \Shopware\Core\System\SystemConfig\Util\ConfigReader())));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Validation\HookableValidator' shared service.
     *
     * @return \Shopware\Core\Framework\App\Validation\HookableValidator
     */
    protected function getHookableValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/AbstractManifestValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/HookableValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Hookable/HookableEventCollector.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\Validation\\HookableValidator'] = new \Shopware\Core\Framework\App\Validation\HookableValidator(new \Shopware\Core\Framework\Webhook\Hookable\HookableEventCollector(($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? $this->getBusinessEventCollectorService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService())));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\App\Validation\ManifestValidator' shared service.
     *
     * @return \Shopware\Core\Framework\App\Validation\ManifestValidator
     */
    protected function getManifestValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/ManifestValidator.php';

        return $this->privates['Shopware\\Core\\Framework\\App\\Validation\\ManifestValidator'] = new \Shopware\Core\Framework\App\Validation\ManifestValidator(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\TranslationValidator'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\TranslationValidator'] = new \Shopware\Core\Framework\App\Validation\TranslationValidator()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\AppNameValidator'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\AppNameValidator'] = new \Shopware\Core\Framework\App\Validation\AppNameValidator()));
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\ConfigValidator'] ?? $this->getConfigValidatorService());
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\App\\Validation\\HookableValidator'] ?? $this->getHookableValidatorService());
        }, 4));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Changelog\Command\ChangelogChangeCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Changelog\Command\ChangelogChangeCommand
     */
    protected function getChangelogChangeCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Command/ChangelogChangeCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogReleaseExporter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $this->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand'] = $instance = new \Shopware\Core\Framework\Changelog\Command\ChangelogChangeCommand(new \Shopware\Core\Framework\Changelog\Processor\ChangelogReleaseExporter(($this->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] ?? ($this->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] = new \Shopware\Core\Framework\Changelog\ChangelogParser())), ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['.container.private.filesystem'] ?? ($this->services['.container.private.filesystem'] = new \Symfony\Component\Filesystem\Filesystem())), \dirname(__DIR__, 4), $this->parameters['shopware.feature.flags']));

        $instance->setName('changelog:change');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Changelog\Command\ChangelogCheckCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Changelog\Command\ChangelogCheckCommand
     */
    protected function getChangelogCheckCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Command/ChangelogCheckCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $this->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand'] = $instance = new \Shopware\Core\Framework\Changelog\Command\ChangelogCheckCommand(new \Shopware\Core\Framework\Changelog\Processor\ChangelogValidator(($this->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] ?? ($this->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] = new \Shopware\Core\Framework\Changelog\ChangelogParser())), ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['.container.private.filesystem'] ?? ($this->services['.container.private.filesystem'] = new \Symfony\Component\Filesystem\Filesystem())), \dirname(__DIR__, 4), $this->parameters['shopware.feature.flags']));

        $instance->setName('changelog:check');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Changelog\Command\ChangelogCreateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Changelog\Command\ChangelogCreateCommand
     */
    protected function getChangelogCreateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Command/ChangelogCreateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $this->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand'] = $instance = new \Shopware\Core\Framework\Changelog\Command\ChangelogCreateCommand(new \Shopware\Core\Framework\Changelog\Processor\ChangelogGenerator(($this->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] ?? ($this->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] = new \Shopware\Core\Framework\Changelog\ChangelogParser())), ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['.container.private.filesystem'] ?? ($this->services['.container.private.filesystem'] = new \Symfony\Component\Filesystem\Filesystem())), \dirname(__DIR__, 4), $this->parameters['shopware.feature.flags']));

        $instance->setName('changelog:create');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Changelog\Command\ChangelogReleaseCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Changelog\Command\ChangelogReleaseCommand
     */
    protected function getChangelogReleaseCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Command/ChangelogReleaseCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogReleaseCreator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $this->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand'] = $instance = new \Shopware\Core\Framework\Changelog\Command\ChangelogReleaseCommand(new \Shopware\Core\Framework\Changelog\Processor\ChangelogReleaseCreator(($this->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] ?? ($this->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] = new \Shopware\Core\Framework\Changelog\ChangelogParser())), ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()), ($this->services['.container.private.filesystem'] ?? ($this->services['.container.private.filesystem'] = new \Symfony\Component\Filesystem\Filesystem())), \dirname(__DIR__, 4), $this->parameters['shopware.feature.flags']));

        $instance->setName('changelog:release');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\CreateEntitiesCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateEntitiesCommand
     */
    protected function getCreateEntitiesCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/CreateEntitiesCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityGenerator.php';

        $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateEntitiesCommand(new \Shopware\Core\Framework\DataAbstractionLayer\EntityGenerator(), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), \dirname(__DIR__, 4));

        $instance->setName('dal:create:entities');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\CreateHydratorCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateHydratorCommand
     */
    protected function getCreateHydratorCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/CreateHydratorCommand.php';

        $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateHydratorCommand(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), \dirname(__DIR__, 4));

        $instance->setName('dal:create:hydrators');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\CreateSchemaCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateSchemaCommand
     */
    protected function getCreateSchemaCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/CreateSchemaCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/SchemaGenerator.php';

        $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateSchemaCommand(new \Shopware\Core\Framework\DataAbstractionLayer\SchemaGenerator(), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), \dirname(__DIR__, 4));

        $instance->setName('dal:create:schema');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\DataAbstractionLayerValidateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\DataAbstractionLayerValidateCommand
     */
    protected function getDataAbstractionLayerValidateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/DataAbstractionLayerValidateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/DefinitionValidator.php';

        $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\DataAbstractionLayerValidateCommand(new \Shopware\Core\Framework\DataAbstractionLayer\DefinitionValidator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())));

        $instance->setName('dal:validate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\RefreshIndexCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\RefreshIndexCommand
     */
    protected function getRefreshIndexCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/RefreshIndexCommand.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'])) {
            return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'])) {
            return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'];
        }

        $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\RefreshIndexCommand($a, $b);

        $instance->setName('dal:refresh:index');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\Common\IteratorFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\Common\IteratorFactory
     */
    protected function getIteratorFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/Common/IteratorFactory.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\Common\IteratorFactory(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\CriteriaQueryBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\CriteriaQueryBuilder
     */
    protected function getCriteriaQueryBuilderService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\SqlQueryParser'] ?? $this->getSqlQueryParserService());

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\CriteriaQueryBuilder($a, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\SearchTermInterpreter'] ?? $this->getSearchTermInterpreterService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\EntityScoreQueryBuilder'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\EntityScoreQueryBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\EntityScoreQueryBuilder())), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\JoinGroupBuilder'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\JoinGroupBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\JoinGroupBuilder())), new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\CriteriaPartResolver(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Facade\AppContextCreator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Facade\AppContextCreator
     */
    protected function getAppContextCreatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Facade/AppContextCreator.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\AppContextCreator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Facade\AppContextCreator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\ChildCountUpdater' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\ChildCountUpdater
     */
    protected function getChildCountUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/ChildCountUpdater.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ChildCountUpdater'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\ChildCountUpdater(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\InheritanceUpdater' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\InheritanceUpdater
     */
    protected function getInheritanceUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/InheritanceUpdater.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\InheritanceUpdater'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\InheritanceUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\ManyToManyIdFieldUpdater' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\ManyToManyIdFieldUpdater
     */
    protected function getManyToManyIdFieldUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/ManyToManyIdFieldUpdater.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\ManyToManyIdFieldUpdater(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\EntityIndexingSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\EntityIndexingSubscriber
     */
    protected function getEntityIndexingSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/Subscriber/EntityIndexingSubscriber.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\EntityIndexingSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\RegisteredIndexerSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\RegisteredIndexerSubscriber
     */
    protected function getRegisteredIndexerSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/Subscriber/RegisteredIndexerSubscriber.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\RegisteredIndexerSubscriber(($this->services['Shopware\\Core\\Framework\\Migration\\IndexerQueuer'] ?? $this->getIndexerQueuerService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\TreeUpdater' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\TreeUpdater
     */
    protected function getTreeUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/TreeUpdater.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\TreeUpdater'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\TreeUpdater(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\ApiCriteriaValidator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\ApiCriteriaValidator
     */
    protected function getApiCriteriaValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/ApiCriteriaValidator.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\ApiCriteriaValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\ApiCriteriaValidator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\CompositeEntitySearcher' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\CompositeEntitySearcher
     */
    protected function getCompositeEntitySearcherService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/CompositeEntitySearcher.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CompositeEntitySearcher'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\CompositeEntitySearcher(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), new RewindableGenerator(function () {
            yield 0 => ($this->services['Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition'] ?? $this->getLandingPageDefinitionService());
            yield 1 => ($this->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] ?? $this->getOrderDefinitionService());
            yield 2 => ($this->services['Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] ?? $this->getCustomerDefinitionService());
            yield 3 => ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService());
            yield 4 => ($this->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? $this->getCategoryDefinitionService());
            yield 5 => ($this->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] ?? $this->getMediaDefinitionService());
            yield 6 => ($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] ?? $this->getProductManufacturerDefinitionService());
            yield 7 => ($this->services['Shopware\\Core\\System\\Tag\\TagDefinition'] ?? $this->getTagDefinitionService());
            yield 8 => ($this->services['Shopware\\Core\\Content\\Cms\\CmsPageDefinition'] ?? $this->getCmsPageDefinitionService());
        }, 9));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\CriteriaArrayConverter' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\CriteriaArrayConverter
     */
    protected function getCriteriaArrayConverterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/CriteriaArrayConverter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CriteriaArrayConverter'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\CriteriaArrayConverter(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\AggregationParser())));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\SqlQueryParser' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\SqlQueryParser
     */
    protected function getSqlQueryParserService()
    {
        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\SqlQueryParser'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\SqlQueryParser(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\RequestCriteriaBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\RequestCriteriaBuilder
     */
    protected function getRequestCriteriaBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/RequestCriteriaBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\RequestCriteriaBuilder(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\AggregationParser())), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\ApiCriteriaValidator'] ?? $this->getApiCriteriaValidatorService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CriteriaArrayConverter'] ?? $this->getCriteriaArrayConverterService()), 100);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Filter\TokenFilter' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Filter\TokenFilter
     */
    protected function getTokenFilterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/Filter/AbstractTokenFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/Filter/TokenFilter.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Filter\TokenFilter(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\Term\SearchTermInterpreter' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\SearchTermInterpreter
     */
    protected function getSearchTermInterpreterService()
    {
        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\SearchTermInterpreter'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\SearchTermInterpreter(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Tokenizer($this->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH')))));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityExistsValidator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityExistsValidator
     */
    protected function getEntityExistsValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Validation/EntityExistsValidator.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator'])) {
            return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator'];
        }

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityExistsValidator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityNotExistsValidator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityNotExistsValidator
     */
    protected function getEntityNotExistsValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Validation/EntityNotExistsValidator.php';

        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? $this->getEntitySearcherInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator'])) {
            return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator'];
        }

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityNotExistsValidator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Version\Cleanup\CleanupVersionTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Cleanup\CleanupVersionTaskHandler
     */
    protected function getCleanupVersionTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Version/Cleanup/CleanupVersionTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'] = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Cleanup\CleanupVersionTaskHandler($a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), 30);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Write\Validation\LockValidator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Write\Validation\LockValidator
     */
    protected function getLockValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/Validation/LockValidator.php';

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\LockValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Write\Validation\LockValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Write\WriteCommandExtractor' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Write\WriteCommandExtractor
     */
    protected function getWriteCommandExtractorService()
    {
        $a = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? $this->getEntityWriteGatewayInterfaceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'])) {
            return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'];
        }

        return $this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] = new \Shopware\Core\Framework\DataAbstractionLayer\Write\WriteCommandExtractor($a, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Command\DemodataCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Command\DemodataCommand
     */
    protected function getDemodataCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Command/DemodataCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataService.php';

        $this->privates['Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand'] = $instance = new \Shopware\Core\Framework\Demodata\Command\DemodataCommand(new \Shopware\Core\Framework\Demodata\DemodataService(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\RuleGenerator'] ?? $this->getRuleGeneratorService());
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CustomerGenerator'] ?? $this->getCustomerGeneratorService());
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\PropertyGroupGenerator'] ?? $this->getPropertyGroupGeneratorService());
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CategoryGenerator'] ?? $this->getCategoryGeneratorService());
            yield 4 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductManufacturerGenerator'] ?? $this->getProductManufacturerGeneratorService());
            yield 5 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\TagGenerator'] ?? $this->getTagGeneratorService());
            yield 6 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductReviewGenerator'] ?? $this->getProductReviewGeneratorService());
            yield 7 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductGenerator'] ?? $this->getProductGeneratorService());
            yield 8 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\PromotionGenerator'] ?? $this->getPromotionGeneratorService());
            yield 9 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\FlowGenerator'] ?? $this->getFlowGeneratorService());
            yield 10 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MediaGenerator'] ?? $this->getMediaGeneratorService());
            yield 11 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductStreamGenerator'] ?? $this->getProductStreamGeneratorService());
            yield 12 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\OrderGenerator'] ?? $this->getOrderGeneratorService());
            yield 13 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CustomFieldGenerator'] ?? $this->getCustomFieldGeneratorService());
            yield 14 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MailTemplateGenerator'] ?? $this->getMailTemplateGeneratorService());
            yield 15 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MailHeaderFooterGenerator'] ?? $this->getMailHeaderFooterGeneratorService());
            yield 16 => ($this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\UserGenerator'] ?? $this->getUserGeneratorService());
        }, 17), \dirname(__DIR__, 4), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService())), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), 'prod');

        $instance->addDefault('rules', 25);
        $instance->addOption('rules', NULL, 4, 'Rules count');
        $instance->addDefault('customers', 60);
        $instance->addOption('customers', NULL, 4, 'Customers count');
        $instance->addDefault('properties', 10);
        $instance->addOption('properties', NULL, 4, 'Property group count (option count rand(30-300))');
        $instance->addDefault('categories', 10);
        $instance->addOption('categories', NULL, 4, 'Categories count');
        $instance->addDefault('manufacturers', 60);
        $instance->addOption('manufacturers', NULL, 4, 'Manufacturers count');
        $instance->addDefault('tags', 50);
        $instance->addOption('tags', NULL, 4, 'Tags count');
        $instance->addDefault('reviews', 20);
        $instance->addOption('reviews', NULL, 4, 'Reviews count');
        $instance->addDefault('products', 1000);
        $instance->addOption('products', NULL, 4, 'Products count');
        $instance->addDefault('promotions', 50);
        $instance->addOption('promotions', NULL, 4, 'Promotions count');
        $instance->addDefault('flows', 0);
        $instance->addOption('flows', NULL, 4, 'Flows count');
        $instance->addDefault('media', 300);
        $instance->addOption('media', NULL, 4, 'Media count');
        $instance->addDefault('product-streams', 10);
        $instance->addOption('product-streams', NULL, 4, 'Product-streams count');
        $instance->addDefault('orders', 60);
        $instance->addOption('orders', NULL, 4, 'Orders count');
        $instance->addDefault('attribute-sets', 4);
        $instance->addOption('attribute-sets', NULL, 4, 'CustomField set count');
        $instance->addDefault('mail-template', 10);
        $instance->addOption('mail-template', NULL, 4, 'Mail-template count');
        $instance->addDefault('mail-header-footer', 3);
        $instance->addOption('mail-header-footer', NULL, 4, 'Mail header/footer count');
        $instance->addDefault('users', 0);
        $instance->addOption('users', NULL, 4, 'Users count');
        $instance->setName('framework:demodata');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\CategoryGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\CategoryGenerator
     */
    protected function getCategoryGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/CategoryGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CategoryGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\CategoryGenerator(($this->services['category.repository'] ?? $this->getCategory_RepositoryService()), ($this->services['cms_page.repository'] ?? $this->getCmsPage_RepositoryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\CustomFieldGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\CustomFieldGenerator
     */
    protected function getCustomFieldGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/CustomFieldGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CustomFieldGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\CustomFieldGenerator(($this->services['custom_field_set.repository'] ?? $this->getCustomFieldSet_RepositoryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\CustomerGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\CustomerGenerator
     */
    protected function getCustomerGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/CustomerGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CustomerGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\CustomerGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService()), ($this->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? $this->getNumberRangeValueGeneratorInterfaceService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] ?? $this->getCustomerDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\FlowGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\FlowGenerator
     */
    protected function getFlowGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/FlowGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\FlowGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\FlowGenerator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? $this->getBusinessEventCollectorService()), ($this->privates['Shopware\\Core\\Content\\Flow\\Api\\FlowActionCollector'] ?? $this->getFlowActionCollectorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\MailHeaderFooterGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\MailHeaderFooterGenerator
     */
    protected function getMailHeaderFooterGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/MailHeaderFooterGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MailHeaderFooterGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\MailHeaderFooterGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] ?? $this->getMailHeaderFooterDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\MailTemplateGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\MailTemplateGenerator
     */
    protected function getMailTemplateGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/MailTemplateGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MailTemplateGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\MailTemplateGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['mail_template_type.repository'] ?? $this->getMailTemplateType_RepositoryService()), ($this->services['Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] ?? $this->getMailTemplateDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\MediaGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\MediaGenerator
     */
    protected function getMediaGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/MediaGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MediaGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\MediaGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? $this->getFileSaverService()), ($this->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'] ?? $this->getFileNameProviderService()), ($this->services['media_default_folder.repository'] ?? $this->getMediaDefaultFolder_RepositoryService()), ($this->services['media_folder.repository'] ?? $this->getMediaFolder_RepositoryService()), ($this->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] ?? $this->getMediaDefinitionService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\OrderGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\OrderGenerator
     */
    protected function getOrderGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/OrderGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\OrderGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\OrderGenerator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService()), ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] ?? $this->getOrderDefinitionService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? $this->getCartCalculatorService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\ProductGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\ProductGenerator
     */
    protected function getProductGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/ProductGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\ProductGenerator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\InheritanceUpdater'] ?? $this->getInheritanceUpdaterService()), ($this->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'] ?? $this->getStatesUpdaterService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\ProductManufacturerGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\ProductManufacturerGenerator
     */
    protected function getProductManufacturerGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/ProductManufacturerGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductManufacturerGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\ProductManufacturerGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] ?? $this->getProductManufacturerDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\ProductReviewGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\ProductReviewGenerator
     */
    protected function getProductReviewGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/ProductReviewGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductReviewGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\ProductReviewGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] ?? $this->getProductReviewDefinitionService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\ProductStreamGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\ProductStreamGenerator
     */
    protected function getProductStreamGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/ProductStreamGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductStreamGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\ProductStreamGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] ?? $this->getProductStreamDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\PromotionGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\PromotionGenerator
     */
    protected function getPromotionGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/PromotionGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\PromotionGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\PromotionGenerator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\PropertyGroupGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\PropertyGroupGenerator
     */
    protected function getPropertyGroupGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/PropertyGroupGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\PropertyGroupGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\PropertyGroupGenerator(($this->services['property_group.repository'] ?? $this->getPropertyGroup_RepositoryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\RuleGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\RuleGenerator
     */
    protected function getRuleGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/RuleGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\RuleGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\RuleGenerator(($this->services['rule.repository'] ?? $this->getRule_RepositoryService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService()), ($this->services['shipping_method.repository'] ?? $this->getShippingMethod_RepositoryService()), ($this->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] ?? $this->getRuleDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\TagGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\TagGenerator
     */
    protected function getTagGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/TagGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\TagGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\TagGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Shopware\\Core\\System\\Tag\\TagDefinition'] ?? $this->getTagDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\UserGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\UserGenerator
     */
    protected function getUserGeneratorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/UserGenerator.php';

        return $this->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\UserGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\UserGenerator(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? $this->getEntityWriterService()), ($this->services['Shopware\\Core\\System\\User\\UserDefinition'] ?? $this->getUserDefinitionService()), ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Demodata\PersonalData\CleanPersonalDataCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\PersonalData\CleanPersonalDataCommand
     */
    protected function getCleanPersonalDataCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/PersonalData/CleanPersonalDataCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand'] = $instance = new \Shopware\Core\Framework\Demodata\PersonalData\CleanPersonalDataCommand(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService()));

        $instance->setName('database:clean-personal-data');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Event\BusinessEventCollector' shared service.
     *
     * @return \Shopware\Core\Framework\Event\BusinessEventCollector
     */
    protected function getBusinessEventCollectorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/BusinessEventCollector.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'])) {
            return $this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] = new \Shopware\Core\Framework\Event\BusinessEventCollector(($this->services['Shopware\\Core\\Framework\\Event\\BusinessEventRegistry'] ?? $this->getBusinessEventRegistryService()), $a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Event\BusinessEventDispatcher' shared service.
     *
     * @return \Shopware\Core\Framework\Event\BusinessEventDispatcher
     */
    protected function getBusinessEventDispatcherService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'] ?? $this->getWebhookDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventDispatcher'])) {
            return $this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventDispatcher'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventDispatcher'] = new \Shopware\Core\Framework\Event\BusinessEventDispatcher($a, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['Shopware\\Core\\Framework\\Event\\EventAction\\EventActionDefinition'] ?? $this->getEventActionDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Event\Command\DebugDumpBusinessEventsCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Event\Command\DebugDumpBusinessEventsCommand
     */
    protected function getDebugDumpBusinessEventsCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/Command/DebugDumpBusinessEventsCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand'] = $instance = new \Shopware\Core\Framework\Event\Command\DebugDumpBusinessEventsCommand(($this->privates['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? $this->getBusinessEventCollectorService()));

        $instance->setName('debug:business-events');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Event\EventAction\EventActionSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Event\EventAction\EventActionSubscriber
     */
    protected function getEventActionSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/EventAction/EventActionSubscriber.php';

        return $this->privates['Shopware\\Core\\Framework\\Event\\EventAction\\EventActionSubscriber'] = new \Shopware\Core\Framework\Event\EventAction\EventActionSubscriber(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Feature\Command\FeatureDumpCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Feature\Command\FeatureDumpCommand
     */
    protected function getFeatureDumpCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Feature/Command/FeatureDumpCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand'] = $instance = new \Shopware\Core\Framework\Feature\Command\FeatureDumpCommand(($this->services['kernel'] ?? $this->get('kernel', 1)));

        $instance->setName('feature:dump');
        $instance->setAliases([0 => 'administration:dump:features']);

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Log\LoggingService' shared service.
     *
     * @return \Shopware\Core\Framework\Log\LoggingService
     */
    protected function getLoggingServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/LoggingService.php';

        return $this->privates['Shopware\\Core\\Framework\\Log\\LoggingService'] = new \Shopware\Core\Framework\Log\LoggingService('prod', ($this->services['monolog.logger.business_events'] ?? $this->getMonolog_Logger_BusinessEventsService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Log\Monolog\ExcludeFlowEventHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Log\Monolog\ExcludeFlowEventHandler
     */
    protected function getExcludeFlowEventHandlerService()
    {
        $a = new \Monolog\Handler\RotatingFileHandler((\dirname(__DIR__, 3).'/log/prod.log'), 0, 400, true, NULL);
        $a->pushProcessor(new \Monolog\Processor\PsrLogMessageProcessor());
        $a->setFilenameFormat('{filename}-{date}', 'Y-m-d');

        return $this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] = new \Shopware\Core\Framework\Log\Monolog\ExcludeFlowEventHandler(new \Monolog\Handler\FingersCrossedHandler($a, 400, 0, true, true, NULL), $this->parameters['shopware.logger.exclude_events']);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Log\ScheduledTask\LogCleanupTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Log\ScheduledTask\LogCleanupTaskHandler
     */
    protected function getLogCleanupTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/ScheduledTask/LogCleanupTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'] = new \Shopware\Core\Framework\Log\ScheduledTask\LogCleanupTaskHandler($a, $b, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Command\DispatchSleepMessageCommand' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Command\DispatchSleepMessageCommand
     */
    protected function getDispatchSleepMessageCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Command/DispatchSleepMessageCommand.php';

        $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\DispatchSleepMessageCommand'] = $instance = new \Shopware\Core\Framework\MessageQueue\Command\DispatchSleepMessageCommand(($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService()));

        $instance->setName('debug:messenger:dispatch-sleep');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Handler\EncryptedMessageHandler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Handler\EncryptedMessageHandler
     */
    protected function getEncryptedMessageHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Handler/EncryptedMessageHandler.php';

        $a = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\EncryptedMessageHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\EncryptedMessageHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\EncryptedMessageHandler'] = new \Shopware\Core\Framework\MessageQueue\Handler\EncryptedMessageHandler($a, ($this->privates['shopware.private_key'] ?? ($this->privates['shopware.private_key'] = new \League\OAuth2\Server\CryptKey((\dirname(__DIR__, 4).'/config/jwt/private.pem'), $this->getEnv('string:default:jwt_private_key_passphrase_default:JWT_PRIVATE_KEY_PASSPHRASE')))));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Handler\RetryMessageHandler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Handler\RetryMessageHandler
     */
    protected function getRetryMessageHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Handler/RetryMessageHandler.php';

        $a = ($this->services['dead_message.repository'] ?? $this->getDeadMessage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\RetryMessageHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\RetryMessageHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\RetryMessageHandler'] = new \Shopware\Core\Framework\MessageQueue\Handler\RetryMessageHandler($a, new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'] ?? $this->getLogCleanupTaskHandlerService());
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'] ?? $this->getInvalidateCacheTaskHandlerService());
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'] ?? $this->getCleanupOldCacheFoldersHandlerService());
            yield 3 => ($this->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'] ?? $this->getGenerateThumbnailsHandlerService());
            yield 4 => ($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'] ?? $this->getUpdateAppsHandlerService());
            yield 5 => ($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'] ?? $this->getDeleteCascadeAppsHandlerService());
            yield 6 => ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService());
            yield 7 => ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'] ?? $this->getCleanupVersionTaskHandlerService());
            yield 8 => ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\EncryptedMessageHandler'] ?? $this->getEncryptedMessageHandlerService());
            yield 9 => ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\RetryMessageHandler'] ?? $this->getRetryMessageHandlerService());
            yield 10 => ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\SleepTaskHandler'] ?? $this->getSleepTaskHandlerService());
            yield 11 => ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'] ?? $this->getRequeueDeadMessagesHandlerService());
            yield 12 => ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'] ?? $this->getRegisterScheduledTaskHandlerService());
            yield 13 => ($this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'] ?? $this->getWebhookEventMessageHandlerService());
            yield 14 => ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'] ?? $this->getCleanupSalesChannelContextTaskHandlerService());
            yield 15 => ($this->privates['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler'] ?? $this->getDeleteFileHandler2Service());
            yield 16 => ($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'] ?? $this->getCleanupProductKeywordDictionaryTaskHandlerService());
            yield 17 => ($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'] ?? $this->getCleanupUnusedDownloadMediaTaskHandlerService());
            yield 18 => ($this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'] ?? $this->getNewsletterRecipientTaskHandlerService());
            yield 19 => ($this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'] ?? $this->getUpdateProductStreamMappingTaskHandlerService());
            yield 20 => ($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'] ?? $this->getProductExportGenerateTaskHandlerService());
            yield 21 => ($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'] ?? $this->getProductExportPartialGenerationHandlerService());
            yield 22 => ($this->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'] ?? $this->getImportExportHandlerService());
            yield 23 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileHandler'] ?? $this->getDeleteFileHandlerService());
            yield 24 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'] ?? $this->getCleanupImportExportFileTaskHandlerService());
            yield 25 => ($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'] ?? $this->getSitemapGenerateTaskHandlerService());
            yield 26 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'] ?? $this->getCleanupCartTaskHandlerService());
            yield 27 => ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler'] ?? $this->getCacheWarmerTaskHandlerService());
            yield 28 => ($this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] ?? $this->getCreateAliasTaskHandlerService());
            yield 29 => ($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? $this->getElasticsearchIndexerService());
            yield 30 => ($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? $this->getAdminSearchRegistryService());
            yield 31 => ($this->privates['mailer.messenger.message_handler'] ?? $this->getMailer_Messenger_MessageHandlerService());
        }, 32), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Handler\SleepTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Handler\SleepTaskHandler
     */
    protected function getSleepTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Handler/SleepTaskHandler.php';

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Handler\\SleepTaskHandler'] = new \Shopware\Core\Framework\MessageQueue\Handler\SleepTaskHandler(($this->privates['monolog.logger.messenger'] ?? $this->getMonolog_Logger_MessengerService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Middleware\RetryMiddleware' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Middleware\RetryMiddleware
     */
    protected function getRetryMiddlewareService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Middleware/RetryMiddleware.php';

        $a = ($this->services['dead_message.repository'] ?? $this->getDeadMessage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Middleware\\RetryMiddleware'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Middleware\\RetryMiddleware'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\Middleware\\RetryMiddleware'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Middleware\\RetryMiddleware'];
        }

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Middleware\\RetryMiddleware'] = new \Shopware\Core\Framework\MessageQueue\Middleware\RetryMiddleware($a, $b);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Command\RegisterScheduledTasksCommand' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Command\RegisterScheduledTasksCommand
     */
    protected function getRegisterScheduledTasksCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Command/RegisterScheduledTasksCommand.php';

        $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\RegisterScheduledTasksCommand'] = $instance = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Command\RegisterScheduledTasksCommand(($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? $this->getTaskRegistryService()));

        $instance->setName('scheduled-task:register');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Command\ScheduledTaskRunner' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Command\ScheduledTaskRunner
     */
    protected function getScheduledTaskRunnerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Command/ScheduledTaskRunner.php';

        $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Command\\ScheduledTaskRunner'] = $instance = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Command\ScheduledTaskRunner(($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Scheduler\\TaskScheduler'] ?? $this->getTaskSchedulerService()), ($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService()));

        $instance->setName('scheduled-task:run');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\MessageQueue\RegisterScheduledTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\MessageQueue\RegisterScheduledTaskHandler
     */
    protected function getRegisterScheduledTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/MessageQueue/RegisterScheduledTaskHandler.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? $this->getTaskRegistryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\MessageQueue\RegisterScheduledTaskHandler($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Registry\TaskRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Registry\TaskRegistry
     */
    protected function getTaskRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Registry/TaskRegistry.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'];
        }

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Registry\TaskRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTask'] ?? ($this->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTask'] = new \Shopware\Core\Framework\Log\ScheduledTask\LogCleanupTask()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTask'] ?? ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTask'] = new \Shopware\Core\Framework\Adapter\Cache\InvalidateCacheTask()));
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsTask'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsTask'] = new \Shopware\Core\Framework\App\ScheduledTask\UpdateAppsTask()));
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsTask'] ?? ($this->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsTask'] = new \Shopware\Core\Framework\App\ScheduledTask\DeleteCascadeAppsTask()));
            yield 4 => ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTask'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTask'] = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Cleanup\CleanupVersionTask()));
            yield 5 => ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesTask'] ?? ($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesTask'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\RequeueDeadMessagesTask()));
            yield 6 => ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTask'] ?? ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTask'] = new \Shopware\Core\System\SalesChannel\Context\Cleanup\CleanupSalesChannelContextTask()));
            yield 7 => ($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTask'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTask'] = new \Shopware\Core\Content\Product\Cleanup\CleanupProductKeywordDictionaryTask()));
            yield 8 => ($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTask'] ?? ($this->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTask'] = new \Shopware\Core\Content\Product\Cleanup\CleanupUnusedDownloadMediaTask()));
            yield 9 => ($this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTask'] ?? ($this->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTask'] = new \Shopware\Core\Content\Newsletter\ScheduledTask\NewsletterRecipientTask()));
            yield 10 => ($this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTask'] ?? ($this->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTask'] = new \Shopware\Core\Content\ProductStream\ScheduledTask\UpdateProductStreamMappingTask()));
            yield 11 => ($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTask'] ?? ($this->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTask'] = new \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportGenerateTask()));
            yield 12 => ($this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTask'] ?? ($this->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTask'] = new \Shopware\Core\Content\ImportExport\ScheduledTask\CleanupImportExportFileTask()));
            yield 13 => ($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTask'] ?? ($this->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTask'] = new \Shopware\Core\Content\Sitemap\ScheduledTask\SitemapGenerateTask()));
            yield 14 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTask'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTask'] = new \Shopware\Core\Checkout\Cart\Cleanup\CleanupCartTask()));
            yield 15 => ($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTask'] ?? ($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTask'] = new \Shopware\Elasticsearch\Framework\Indexing\CreateAliasTask()));
        }, 16), $a, ($this->privates['parameter_bag'] ?? ($this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this))));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\RequeueDeadMessagesHandler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\RequeueDeadMessagesHandler
     */
    protected function getRequeueDeadMessagesHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/RequeueDeadMessagesHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/DeadMessage/RequeueDeadMessagesService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/EncryptedBus.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'];
        }
        $b = ($this->services['dead_message.repository'] ?? $this->getDeadMessage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'];
        }
        $c = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\RequeueDeadMessagesHandler($a, new \Shopware\Core\Framework\MessageQueue\DeadMessage\RequeueDeadMessagesService($b, $c, new \Shopware\Core\Framework\MessageQueue\EncryptedBus($c, ($this->privates['shopware.public_key'] ?? ($this->privates['shopware.public_key'] = new \League\OAuth2\Server\CryptKey((\dirname(__DIR__, 4).'/config/jwt/public.pem'))))), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService())));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Scheduler\TaskScheduler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Scheduler\TaskScheduler
     */
    protected function getTaskSchedulerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Scheduler/TaskScheduler.php';

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Scheduler\\TaskScheduler'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Scheduler\TaskScheduler(($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService()), ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService()), ($this->privates['parameter_bag'] ?? ($this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this))));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Subscriber\PluginLifecycleSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Subscriber\PluginLifecycleSubscriber
     */
    protected function getPluginLifecycleSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Subscriber/PluginLifecycleSubscriber.php';

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Subscriber\\PluginLifecycleSubscriber'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Subscriber\PluginLifecycleSubscriber(($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? $this->getTaskRegistryService()), ($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Subscriber\UpdatePostFinishSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Subscriber\UpdatePostFinishSubscriber
     */
    protected function getUpdatePostFinishSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Subscriber/UpdatePostFinishSubscriber.php';

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Subscriber\\UpdatePostFinishSubscriber'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Subscriber\UpdatePostFinishSubscriber(($this->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? $this->getTaskRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Subscriber\MessageFailedHandler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Subscriber\MessageFailedHandler
     */
    protected function getMessageFailedHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Subscriber/MessageFailedHandler.php';

        return $this->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageFailedHandler'] = new \Shopware\Core\Framework\MessageQueue\Subscriber\MessageFailedHandler(($this->services['shopware.increment.gateway.registry'] ?? $this->getShopware_Increment_Gateway_RegistryService()), 'default');
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Migration\Command\CreateMigrationCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Command\CreateMigrationCommand
     */
    protected function getCreateMigrationCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/CreateMigrationCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand'] = $instance = new \Shopware\Core\Framework\Migration\Command\CreateMigrationCommand(($this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] ?? $this->getKernelPluginCollectionService()), (\dirname(__DIR__, 4).'/vendor/shopware/core'), '6.4.20.0');

        $instance->setName('database:create-migration');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Migration\Command\MigrationCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Command\MigrationCommand
     */
    protected function getMigrationCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/MigrationCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand'] = $instance = new \Shopware\Core\Framework\Migration\Command\MigrationCommand(($this->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] ?? $this->getMigrationCollectionLoaderService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), '6.4.20.0');

        $instance->setName('database:migrate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Migration\Command\MigrationDestructiveCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Command\MigrationDestructiveCommand
     */
    protected function getMigrationDestructiveCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/MigrationCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/MigrationDestructiveCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand'] = $instance = new \Shopware\Core\Framework\Migration\Command\MigrationDestructiveCommand(($this->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] ?? $this->getMigrationCollectionLoaderService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), '6.4.20.0');

        $instance->setName('database:migrate-destructive');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Migration\Command\RefreshMigrationCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Command\RefreshMigrationCommand
     */
    protected function getRefreshMigrationCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/RefreshMigrationCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand'] = $instance = new \Shopware\Core\Framework\Migration\Command\RefreshMigrationCommand();

        $instance->setName('database:refresh-migration');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Migration\MigrationSource.core.V6_3' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationSource
     */
    protected function getMigrationSource_Core_V63Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationSource.php';

        $this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_3'] = $instance = new \Shopware\Core\Framework\Migration\MigrationSource('core.V6_3');

        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/core/Migration/V6_3'), 'Shopware\\Core\\Migration\\V6_3');
        $instance->addReplacementPattern('#^(Shopware\\\\Core\\\\Migration\\\\)V6_3\\\\([^\\\\]*)$#', '$1$2');
        $instance->addReplacementPattern('#^(Shopware\\\\Core\\\\Migration\\\\)V6_4\\\\([^\\\\]*)$#', '$1$2');
        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Migration/V6_3'), 'Shopware\\Storefront\\Migration\\V6_3');
        $instance->addReplacementPattern('#^(Shopware\\\\Storefront\\\\Migration\\\\)V6_3\\\\([^\\\\]*)$#', '$1$2');
        $instance->addReplacementPattern('#^(Shopware\\\\Storefront\\\\Migration\\\\)V6_4\\\\([^\\\\]*)$#', '$1$2');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Migration\MigrationSource.core.V6_4' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationSource
     */
    protected function getMigrationSource_Core_V64Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationSource.php';

        $this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_4'] = $instance = new \Shopware\Core\Framework\Migration\MigrationSource('core.V6_4');

        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/core/Migration/V6_4'), 'Shopware\\Core\\Migration\\V6_4');
        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/administration/Migration/V6_4'), 'Shopware\\Administration\\Migration\\V6_4');
        $instance->addReplacementPattern('#^(Shopware\\\\Administration\\\\Migration\\\\)V6_4\\\\([^\\\\]*)$#', '$1$2');
        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Migration/V6_4'), 'Shopware\\Storefront\\Migration\\V6_4');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Migration\MigrationSource.core.V6_5' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationSource
     */
    protected function getMigrationSource_Core_V65Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationSource.php';

        $this->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_5'] = $instance = new \Shopware\Core\Framework\Migration\MigrationSource('core.V6_5');

        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/core/Migration/V6_5'), 'Shopware\\Core\\Migration\\V6_5');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\BundleDumpCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\BundleDumpCommand
     */
    protected function getBundleDumpCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/BundleDumpCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/BundleConfigGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/BundleConfigGenerator.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\BundleDumpCommand(new \Shopware\Core\Framework\Plugin\BundleConfigGenerator(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? $this->getActiveAppsLoaderService())), \dirname(__DIR__, 4));

        $instance->setName('bundle:dump');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginActivateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginActivateCommand
     */
    protected function getPluginActivateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginActivateCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginActivateCommand(($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? $this->getPluginLifecycleServiceService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service()));

        $instance->setName('plugin:activate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginDeactivateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginDeactivateCommand
     */
    protected function getPluginDeactivateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginDeactivateCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginDeactivateCommand(($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? $this->getPluginLifecycleServiceService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service()));

        $instance->setName('plugin:deactivate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginInstallCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginInstallCommand
     */
    protected function getPluginInstallCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginInstallCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginInstallCommand(($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? $this->getPluginLifecycleServiceService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service()));

        $instance->setName('plugin:install');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUninstallCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUninstallCommand
     */
    protected function getPluginUninstallCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginUninstallCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUninstallCommand(($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? $this->getPluginLifecycleServiceService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service()));

        $instance->setName('plugin:uninstall');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateCommand
     */
    protected function getPluginUpdateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginUpdateCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateCommand(($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? $this->getPluginLifecycleServiceService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service()));

        $instance->setName('plugin:update');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\PluginCreateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\PluginCreateCommand
     */
    protected function getPluginCreateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/PluginCreateCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\PluginCreateCommand(\dirname(__DIR__, 4));

        $instance->setName('plugin:create');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\PluginListCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\PluginListCommand
     */
    protected function getPluginListCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/PluginListCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\PluginListCommand(($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()));

        $instance->setName('plugin:list');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\PluginRefreshCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\PluginRefreshCommand
     */
    protected function getPluginRefreshCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/PluginRefreshCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\PluginRefreshCommand(($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? $this->getPluginServiceService()));

        $instance->setName('plugin:refresh');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\PluginZipImportCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\PluginZipImportCommand
     */
    protected function getPluginZipImportCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/PluginZipImportCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\PluginZipImportCommand(($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? $this->getPluginManagementServiceService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? $this->getPluginServiceService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service()));

        $instance->setName('plugin:zip-import');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Composer\CommandExecutor' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Composer\CommandExecutor
     */
    protected function getCommandExecutorService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->privates['Shopware\\Core\\Framework\\Plugin\\Composer\\CommandExecutor'] = $this->createProxy('CommandExecutor_2fbbc6d', function () {
                return \CommandExecutor_2fbbc6d::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getCommandExecutorService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        return new \Shopware\Core\Framework\Plugin\Composer\CommandExecutor(\dirname(__DIR__, 4));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\PluginLifecycleService' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginLifecycleService
     */
    protected function getPluginLifecycleServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginLifecycleService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Requirement/RequirementsValidator.php';

        $a = ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService());

        return $this->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] = new \Shopware\Core\Framework\Plugin\PluginLifecycleService($a, ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] ?? $this->getKernelPluginCollectionService()), $this, ($this->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] ?? $this->getMigrationCollectionLoaderService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'] ?? $this->getAssetServiceService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\Composer\\CommandExecutor'] ?? $this->getCommandExecutorService()), new \Shopware\Core\Framework\Plugin\Requirement\RequirementsValidator($a, \dirname(__DIR__, 4)), ($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService()), '6.4.20.0', ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\PluginManagementService' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginManagementService
     */
    protected function getPluginManagementServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginManagementService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginZipDetector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginExtractor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? $this->getPluginServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'];
        }
        $b = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service());

        if (isset($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'];
        }
        $c = ($this->services['.container.private.filesystem'] ?? ($this->services['.container.private.filesystem'] = new \Symfony\Component\Filesystem\Filesystem()));

        return $this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] = new \Shopware\Core\Framework\Plugin\PluginManagementService(\dirname(__DIR__, 4), new \Shopware\Core\Framework\Plugin\PluginZipDetector(), new \Shopware\Core\Framework\Plugin\PluginExtractor(['plugin' => (\dirname(__DIR__, 4).'/custom/plugins'), 'app' => (\dirname(__DIR__, 4).'/custom/apps')], $c), $a, $c, $b, new \GuzzleHttp\Client());
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\PluginService' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginService
     */
    protected function getPluginServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Changelog/ChangelogService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/PluginFinder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Composer/PackageProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/VersionSanitizer.php';

        $a = ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'];
        }
        $b = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] = new \Shopware\Core\Framework\Plugin\PluginService((\dirname(__DIR__, 4).'/custom/plugins'), \dirname(__DIR__, 4), $a, $b, new \Shopware\Core\Framework\Plugin\Changelog\ChangelogService(new \Shopware\Core\Framework\Plugin\Changelog\ChangelogParser()), new \Shopware\Core\Framework\Plugin\Util\PluginFinder(new \Shopware\Core\Framework\Plugin\Composer\PackageProvider()), new \Shopware\Core\Framework\Plugin\Util\VersionSanitizer());
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Subscriber\PluginAclPrivilegesSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Subscriber\PluginAclPrivilegesSubscriber
     */
    protected function getPluginAclPrivilegesSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Subscriber/PluginAclPrivilegesSubscriber.php';

        return $this->privates['Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginAclPrivilegesSubscriber'] = new \Shopware\Core\Framework\Plugin\Subscriber\PluginAclPrivilegesSubscriber(($this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] ?? $this->getKernelPluginCollectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Plugin\Util\AssetService' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Util\AssetService
     */
    protected function getAssetServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/AssetService.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'] = new \Shopware\Core\Framework\Plugin\Util\AssetService(($this->services['shopware.filesystem.asset'] ?? $this->getShopware_Filesystem_AssetService()), ($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader'] ?? $this->getKernelPluginLoaderService()), $a, ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService()), (\dirname(__DIR__, 4).'/vendor/shopware/core'), ($this->privates['parameter_bag'] ?? ($this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this))));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Routing\Annotation\CriteriaValueResolver' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\Annotation\CriteriaValueResolver
     */
    protected function getCriteriaValueResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/Annotation/CriteriaValueResolver.php';

        return $this->privates['Shopware\\Core\\Framework\\Routing\\Annotation\\CriteriaValueResolver'] = new \Shopware\Core\Framework\Routing\Annotation\CriteriaValueResolver(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? $this->getRequestCriteriaBuilderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Routing\ContextResolverListener' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\ContextResolverListener
     */
    protected function getContextResolverListenerService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'] ?? $this->getSalesChannelRequestContextResolverService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Routing\\ContextResolverListener'])) {
            return $this->privates['Shopware\\Core\\Framework\\Routing\\ContextResolverListener'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Routing\\ContextResolverListener'] = new \Shopware\Core\Framework\Routing\ContextResolverListener($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Routing\CoreSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\CoreSubscriber
     */
    protected function getCoreSubscriberService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Routing\\CoreSubscriber'] = new \Shopware\Core\Framework\Routing\CoreSubscriber($this->parameters['shopware.security.csp_templates']);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Routing\RouteEventSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\RouteEventSubscriber
     */
    protected function getRouteEventSubscriberService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'] = new \Shopware\Core\Framework\Routing\RouteEventSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Routing\RouteScopeListener' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\RouteScopeListener
     */
    protected function getRouteScopeListenerService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeListener'] = new \Shopware\Core\Framework\Routing\RouteScopeListener(($this->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] ?? $this->getRouteScopeRegistryService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Routing\\SymfonyRouteScopeWhitelist'] ?? ($this->privates['Shopware\\Core\\Framework\\Routing\\SymfonyRouteScopeWhitelist'] = new \Shopware\Core\Framework\Routing\SymfonyRouteScopeWhitelist()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Routing\\PaymentScopeWhitelist'] ?? ($this->privates['Shopware\\Core\\Framework\\Routing\\PaymentScopeWhitelist'] = new \Shopware\Core\Framework\Routing\PaymentScopeWhitelist()));
        }, 2));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Routing\RouteScopeRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\RouteScopeRegistry
     */
    protected function getRouteScopeRegistryService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] = new \Shopware\Core\Framework\Routing\RouteScopeRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteScope'] ?? ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteScope'] = new \Shopware\Core\Framework\Routing\RouteScope()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Routing\\ApiRouteScope'] ?? ($this->privates['Shopware\\Core\\Framework\\Routing\\ApiRouteScope'] = new \Shopware\Core\Framework\Routing\ApiRouteScope()));
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Routing\\StoreApiRouteScope'] ?? ($this->privates['Shopware\\Core\\Framework\\Routing\\StoreApiRouteScope'] = new \Shopware\Core\Framework\Routing\StoreApiRouteScope()));
            yield 3 => ($this->privates['Shopware\\Administration\\Framework\\Routing\\AdministrationRouteScope'] ?? ($this->privates['Shopware\\Administration\\Framework\\Routing\\AdministrationRouteScope'] = new \Shopware\Administration\Framework\Routing\AdministrationRouteScope($this->getEnv('resolve:SHOPWARE_ADMINISTRATION_PATH_NAME'))));
            yield 4 => ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontRouteScope'] ?? ($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontRouteScope'] = new \Shopware\Storefront\Framework\Routing\StorefrontRouteScope()));
        }, 5));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Routing\SalesChannelRequestContextResolver' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\SalesChannelRequestContextResolver
     */
    protected function getSalesChannelRequestContextResolverService()
    {
        $a = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'])) {
            return $this->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'])) {
            return $this->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'];
        }
        $c = ($this->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] ?? $this->getRouteScopeRegistryService());

        return $this->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'] = new \Shopware\Core\Framework\Routing\SalesChannelRequestContextResolver(new \Shopware\Core\Framework\Routing\ApiRequestContextResolver(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $c), $a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Rule\Collector\RuleConditionRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\Rule\Collector\RuleConditionRegistry
     */
    protected function getRuleConditionRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Rule/Collector/RuleConditionRegistry.php';

        return $this->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] = new \Shopware\Core\Framework\Rule\Collector\RuleConditionRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\AndRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\AndRule'] = new \Shopware\Core\Framework\Rule\Container\AndRule()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\NotRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\NotRule'] = new \Shopware\Core\Framework\Rule\Container\NotRule()));
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\OrRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\OrRule'] = new \Shopware\Core\Framework\Rule\Container\OrRule()));
            yield 3 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\XorRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\XorRule'] = new \Shopware\Core\Framework\Rule\Container\XorRule()));
            yield 4 => ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\MatchAllLineItemsRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\Container\\MatchAllLineItemsRule'] = new \Shopware\Core\Framework\Rule\Container\MatchAllLineItemsRule()));
            yield 5 => ($this->privates['Shopware\\Core\\Framework\\Rule\\ScriptRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\ScriptRule'] = new \Shopware\Core\Framework\Rule\ScriptRule()));
            yield 6 => ($this->privates['Shopware\\Core\\Framework\\Rule\\DateRangeRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\DateRangeRule'] = new \Shopware\Core\Framework\Rule\DateRangeRule()));
            yield 7 => ($this->privates['Shopware\\Core\\Framework\\Rule\\SimpleRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\SimpleRule'] = new \Shopware\Core\Framework\Rule\SimpleRule()));
            yield 8 => ($this->privates['Shopware\\Core\\Framework\\Rule\\SalesChannelRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\SalesChannelRule'] = new \Shopware\Core\Framework\Rule\SalesChannelRule()));
            yield 9 => ($this->privates['Shopware\\Core\\Framework\\Rule\\TimeRangeRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\TimeRangeRule'] = new \Shopware\Core\Framework\Rule\TimeRangeRule()));
            yield 10 => ($this->privates['Shopware\\Core\\Framework\\Rule\\WeekdayRule'] ?? ($this->privates['Shopware\\Core\\Framework\\Rule\\WeekdayRule'] = new \Shopware\Core\Framework\Rule\WeekdayRule()));
            yield 11 => ($this->privates['Shopware\\Core\\System\\Language\\Rule\\LanguageRule'] ?? ($this->privates['Shopware\\Core\\System\\Language\\Rule\\LanguageRule'] = new \Shopware\Core\System\Language\Rule\LanguageRule()));
            yield 12 => ($this->privates['Shopware\\Core\\System\\Currency\\Rule\\CurrencyRule'] ?? ($this->privates['Shopware\\Core\\System\\Currency\\Rule\\CurrencyRule'] = new \Shopware\Core\System\Currency\Rule\CurrencyRule()));
            yield 13 => ($this->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTagRule'] ?? ($this->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTagRule'] = new \Shopware\Core\Content\Flow\Rule\OrderTagRule()));
            yield 14 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartAmountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartAmountRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartAmountRule()));
            yield 15 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartPositionPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartPositionPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartPositionPriceRule()));
            yield 16 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsCountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsCountRule'] = new \Shopware\Core\Checkout\Cart\Rule\GoodsCountRule()));
            yield 17 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\GoodsPriceRule()));
            yield 18 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfTypeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfTypeRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemOfTypeRule()));
            yield 19 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemRule()));
            yield 20 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionLineItemRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionLineItemRule'] = new \Shopware\Core\Checkout\Promotion\Rule\PromotionLineItemRule()));
            yield 21 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionCodeOfTypeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionCodeOfTypeRule'] = new \Shopware\Core\Checkout\Promotion\Rule\PromotionCodeOfTypeRule()));
            yield 22 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionValueRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionValueRule'] = new \Shopware\Core\Checkout\Promotion\Rule\PromotionValueRule()));
            yield 23 => ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionsInCartCountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionsInCartCountRule'] = new \Shopware\Core\Checkout\Promotion\Rule\PromotionsInCartCountRule()));
            yield 24 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemsInCartRule()));
            yield 25 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTotalPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTotalPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemTotalPriceRule()));
            yield 26 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemUnitPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemUnitPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemUnitPriceRule()));
            yield 27 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWithQuantityRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWithQuantityRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemWithQuantityRule()));
            yield 28 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWrapperRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWrapperRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemWrapperRule()));
            yield 29 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartWeightRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartWeightRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartWeightRule()));
            yield 30 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartVolumeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartVolumeRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartVolumeRule()));
            yield 31 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartHasDeliveryFreeItemRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartHasDeliveryFreeItemRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartHasDeliveryFreeItemRule()));
            yield 32 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCountryRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCountryRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingCountryRule()));
            yield 33 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStreetRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStreetRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingStreetRule()));
            yield 34 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingZipCodeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingZipCodeRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingZipCodeRule()));
            yield 35 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerGroupRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerGroupRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerGroupRule()));
            yield 36 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerTagRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerTagRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerTagRule()));
            yield 37 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerNumberRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerNumberRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerNumberRule()));
            yield 38 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DifferentAddressesRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DifferentAddressesRule'] = new \Shopware\Core\Checkout\Customer\Rule\DifferentAddressesRule()));
            yield 39 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\EmailRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\EmailRule'] = new \Shopware\Core\Checkout\Customer\Rule\EmailRule()));
            yield 40 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewCustomerRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewCustomerRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsNewCustomerRule()));
            yield 41 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsActiveRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsActiveRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsActiveRule()));
            yield 42 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\LastNameRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\LastNameRule'] = new \Shopware\Core\Checkout\Customer\Rule\LastNameRule()));
            yield 43 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsCompanyRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsCompanyRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsCompanyRule()));
            yield 44 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartTaxDisplayRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartTaxDisplayRule'] = new \Shopware\Core\Checkout\Cart\Rule\CartTaxDisplayRule()));
            yield 45 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsGuestCustomerRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsGuestCustomerRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsGuestCustomerRule()));
            yield 46 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewsletterRecipientRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewsletterRecipientRule'] = new \Shopware\Core\Checkout\Customer\Rule\IsNewsletterRecipientRule()));
            yield 47 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCountryRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCountryRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingCountryRule()));
            yield 48 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStreetRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStreetRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingStreetRule()));
            yield 49 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCityRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCityRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingCityRule()));
            yield 50 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCityRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCityRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingCityRule()));
            yield 51 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStateRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStateRule'] = new \Shopware\Core\Checkout\Customer\Rule\BillingStateRule()));
            yield 52 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStateRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStateRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingStateRule()));
            yield 53 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingZipCodeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingZipCodeRule'] = new \Shopware\Core\Checkout\Customer\Rule\ShippingZipCodeRule()));
            yield 54 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerLoggedInRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerLoggedInRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerLoggedInRule()));
            yield 55 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartCountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartCountRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemsInCartCountRule()));
            yield 56 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderCountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderCountRule'] = new \Shopware\Core\Checkout\Customer\Rule\OrderCountRule()));
            yield 57 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastOrderRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastOrderRule'] = new \Shopware\Core\Checkout\Customer\Rule\DaysSinceLastOrderRule()));
            yield 58 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTagRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTagRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemTagRule()));
            yield 59 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\AlwaysValidRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\AlwaysValidRule'] = new \Shopware\Core\Checkout\Cart\Rule\AlwaysValidRule()));
            yield 60 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPropertyRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPropertyRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemPropertyRule()));
            yield 61 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemIsNewRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemIsNewRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemIsNewRule()));
            yield 62 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfManufacturerRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfManufacturerRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemOfManufacturerRule()));
            yield 63 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPurchasePriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPurchasePriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemPurchasePriceRule()));
            yield 64 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCreationDateRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCreationDateRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemCreationDateRule()));
            yield 65 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemReleaseDateRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemReleaseDateRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemReleaseDateRule()));
            yield 66 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemClearanceSaleRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemClearanceSaleRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemClearanceSaleRule()));
            yield 67 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPromotedRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPromotedRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemPromotedRule()));
            yield 68 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInCategoryRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInCategoryRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemInCategoryRule()));
            yield 69 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInProductStreamRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInProductStreamRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemInProductStreamRule()));
            yield 70 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTaxationRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTaxationRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemTaxationRule()));
            yield 71 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWidthRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWidthRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionWidthRule()));
            yield 72 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionHeightRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionHeightRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionHeightRule()));
            yield 73 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionLengthRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionLengthRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionLengthRule()));
            yield 74 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWeightRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWeightRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionWeightRule()));
            yield 75 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionVolumeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionVolumeRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionVolumeRule()));
            yield 76 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemListPriceRule()));
            yield 77 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRatioRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRatioRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemListPriceRatioRule()));
            yield 78 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCustomFieldRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCustomFieldRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemCustomFieldRule()));
            yield 79 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemStockRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemStockRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemStockRule()));
            yield 80 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemActualStockRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemActualStockRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemActualStockRule()));
            yield 81 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\PaymentMethodRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\PaymentMethodRule'] = new \Shopware\Core\Checkout\Cart\Rule\PaymentMethodRule()));
            yield 82 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\ShippingMethodRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\ShippingMethodRule'] = new \Shopware\Core\Checkout\Cart\Rule\ShippingMethodRule()));
            yield 83 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemGoodsTotalRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemGoodsTotalRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemGoodsTotalRule()));
            yield 84 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderTotalAmountRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderTotalAmountRule'] = new \Shopware\Core\Checkout\Customer\Rule\OrderTotalAmountRule()));
            yield 85 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerCustomFieldRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerCustomFieldRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerCustomFieldRule()));
            yield 86 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerBirthdayRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerBirthdayRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerBirthdayRule()));
            yield 87 => ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemProductStatesRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemProductStatesRule'] = new \Shopware\Core\Checkout\Cart\Rule\LineItemProductStatesRule()));
            yield 88 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerAgeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerAgeRule'] = new \Shopware\Core\Checkout\Customer\Rule\CustomerAgeRule()));
            yield 89 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastLoginRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastLoginRule'] = new \Shopware\Core\Checkout\Customer\Rule\DaysSinceLastLoginRule()));
            yield 90 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\AffiliateCodeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\AffiliateCodeRule'] = new \Shopware\Core\Checkout\Customer\Rule\AffiliateCodeRule()));
            yield 91 => ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CampaignCodeRule'] ?? ($this->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CampaignCodeRule'] = new \Shopware\Core\Checkout\Customer\Rule\CampaignCodeRule()));
        }, 92));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Script\Api\ScriptResponseEncoder' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Api\ScriptResponseEncoder
     */
    protected function getScriptResponseEncoderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Api/ScriptResponseEncoder.php';

        return $this->privates['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseEncoder'] = new \Shopware\Core\Framework\Script\Api\ScriptResponseEncoder(($this->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'] ?? $this->getStructEncoderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Script\Execution\ScriptLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Execution\ScriptLoader
     */
    protected function getScriptLoaderService()
    {
        $a = ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'] ?? $this->getScriptPersisterService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'])) {
            return $this->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'] = new \Shopware\Core\Framework\Script\Execution\ScriptLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), $this->targetDir.'', false);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Authentication\LocaleProvider' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Authentication\LocaleProvider
     */
    protected function getLocaleProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/LocaleProvider.php';

        $a = ($this->services['user.repository'] ?? $this->getUser_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'] = new \Shopware\Core\Framework\Store\Authentication\LocaleProvider($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Command\StoreDownloadCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Command\StoreDownloadCommand
     */
    protected function getStoreDownloadCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Command/StoreDownloadCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand'] = $instance = new \Shopware\Core\Framework\Store\Command\StoreDownloadCommand(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService()), ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? $this->getPluginManagementServiceService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? $this->getPluginLifecycleServiceService()), ($this->services['user.repository'] ?? $this->getUser_RepositoryService()));

        $instance->setName('store:download');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Command\StoreLoginCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Command\StoreLoginCommand
     */
    protected function getStoreLoginCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Command/StoreLoginCommand.php';

        $this->privates['Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand'] = $instance = new \Shopware\Core\Framework\Store\Command\StoreLoginCommand(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService()), ($this->services['user.repository'] ?? $this->getUser_RepositoryService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));

        $instance->setName('store:login');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\AbstractExtensionDataProvider' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ExtensionDataProvider
     */
    protected function getAbstractExtensionDataProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/AbstractExtensionDataProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionDataProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionListingLoader.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'] ?? $this->getExtensionLoaderService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'];
        }
        $b = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'];
        }
        $c = ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'];
        }
        $d = ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] = new \Shopware\Core\Framework\Store\Services\ExtensionDataProvider($a, $b, $c, new \Shopware\Core\Framework\Store\Services\ExtensionListingLoader($d));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\AbstractStoreAppLifecycleService' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreAppLifecycleService
     */
    protected function getAbstractStoreAppLifecycleServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/AbstractStoreAppLifecycleService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/StoreAppLifecycleService.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? $this->getAppLifecycleService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }
        $b = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }
        $c = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }
        $d = ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }
        $e = ($this->privates['Shopware\\Core\\Framework\\App\\AppStateService'] ?? $this->getAppStateServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'] = new \Shopware\Core\Framework\Store\Services\StoreAppLifecycleService(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService()), ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService()), $a, $b, $c, $d, $e, ($this->privates['Shopware\\Core\\Framework\\App\\Delta\\AppConfirmationDeltaProvider'] ?? $this->getAppConfirmationDeltaProviderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\ExtensionDownloader' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ExtensionDownloader
     */
    protected function getExtensionDownloaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionDownloader.php';

        $a = ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'];
        }
        $b = ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? $this->getPluginManagementServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'] = new \Shopware\Core\Framework\Store\Services\ExtensionDownloader($a, ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService()), $b);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\ExtensionLifecycleService' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ExtensionLifecycleService
     */
    protected function getExtensionLifecycleServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/AbstractExtensionLifecycle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionLifecycleService.php';

        return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLifecycleService'] = new \Shopware\Core\Framework\Store\Services\ExtensionLifecycleService(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'] ?? $this->getAbstractStoreAppLifecycleServiceService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? $this->getPluginServiceService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? $this->getPluginLifecycleServiceService()), ($this->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? $this->getPluginManagementServiceService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\ExtensionLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ExtensionLoader
     */
    protected function getExtensionLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionLoader.php';

        $a = ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'];
        }
        $b = ($this->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'] ?? $this->getConfigurationServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'];
        }
        $c = ($this->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'] ?? $this->getLocaleProviderService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'] = new \Shopware\Core\Framework\Store\Services\ExtensionLoader($a, ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService()), $b, $c, ($this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? $this->getLanguageLocaleCodeProviderService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\FirstRunWizardClient' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\FirstRunWizardClient
     */
    protected function getFirstRunWizardClientService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/FirstRunWizardClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/AbstractStoreRequestOptionsProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/FrwRequestOptionsProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';

        $a = ($this->services['user_config.repository'] ?? $this->getUserConfig_RepositoryService());

        return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\FirstRunWizardClient'] = new \Shopware\Core\Framework\Store\Services\FirstRunWizardClient(($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreService'] ?? $this->getStoreServiceService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), true, ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['shopware.store_client'] ?? $this->getShopware_StoreClientService()), new \Shopware\Core\Framework\Store\Authentication\FrwRequestOptionsProvider(($this->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'] ?? $this->getStoreRequestOptionsProviderService()), $a), ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ?? ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] = new \Shopware\Core\Framework\Store\Services\InstanceService('6.4.20.0', $this->getEnv('INSTANCE_ID')))), $a, ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'] ?? $this->getTrackingEventClientService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\StoreClient' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreClient
     */
    protected function getStoreClientService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/StoreClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreService'] ?? $this->getStoreServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }
        $b = ($this->services['plugin.repository'] ?? $this->getPlugin_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }
        $c = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }
        $d = ($this->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'] ?? $this->getStoreRequestOptionsProviderService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }
        $e = ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'] ?? $this->getExtensionLoaderService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] = new \Shopware\Core\Framework\Store\Services\StoreClient($this->parameters['shopware.store_endpoints'], $a, $b, $c, $d, $e, ($this->services['shopware.store_client'] ?? $this->getShopware_StoreClientService()), ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ?? ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] = new \Shopware\Core\Framework\Store\Services\InstanceService('6.4.20.0', $this->getEnv('INSTANCE_ID')))));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\StoreService' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreService
     */
    protected function getStoreServiceService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreService'] = $this->createProxy('StoreService_93b91c4', function () {
                return \StoreService_93b91c4::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getStoreServiceService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        return new \Shopware\Core\Framework\Store\Services\StoreService(($this->services['user.repository'] ?? $this->getUser_RepositoryService()), ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'] ?? $this->getTrackingEventClientService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Services\TrackingEventClient' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\TrackingEventClient
     */
    protected function getTrackingEventClientService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/TrackingEventClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';

        $a = ($this->services['shopware.store_client'] ?? $this->getShopware_StoreClientService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'] = new \Shopware\Core\Framework\Store\Services\TrackingEventClient($a, ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ?? ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] = new \Shopware\Core\Framework\Store\Services\InstanceService('6.4.20.0', $this->getEnv('INSTANCE_ID')))));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Store\Subscriber\LicenseHostChangedSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Subscriber\LicenseHostChangedSubscriber
     */
    protected function getLicenseHostChangedSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Subscriber/LicenseHostChangedSubscriber.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber'] = new \Shopware\Core\Framework\Store\Subscriber\LicenseHostChangedSubscriber($a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Update\Checkers\LicenseCheck' shared service.
     *
     * @return \Shopware\Core\Framework\Update\Checkers\LicenseCheck
     */
    protected function getLicenseCheckService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Checkers/CheckerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Checkers/LicenseCheck.php';

        return $this->privates['Shopware\\Core\\Framework\\Update\\Checkers\\LicenseCheck'] = new \Shopware\Core\Framework\Update\Checkers\LicenseCheck(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()), ($this->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? $this->getStoreClientService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Update\Checkers\MysqlVersionCheck' shared service.
     *
     * @return \Shopware\Core\Framework\Update\Checkers\MysqlVersionCheck
     */
    protected function getMysqlVersionCheckService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Checkers/CheckerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Checkers/MysqlVersionCheck.php';

        return $this->privates['Shopware\\Core\\Framework\\Update\\Checkers\\MysqlVersionCheck'] = new \Shopware\Core\Framework\Update\Checkers\MysqlVersionCheck(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Update\Checkers\WriteableCheck' shared service.
     *
     * @return \Shopware\Core\Framework\Update\Checkers\WriteableCheck
     */
    protected function getWriteableCheckService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Checkers/CheckerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Checkers/WriteableCheck.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Services/Filesystem.php';

        return $this->privates['Shopware\\Core\\Framework\\Update\\Checkers\\WriteableCheck'] = new \Shopware\Core\Framework\Update\Checkers\WriteableCheck(new \Shopware\Core\Framework\Update\Services\Filesystem(), \dirname(__DIR__, 4));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Validation\DataValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Validation\DataValidator
     */
    protected function getDataValidatorService()
    {
        $a = ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'])) {
            return $this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] = new \Shopware\Core\Framework\Validation\DataValidator($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Webhook\BusinessEventEncoder' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\BusinessEventEncoder
     */
    protected function getBusinessEventEncoderService()
    {
        return $this->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'] = new \Shopware\Core\Framework\Webhook\BusinessEventEncoder(($this->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? $this->getJsonEntityEncoderService()), ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Webhook\Handler\WebhookEventMessageHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\Handler\WebhookEventMessageHandler
     */
    protected function getWebhookEventMessageHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Handler/WebhookEventMessageHandler.php';

        $a = ($this->privates['shopware.app_system.guzzle'] ?? $this->getShopware_AppSystem_GuzzleService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'];
        }
        $b = ($this->services['webhook.repository'] ?? $this->getWebhook_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'];
        }
        $c = ($this->services['webhook_event_log.repository'] ?? $this->getWebhookEventLog_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'] = new \Shopware\Core\Framework\Webhook\Handler\WebhookEventMessageHandler($a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Webhook\Hookable\HookableEventFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\Hookable\HookableEventFactory
     */
    protected function getHookableEventFactoryService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\Hookable\\HookableEventFactory'] = $this->createProxy('HookableEventFactory_f62e15e', function () {
                return \HookableEventFactory_f62e15e::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getHookableEventFactoryService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Hookable/WriteResultMerger.php';

        return new \Shopware\Core\Framework\Webhook\Hookable\HookableEventFactory(($this->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'] ?? $this->getBusinessEventEncoderService()), new \Shopware\Core\Framework\Webhook\Hookable\WriteResultMerger(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService())));
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Webhook\Subscriber\RetryWebhookMessageFailedSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\Subscriber\RetryWebhookMessageFailedSubscriber
     */
    protected function getRetryWebhookMessageFailedSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Subscriber/RetryWebhookMessageFailedSubscriber.php';

        $a = ($this->services['dead_message.repository'] ?? $this->getDeadMessage_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'];
        }
        $b = ($this->services['webhook.repository'] ?? $this->getWebhook_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'];
        }
        $c = ($this->services['webhook_event_log.repository'] ?? $this->getWebhookEventLog_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'] = new \Shopware\Core\Framework\Webhook\Subscriber\RetryWebhookMessageFailedSubscriber($a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Webhook\WebhookCacheClearer' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\WebhookCacheClearer
     */
    protected function getWebhookCacheClearerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/WebhookCacheClearer.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'] ?? $this->getWebhookDispatcherService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'];
        }

        return $this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'] = new \Shopware\Core\Framework\Webhook\WebhookCacheClearer($a);
    }

    /*
     * Gets the private 'Shopware\Core\Framework\Webhook\WebhookDispatcher' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\WebhookDispatcher
     */
    protected function getWebhookDispatcherService()
    {
        $a = ($this->services['Shopware\\Core\\Content\\Flow\\Dispatching\\FlowFactory'] ?? $this->getFlowFactoryService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'];
        }
        $b = ($this->privates['shopware.app_system.guzzle'] ?? $this->getShopware_AppSystem_GuzzleService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'];
        }
        $c = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'])) {
            return $this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'];
        }
        $d = new \Shopware\Core\Content\Flow\Dispatching\FlowDispatcher(new \Symfony\Component\EventDispatcher\EventDispatcher(), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), $a);
        $d->setContainer($this);

        return $this->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'] = new \Shopware\Core\Framework\Webhook\WebhookDispatcher($d, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $b, $this->getEnv('APP_URL'), $this, ($this->privates['Shopware\\Core\\Framework\\Webhook\\Hookable\\HookableEventFactory'] ?? $this->getHookableEventFactoryService()), '6.4.20.0', $c, true);
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelCreateCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelCreateCommand
     */
    protected function getSalesChannelCreateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelCreateCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelCreateCommand(($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService()), ($this->services['shipping_method.repository'] ?? $this->getShippingMethod_RepositoryService()), ($this->services['country.repository'] ?? $this->getCountry_RepositoryService()), ($this->services['snippet_set.repository'] ?? $this->getSnippetSet_RepositoryService()), ($this->services['category.repository'] ?? $this->getCategory_RepositoryService()), ($this->services['Shopware\\Core\\Maintenance\\SalesChannel\\Service\\SalesChannelCreator'] ?? $this->getSalesChannelCreatorService()));

        $instance->setName('sales-channel:create');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelListCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelListCommand
     */
    protected function getSalesChannelListCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelListCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelListCommand(($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()));

        $instance->setName('sales-channel:list');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceDisableCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceDisableCommand
     */
    protected function getSalesChannelMaintenanceDisableCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelMaintenanceEnableCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelMaintenanceDisableCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceDisableCommand(($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()));

        $instance->setName('sales-channel:maintenance:disable');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceEnableCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceEnableCommand
     */
    protected function getSalesChannelMaintenanceEnableCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelMaintenanceEnableCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceEnableCommand(($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()));

        $instance->setName('sales-channel:maintenance:enable');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand
     */
    protected function getSalesChannelUpdateDomainCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelUpdateDomainCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand(($this->services['sales_channel_domain.repository'] ?? $this->getSalesChannelDomain_RepositoryService()));

        $instance->setName('sales-channel:update:domain');
        $instance->setDescription('Changes the domain of all sales channels');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemConfigureShopCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemConfigureShopCommand
     */
    protected function getSystemConfigureShopCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemConfigureShopCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/ShopConfigurator.php';

        $this->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemConfigureShopCommand(new \Shopware\Core\Maintenance\System\Service\ShopConfigurator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? $this->getCacheClearer2Service()));

        $instance->setName('system:configure-shop');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemGenerateAppSecretCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemGenerateAppSecretCommand
     */
    protected function getSystemGenerateAppSecretCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemGenerateAppSecretCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemGenerateAppSecretCommand();

        $instance->setName('system:generate-app-secret');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemGenerateJwtSecretCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemGenerateJwtSecretCommand
     */
    protected function getSystemGenerateJwtSecretCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemGenerateJwtSecretCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/JwtCertificateGenerator.php';

        $this->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemGenerateJwtSecretCommand(\dirname(__DIR__, 4), ($this->privates['Shopware\\Core\\Maintenance\\System\\Service\\JwtCertificateGenerator'] ?? ($this->privates['Shopware\\Core\\Maintenance\\System\\Service\\JwtCertificateGenerator'] = new \Shopware\Core\Maintenance\System\Service\JwtCertificateGenerator())));

        $instance->setName('system:generate-jwt-secret');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemInstallCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemInstallCommand
     */
    protected function getSystemInstallCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemInstallCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/SetupDatabaseAdapter.php';

        $this->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemInstallCommand(\dirname(__DIR__, 4), new \Shopware\Core\Maintenance\System\Service\SetupDatabaseAdapter());

        $instance->setName('system:install');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemSetupCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemSetupCommand
     */
    protected function getSystemSetupCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemSetupCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/JwtCertificateGenerator.php';

        $this->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemSetupCommand(\dirname(__DIR__, 4), ($this->privates['Shopware\\Core\\Maintenance\\System\\Service\\JwtCertificateGenerator'] ?? ($this->privates['Shopware\\Core\\Maintenance\\System\\Service\\JwtCertificateGenerator'] = new \Shopware\Core\Maintenance\System\Service\JwtCertificateGenerator())), ($this->privates['Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand'] ?? $this->getDotenvDumpCommandService()));

        $instance->setName('system:setup');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemUpdateFinishCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemUpdateFinishCommand
     */
    protected function getSystemUpdateFinishCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemUpdateFinishCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemUpdateFinishCommand($this);

        $instance->setName('system:update:finish');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemUpdatePrepareCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemUpdatePrepareCommand
     */
    protected function getSystemUpdatePrepareCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemUpdatePrepareCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemUpdatePrepareCommand($this);

        $instance->setName('system:update:prepare');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\User\Command\UserChangePasswordCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\User\Command\UserChangePasswordCommand
     */
    protected function getUserChangePasswordCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/User/Command/UserChangePasswordCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand'] = $instance = new \Shopware\Core\Maintenance\User\Command\UserChangePasswordCommand(($this->services['user.repository'] ?? $this->getUser_RepositoryService()));

        $instance->setName('user:change-password');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\Maintenance\User\Command\UserCreateCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\User\Command\UserCreateCommand
     */
    protected function getUserCreateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/User/Command/UserCreateCommand.php';

        $this->privates['Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand'] = $instance = new \Shopware\Core\Maintenance\User\Command\UserCreateCommand(($this->services['Shopware\\Core\\Maintenance\\User\\Service\\UserProvisioner'] ?? $this->getUserProvisionerService()));

        $instance->setName('user:create');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\System\Country\CountryTaxFreeDeprecationUpdater' shared service.
     *
     * @return \Shopware\Core\System\Country\CountryTaxFreeDeprecationUpdater
     */
    protected function getCountryTaxFreeDeprecationUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/CountryTaxFreeDeprecationUpdater.php';

        return $this->privates['Shopware\\Core\\System\\Country\\CountryTaxFreeDeprecationUpdater'] = new \Shopware\Core\System\Country\CountryTaxFreeDeprecationUpdater($this->getEnv('bool:default:defaults_bool_true:BLUE_GREEN_DEPLOYMENT'), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\CustomField\CustomFieldService' shared service.
     *
     * @return \Shopware\Core\System\CustomField\CustomFieldService
     */
    protected function getCustomFieldServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/CustomFieldService.php';

        return $this->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] = new \Shopware\Core\System\CustomField\CustomFieldService(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\Language\CachedLanguageLoader' shared service.
     *
     * @return \Shopware\Core\System\Language\CachedLanguageLoader
     */
    protected function getCachedLanguageLoaderService()
    {
        return $this->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] = new \Shopware\Core\System\Language\CachedLanguageLoader(new \Shopware\Core\System\Language\LanguageLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\Language\LanguageValidator' shared service.
     *
     * @return \Shopware\Core\System\Language\LanguageValidator
     */
    protected function getLanguageValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/LanguageValidator.php';

        return $this->privates['Shopware\\Core\\System\\Language\\LanguageValidator'] = new \Shopware\Core\System\Language\LanguageValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\Locale\LanguageLocaleCodeProvider' shared service.
     *
     * @return \Shopware\Core\System\Locale\LanguageLocaleCodeProvider
     */
    protected function getLanguageLocaleCodeProviderService()
    {
        return $this->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] = new \Shopware\Core\System\Locale\LanguageLocaleCodeProvider(($this->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? $this->getCachedLanguageLoaderService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\NumberRange\Command\MigrateIncrementStorageCommand' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Command\MigrateIncrementStorageCommand
     */
    protected function getMigrateIncrementStorageCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Command/MigrateIncrementStorageCommand.php';

        $this->privates['Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand'] = $instance = new \Shopware\Core\System\NumberRange\Command\MigrateIncrementStorageCommand(($this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementStorageRegistry'] ?? $this->getIncrementStorageRegistryService()));

        $instance->setName('number-range:migrate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementSqlStorage' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementSqlStorage
     */
    protected function getIncrementSqlStorageService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/AbstractIncrementStorage.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/IncrementStorageInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/IncrementSqlStorage.php';

        return $this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementSqlStorage'] = new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementSqlStorage(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementStorageRegistry' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementStorageRegistry
     */
    protected function getIncrementStorageRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/IncrementStorageRegistry.php';

        return $this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementStorageRegistry'] = new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementStorageRegistry(new RewindableGenerator(function () {
            yield 'SQL' => ($this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementSqlStorage'] ?? $this->getIncrementSqlStorageService());
        }, 1), 'SQL');
    }

    /*
     * Gets the private 'Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternIncrement' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternIncrement
     */
    protected function getValueGeneratorPatternIncrementService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/AbstractValueGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/ValueGeneratorPatternInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/ValueGeneratorPatternIncrement.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/AbstractIncrementStorage.php';

        return $this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\ValueGeneratorPatternIncrement'] = new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternIncrement(($this->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementStorageRegistry'] ?? $this->getIncrementStorageRegistryService())->getStorage());
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\Api\StoreApiResponseListener' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Api\StoreApiResponseListener
     */
    protected function getStoreApiResponseListenerService()
    {
        return $this->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StoreApiResponseListener'] = new \Shopware\Core\System\SalesChannel\Api\StoreApiResponseListener(($this->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'] ?? $this->getStructEncoderService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\Api\StructEncoder' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Api\StructEncoder
     */
    protected function getStructEncoderService()
    {
        return $this->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'] = new \Shopware\Core\System\SalesChannel\Api\StructEncoder(($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()), ($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\CartRestorer' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\CartRestorer
     */
    protected function getCartRestorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/CartRestorer.php';

        $a = ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }
        $b = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }
        $c = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }
        $d = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? $this->getCartRuleLoaderService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }
        $e = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }

        return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'] = new \Shopware\Core\System\SalesChannel\Context\CartRestorer($a, $b, $c, $d, $e);
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\Cleanup\CleanupSalesChannelContextTaskHandler' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\Cleanup\CleanupSalesChannelContextTaskHandler
     */
    protected function getCleanupSalesChannelContextTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/Cleanup/CleanupSalesChannelContextTaskHandler.php';

        $a = ($this->services['scheduled_task.repository'] ?? $this->getScheduledTask_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'];
        }

        return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'] = new \Shopware\Core\System\SalesChannel\Context\Cleanup\CleanupSalesChannelContextTaskHandler($a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), 120);
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\SalesChannelContextPersister' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\SalesChannelContextPersister
     */
    protected function getSalesChannelContextPersisterService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'];
        }

        return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] = new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextPersister(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, $b, 'P1D');
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\SalesChannelContextRestorer' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\SalesChannelContextRestorer
     */
    protected function getSalesChannelContextRestorerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextRestorer.php';

        $a = ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? $this->getCartRuleLoaderService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $c = ($this->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? $this->getOrderConverterService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $d = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $e = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'] ?? $this->getCartRestorerService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $f = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }

        return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'] = new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextRestorer($a, $b, $c, $d, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $e, $f);
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\SalesChannelContextService' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\SalesChannelContextService
     */
    protected function getSalesChannelContextServiceService()
    {
        $a = ($this->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? $this->getSalesChannelContextFactoryService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }
        $b = ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? $this->getCartRuleLoaderService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }
        $c = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? $this->getSalesChannelContextPersisterService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }
        $d = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }
        $e = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }

        return $this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] = new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextService($a, $b, $c, $d, $e);
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\DataAbstractionLayer\SalesChannelIndexer' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\DataAbstractionLayer\SalesChannelIndexer
     */
    protected function getSalesChannelIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/DataAbstractionLayer/SalesChannelIndexer.php';

        $a = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'])) {
            return $this->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'];
        }

        return $this->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'] = new \Shopware\Core\System\SalesChannel\DataAbstractionLayer\SalesChannelIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $b, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? $this->getManyToManyIdFieldUpdaterService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\StoreApiCustomFieldMapper' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\StoreApiCustomFieldMapper
     */
    protected function getStoreApiCustomFieldMapperService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/StoreApiCustomFieldMapper.php';

        return $this->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] = new \Shopware\Core\System\SalesChannel\StoreApiCustomFieldMapper(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\SalesChannel\Validation\SalesChannelValidator' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Validation\SalesChannelValidator
     */
    protected function getSalesChannelValidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Validation/SalesChannelValidator.php';

        return $this->privates['Shopware\\Core\\System\\SalesChannel\\Validation\\SalesChannelValidator'] = new \Shopware\Core\System\SalesChannel\Validation\SalesChannelValidator(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\Snippet\Command\ValidateSnippetsCommand' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Command\ValidateSnippetsCommand
     */
    protected function getValidateSnippetsCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Command/ValidateSnippetsCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetFileHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetFixer.php';

        $a = new \Shopware\Core\System\Snippet\SnippetFileHandler();

        $this->privates['Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand'] = $instance = new \Shopware\Core\System\Snippet\Command\ValidateSnippetsCommand(new \Shopware\Core\System\Snippet\SnippetValidator(($this->services['Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection'] ?? $this->getSnippetFileCollectionService()), $a, (\dirname(__DIR__, 4).'/')), new \Shopware\Core\System\Snippet\SnippetFixer($a));

        $instance->setName('snippets:validate');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\System\Snippet\SnippetService' shared service.
     *
     * @return \Shopware\Core\System\Snippet\SnippetService
     */
    protected function getSnippetServiceService()
    {
        $a = ($this->services['snippet.repository'] ?? $this->getSnippet_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'])) {
            return $this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'];
        }
        $b = ($this->services['snippet_set.repository'] ?? $this->getSnippetSet_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'])) {
            return $this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'];
        }
        $c = ($this->services['sales_channel_domain.repository'] ?? $this->getSalesChannelDomain_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'])) {
            return $this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'];
        }

        return $this->privates['Shopware\\Core\\System\\Snippet\\SnippetService'] = new \Shopware\Core\System\Snippet\SnippetService(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection'] ?? $this->getSnippetFileCollectionService()), $a, $b, $c, ($this->services['Shopware\\Core\\System\\Snippet\\Filter\\SnippetFilterFactory'] ?? $this->getSnippetFilterFactoryService()), $this, ($this->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'] ?? $this->getSalesChannelThemeLoaderService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\Snippet\Subscriber\CustomFieldSubscriber' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Subscriber\CustomFieldSubscriber
     */
    protected function getCustomFieldSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Subscriber/CustomFieldSubscriber.php';

        return $this->privates['Shopware\\Core\\System\\Snippet\\Subscriber\\CustomFieldSubscriber'] = new \Shopware\Core\System\Snippet\Subscriber\CustomFieldSubscriber(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\StateMachine\Command\WorkflowDumpCommand' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Command\WorkflowDumpCommand
     */
    protected function getWorkflowDumpCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Command/WorkflowDumpCommand.php';

        $this->privates['Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand'] = $instance = new \Shopware\Core\System\StateMachine\Command\WorkflowDumpCommand(($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? $this->getStateMachineRegistryService()));

        $instance->setName('state-machine:dump');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\System\StateMachine\Loader\InitialStateIdLoader' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Loader\InitialStateIdLoader
     */
    protected function getInitialStateIdLoaderService()
    {
        return $this->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] = new \Shopware\Core\System\StateMachine\Loader\InitialStateIdLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\StateMachine\StateMachineRegistry' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineRegistry
     */
    protected function getStateMachineRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineRegistry.php';

        $a = ($this->services['state_machine.repository'] ?? $this->getStateMachine_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
            return $this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'];
        }
        $b = ($this->services['state_machine_state.repository'] ?? $this->getStateMachineState_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
            return $this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'];
        }
        $c = ($this->services['state_machine_history.repository'] ?? $this->getStateMachineHistory_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
            return $this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'];
        }
        $d = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
            return $this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'];
        }

        return $this->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] = new \Shopware\Core\System\StateMachine\StateMachineRegistry($a, $b, $c, $d, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? $this->getDefinitionInstanceRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Core\System\SystemConfig\Command\ConfigGet' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Command\ConfigGet
     */
    protected function getConfigGetService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Command/ConfigGet.php';

        $this->privates['Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet'] = $instance = new \Shopware\Core\System\SystemConfig\Command\ConfigGet(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));

        $instance->setName('system:config:get');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\System\SystemConfig\Command\ConfigSet' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Command\ConfigSet
     */
    protected function getConfigSetService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Command/ConfigSet.php';

        $this->privates['Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet'] = $instance = new \Shopware\Core\System\SystemConfig\Command\ConfigSet(($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));

        $instance->setName('system:config:set');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Core\System\SystemConfig\Service\ConfigurationService' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Service\ConfigurationService
     */
    protected function getConfigurationServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Service/ConfigurationService.php';

        $a = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'])) {
            return $this->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'])) {
            return $this->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'];
        }

        return $this->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'] = new \Shopware\Core\System\SystemConfig\Service\ConfigurationService(($this->privates['kernel.bundles'] ?? $this->getKernel_BundlesService()), ($this->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] ?? ($this->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] = new \Shopware\Core\System\SystemConfig\Util\ConfigReader())), ($this->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? $this->getAppLoaderService()), $a, $b);
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\AdminSearchRegistry' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\AdminSearchRegistry
     */
    protected function getAdminSearchRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminSearchRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        $a = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] = new \Shopware\Elasticsearch\Admin\AdminSearchRegistry(new RewindableGenerator(function () {
            yield 'cms_page' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CmsPageAdminSearchIndexer'] ?? $this->getCmsPageAdminSearchIndexerService());
            yield 'customer' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerAdminSearchIndexer'] ?? $this->getCustomerAdminSearchIndexerService());
            yield 'customer_group' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerGroupAdminSearchIndexer'] ?? $this->getCustomerGroupAdminSearchIndexerService());
            yield 'landing_page' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\LandingPageAdminSearchIndexer'] ?? $this->getLandingPageAdminSearchIndexerService());
            yield 'product_manufacturer' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ManufacturerAdminSearchIndexer'] ?? $this->getManufacturerAdminSearchIndexerService());
            yield 'media' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\MediaAdminSearchIndexer'] ?? $this->getMediaAdminSearchIndexerService());
            yield 'order' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\OrderAdminSearchIndexer'] ?? $this->getOrderAdminSearchIndexerService());
            yield 'payment_method' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PaymentMethodAdminSearchIndexer'] ?? $this->getPaymentMethodAdminSearchIndexerService());
            yield 'product' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductAdminSearchIndexer'] ?? $this->getProductAdminSearchIndexerService());
            yield 'promotion' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PromotionAdminSearchIndexer'] ?? $this->getPromotionAdminSearchIndexerService());
            yield 'property_group' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PropertyGroupAdminSearchIndexer'] ?? $this->getPropertyGroupAdminSearchIndexerService());
            yield 'sales_channel' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\SalesChannelAdminSearchIndexer'] ?? $this->getSalesChannelAdminSearchIndexerService());
            yield 'shipping_method' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ShippingMethodAdminSearchIndexer'] ?? $this->getShippingMethodAdminSearchIndexerService());
            yield 'category' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CategoryAdminSearchIndexer'] ?? $this->getCategoryAdminSearchIndexerService());
            yield 'newsletter_recipient' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\NewsletterRecipientAdminSearchIndexer'] ?? $this->getNewsletterRecipientAdminSearchIndexerService());
            yield 'product_stream' => ($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductStreamAdminSearchIndexer'] ?? $this->getProductStreamAdminSearchIndexerService());
        }, 16), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, $b, ($this->services['admin.openSearch.client'] ?? $this->getAdmin_OpenSearch_ClientService()), ($this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] ?? ($this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] = new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($this->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $this->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $this->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX')))), $this->parameters['elasticsearch.administration.index.config'], $this->parameters['elasticsearch.administration.index.mapping']);
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\AdminSearcher' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\AdminSearcher
     */
    protected function getAdminSearcherService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminSearcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        return $this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearcher'] = new \Shopware\Elasticsearch\Admin\AdminSearcher(($this->services['admin.openSearch.client'] ?? $this->getAdmin_OpenSearch_ClientService()), ($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? $this->getAdminSearchRegistryService()), ($this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] ?? ($this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] = new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($this->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $this->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $this->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX')))));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\CategoryAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\CategoryAdminSearchIndexer
     */
    protected function getCategoryAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/CategoryAdminSearchIndexer.php';

        $a = ($this->services['category.repository'] ?? $this->getCategory_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CategoryAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CategoryAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CategoryAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\CategoryAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\CmsPageAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\CmsPageAdminSearchIndexer
     */
    protected function getCmsPageAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/CmsPageAdminSearchIndexer.php';

        $a = ($this->services['cms_page.repository'] ?? $this->getCmsPage_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CmsPageAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CmsPageAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CmsPageAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\CmsPageAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\CustomerAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\CustomerAdminSearchIndexer
     */
    protected function getCustomerAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/CustomerAdminSearchIndexer.php';

        $a = ($this->services['customer.repository'] ?? $this->getCustomer_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\CustomerAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\CustomerGroupAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\CustomerGroupAdminSearchIndexer
     */
    protected function getCustomerGroupAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/CustomerGroupAdminSearchIndexer.php';

        $a = ($this->services['customer_group.repository'] ?? $this->getCustomerGroup_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerGroupAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerGroupAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerGroupAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\CustomerGroupAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\LandingPageAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\LandingPageAdminSearchIndexer
     */
    protected function getLandingPageAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/LandingPageAdminSearchIndexer.php';

        $a = ($this->services['landing_page.repository'] ?? $this->getLandingPage_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\LandingPageAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\LandingPageAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\LandingPageAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\LandingPageAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\ManufacturerAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\ManufacturerAdminSearchIndexer
     */
    protected function getManufacturerAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/ManufacturerAdminSearchIndexer.php';

        $a = ($this->services['product_manufacturer.repository'] ?? $this->getProductManufacturer_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ManufacturerAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ManufacturerAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ManufacturerAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\ManufacturerAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\MediaAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\MediaAdminSearchIndexer
     */
    protected function getMediaAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/MediaAdminSearchIndexer.php';

        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\MediaAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\MediaAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\MediaAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\MediaAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\NewsletterRecipientAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\NewsletterRecipientAdminSearchIndexer
     */
    protected function getNewsletterRecipientAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/NewsletterRecipientAdminSearchIndexer.php';

        $a = ($this->services['newsletter_recipient.repository'] ?? $this->getNewsletterRecipient_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\NewsletterRecipientAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\NewsletterRecipientAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\NewsletterRecipientAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\NewsletterRecipientAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\OrderAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\OrderAdminSearchIndexer
     */
    protected function getOrderAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/OrderAdminSearchIndexer.php';

        $a = ($this->services['order.repository'] ?? $this->getOrder_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\OrderAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\OrderAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\OrderAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\OrderAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\PaymentMethodAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\PaymentMethodAdminSearchIndexer
     */
    protected function getPaymentMethodAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/PaymentMethodAdminSearchIndexer.php';

        $a = ($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PaymentMethodAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PaymentMethodAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PaymentMethodAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\PaymentMethodAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\ProductAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\ProductAdminSearchIndexer
     */
    protected function getProductAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/ProductAdminSearchIndexer.php';

        $a = ($this->services['product.repository'] ?? $this->getProduct_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\ProductAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\ProductStreamAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\ProductStreamAdminSearchIndexer
     */
    protected function getProductStreamAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/ProductStreamAdminSearchIndexer.php';

        $a = ($this->services['product_stream.repository'] ?? $this->getProductStream_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductStreamAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductStreamAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductStreamAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\ProductStreamAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\PromotionAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\PromotionAdminSearchIndexer
     */
    protected function getPromotionAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/PromotionAdminSearchIndexer.php';

        $a = ($this->services['promotion.repository'] ?? $this->getPromotion_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PromotionAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PromotionAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PromotionAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\PromotionAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\PropertyGroupAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\PropertyGroupAdminSearchIndexer
     */
    protected function getPropertyGroupAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/PropertyGroupAdminSearchIndexer.php';

        $a = ($this->services['property_group.repository'] ?? $this->getPropertyGroup_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PropertyGroupAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PropertyGroupAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PropertyGroupAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\PropertyGroupAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\SalesChannelAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\SalesChannelAdminSearchIndexer
     */
    protected function getSalesChannelAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/SalesChannelAdminSearchIndexer.php';

        $a = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\SalesChannelAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\SalesChannelAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\SalesChannelAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\SalesChannelAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\ShippingMethodAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\ShippingMethodAdminSearchIndexer
     */
    protected function getShippingMethodAdminSearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/ShippingMethodAdminSearchIndexer.php';

        $a = ($this->services['shipping_method.repository'] ?? $this->getShippingMethod_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ShippingMethodAdminSearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ShippingMethodAdminSearchIndexer'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ShippingMethodAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\ShippingMethodAdminSearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Admin\Subscriber\RefreshIndexSubscriber' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Subscriber\RefreshIndexSubscriber
     */
    protected function getRefreshIndexSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Subscriber/RefreshIndexSubscriber.php';

        $a = ($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? $this->getAdminSearchRegistryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber'])) {
            return $this->privates['Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber'] = new \Shopware\Elasticsearch\Admin\Subscriber\RefreshIndexSubscriber($a);
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand
     */
    protected function getElasticsearchAdminIndexingCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchAdminIndexingCommand.php';

        $a = ($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? $this->getAdminSearchRegistryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'];
        }

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand($a);

        $instance->setName('es:admin:index');
        $instance->setDescription('Index the elasticsearch for the admin search');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand
     */
    protected function getElasticsearchAdminResetCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchAdminResetCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand(($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['shopware.increment.gateway.registry'] ?? $this->getShopware_Increment_Gateway_RegistryService()), ($this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] ?? ($this->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] = new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($this->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $this->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $this->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX')))));

        $instance->setName('es:admin:reset');
        $instance->setDescription('Reset Admin Elasticsearch indexing');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand
     */
    protected function getElasticsearchAdminTestCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchAdminTestCommand.php';

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand(($this->privates['Shopware\\Elasticsearch\\Admin\\AdminSearcher'] ?? $this->getAdminSearcherService()));

        $instance->setName('es:admin:test');
        $instance->setDescription('Allows you to test the admin search index');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchCleanIndicesCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchCleanIndicesCommand
     */
    protected function getElasticsearchCleanIndicesCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchCleanIndicesCommand.php';

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchCleanIndicesCommand(($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), ($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'] ?? $this->getElasticsearchOutdatedIndexDetectorService()));

        $instance->setName('es:index:cleanup');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchCreateAliasCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchCreateAliasCommand
     */
    protected function getElasticsearchCreateAliasCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchCreateAliasCommand.php';

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchCreateAliasCommand(($this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] ?? $this->getCreateAliasTaskHandlerService()));

        $instance->setName('es:create:alias');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchIndexingCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchIndexingCommand
     */
    protected function getElasticsearchIndexingCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchIndexingCommand.php';

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchIndexingCommand(($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? $this->getElasticsearchIndexerService()), ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService()), ($this->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] ?? $this->getCreateAliasTaskHandlerService()));

        $instance->setName('es:index');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchResetCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchResetCommand
     */
    protected function getElasticsearchResetCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchResetCommand.php';

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchResetCommand(($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), ($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'] ?? $this->getElasticsearchOutdatedIndexDetectorService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['shopware.increment.gateway.registry'] ?? $this->getShopware_Increment_Gateway_RegistryService()));

        $instance->setName('es:reset');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchStatusCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchStatusCommand
     */
    protected function getElasticsearchStatusCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchStatusCommand.php';

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchStatusCommand(($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));

        $instance->setName('es:status');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchTestAnalyzerCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchTestAnalyzerCommand
     */
    protected function getElasticsearchTestAnalyzerCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchTestAnalyzerCommand.php';

        $this->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchTestAnalyzerCommand(($this->services['Elasticsearch\\Client'] ?? $this->getClientService()));

        $instance->setName('es:test:analyzer');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\DataAbstractionLayer\CriteriaParser' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\DataAbstractionLayer\CriteriaParser
     */
    protected function getCriteriaParserService()
    {
        return $this->privates['Shopware\\Elasticsearch\\Framework\\DataAbstractionLayer\\CriteriaParser'] = new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\CriteriaParser(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\ElasticsearchOutdatedIndexDetector' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\ElasticsearchOutdatedIndexDetector
     */
    protected function getElasticsearchOutdatedIndexDetectorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchOutdatedIndexDetector.php';

        $a = ($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] ?? $this->getElasticsearchRegistryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'];
        }
        $b = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'];
        }
        $c = ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'] = new \Shopware\Elasticsearch\Framework\ElasticsearchOutdatedIndexDetector(($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), $a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\ElasticsearchRegistry' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\ElasticsearchRegistry
     */
    protected function getElasticsearchRegistryService()
    {
        return $this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] = new \Shopware\Elasticsearch\Framework\ElasticsearchRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'] ?? $this->getElasticsearchProductDefinitionService());
        }, 1));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Framework\Indexing\ElasticsearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Indexing\ElasticsearchIndexer
     */
    protected function getElasticsearchIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/ElasticsearchIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/IndexCreator.php';

        $a = ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $b = ($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] ?? $this->getElasticsearchRegistryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $d = ($this->services['currency.repository'] ?? $this->getCurrency_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $e = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $f = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $g = ($this->services['Elasticsearch\\Client'] ?? $this->getClientService());

        return $this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] = new \Shopware\Elasticsearch\Framework\Indexing\ElasticsearchIndexer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, $b, new \Shopware\Elasticsearch\Framework\Indexing\IndexCreator($g, $this->parameters['elasticsearch.index.config'], $this->parameters['elasticsearch.index.mapping'], $c), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $g, ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), $d, $e, $c, $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'), $f);
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Product\CustomFieldUpdater' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\CustomFieldUpdater
     */
    protected function getCustomFieldUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/CustomFieldUpdater.php';

        $a = ($this->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'] ?? $this->getElasticsearchOutdatedIndexDetectorService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'])) {
            return $this->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'];
        }
        $b = ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'])) {
            return $this->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'] = new \Shopware\Elasticsearch\Product\CustomFieldUpdater($a, ($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), $b);
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Product\ElasticsearchProductDefinition' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\ElasticsearchProductDefinition
     */
    protected function getElasticsearchProductDefinitionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/AbstractElasticsearchDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/ElasticsearchProductDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/EntityMapper.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/AbstractProductSearchQueryBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/ProductSearchQueryBuilder.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'])) {
            return $this->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'];
        }
        $b = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        return $this->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'] = new \Shopware\Elasticsearch\Product\ElasticsearchProductDefinition(($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()), new \Shopware\Elasticsearch\Framework\Indexing\EntityMapper(), $b, [], $a, new \Shopware\Elasticsearch\Product\ProductSearchQueryBuilder($b, ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Tokenizer($this->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH')))), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] ?? $this->getTokenFilterService())));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Product\LanguageSubscriber' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\LanguageSubscriber
     */
    protected function getLanguageSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/LanguageSubscriber.php';

        $a = ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'])) {
            return $this->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'];
        }
        $b = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'])) {
            return $this->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'] = new \Shopware\Elasticsearch\Product\LanguageSubscriber($a, ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()), ($this->services['Elasticsearch\\Client'] ?? $this->getClientService()), $b);
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Product\ProductSearchBuilder' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\ProductSearchBuilder
     */
    protected function getProductSearchBuilderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/ProductSearchBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchTermInterpreterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchTermInterpreter.php';

        return $this->privates['Shopware\\Elasticsearch\\Product\\ProductSearchBuilder'] = new \Shopware\Elasticsearch\Product\ProductSearchBuilder(new \Shopware\Core\Content\Product\SearchKeyword\ProductSearchBuilder(new \Shopware\Core\Content\Product\SearchKeyword\ProductSearchTermInterpreter(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Tokenizer($this->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH')))), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] ?? $this->getTokenFilterService()))), ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService()), ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Product\ProductUpdater' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\ProductUpdater
     */
    protected function getProductUpdaterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/ProductUpdater.php';

        return $this->privates['Shopware\\Elasticsearch\\Product\\ProductUpdater'] = new \Shopware\Elasticsearch\Product\ProductUpdater(($this->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? $this->getElasticsearchIndexerService()), ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Elasticsearch\Product\SearchKeywordReplacement' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\SearchKeywordReplacement
     */
    protected function getSearchKeywordReplacementService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/SearchKeywordUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/SearchKeywordReplacement.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchKeywordAnalyzerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchKeywordAnalyzer.php';

        $a = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) {
            return $this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'];
        }
        $b = ($this->services['product.repository'] ?? $this->getProduct_RepositoryService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) {
            return $this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'];
        }
        $c = ($this->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? $this->getElasticsearchHelperService());

        if (isset($this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) {
            return $this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'];
        }

        return $this->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'] = new \Shopware\Elasticsearch\Product\SearchKeywordReplacement(new \Shopware\Core\Content\Product\DataAbstractionLayer\SearchKeywordUpdater(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $a, $b, new \Shopware\Core\Content\Product\SearchKeyword\ProductSearchKeywordAnalyzer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] ?? ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Tokenizer($this->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH')))), ($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] ?? $this->getTokenFilterService()))), $c);
    }

    /*
     * Gets the private 'Shopware\Storefront\Checkout\Cart\SalesChannel\StorefrontCartFacade' shared autowired service.
     *
     * @return \Shopware\Storefront\Checkout\Cart\SalesChannel\StorefrontCartFacade
     */
    protected function getStorefrontCartFacadeService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Checkout/Cart/SalesChannel/StorefrontCartFacade.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Checkout/Shipping/BlockedShippingMethodSwitcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Checkout/Payment/BlockedPaymentMethodSwitcher.php';

        return $this->privates['Shopware\\Storefront\\Checkout\\Cart\\SalesChannel\\StorefrontCartFacade'] = new \Shopware\Storefront\Checkout\Cart\SalesChannel\StorefrontCartFacade(($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService()), new \Shopware\Storefront\Checkout\Shipping\BlockedShippingMethodSwitcher(($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'] ?? $this->getSortedShippingMethodRouteService())), new \Shopware\Storefront\Checkout\Payment\BlockedPaymentMethodSwitcher(($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? $this->getSortedPaymentMethodRouteService())), ($this->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute'] ?? $this->getContextSwitchRouteService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? $this->getCartCalculatorService()), ($this->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? $this->getCartPersisterService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Event\CartMergedSubscriber' shared autowired service.
     *
     * @return \Shopware\Storefront\Event\CartMergedSubscriber
     */
    protected function getCartMergedSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Event/CartMergedSubscriber.php';

        $a = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['Shopware\\Storefront\\Event\\CartMergedSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Event\\CartMergedSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Event\\CartMergedSubscriber'] = new \Shopware\Storefront\Event\CartMergedSubscriber($a, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheResponseSubscriber' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheResponseSubscriber
     */
    protected function getCacheResponseSubscriberService()
    {
        $a = ($this->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? $this->getCartServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] = new \Shopware\Storefront\Framework\Cache\CacheResponseSubscriber($a, $this->getEnv('default:shopware_http_cache_default_ttl_default:SHOPWARE_HTTP_DEFAULT_TTL'), $this->getEnv('default:shopware_http_cache_enabled_default:SHOPWARE_HTTP_CACHE_ENABLED'), ($this->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] ?? $this->getMaintenanceModeResolverService()), false, NULL, NULL);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheTracer' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheTracer
     */
    protected function getCacheTracerService()
    {
        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'];
        }
        $b = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'];
        }
        $c = ($this->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'] ?? $this->getThemeConfigValueAccessorService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] = new \Shopware\Storefront\Framework\Cache\CacheTracer(new \Shopware\Core\Framework\Adapter\Cache\CacheTracer($a, $b, ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] ?? ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] = new \Shopware\Core\Framework\Adapter\Cache\CacheTagCollection()))), $c);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmer' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmer
     */
    protected function getCacheWarmer2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheRouteWarmerRegistry.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmer'] = new \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmer(($this->services['sales_channel_domain.repository'] ?? $this->getSalesChannelDomain_RepositoryService()), ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService()), new \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheRouteWarmerRegistry(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\Product\\ProductRouteWarmer'] ?? $this->getProductRouteWarmerService());
            yield 1 => ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\Navigation\\NavigationRouteWarmer'] ?? $this->getNavigationRouteWarmerService());
        }, 2)), ($this->services['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheIdLoader'] ?? $this->getCacheIdLoaderService()), ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler'] ?? $this->getCacheWarmerTaskHandlerService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmerTaskHandler' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmerTaskHandler
     */
    protected function getCacheWarmerTaskHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheWarmerTaskHandler.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler'] = new \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmerTaskHandler(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->services['router'] ?? $this->getRouterService()), ($this->services['Shopware\\Core\\Framework\\Routing\\RequestTransformerInterface'] ?? $this->getRequestTransformerInterfaceService()), ($this->services['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheIdLoader'] ?? $this->getCacheIdLoaderService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] ?? ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] = new \Shopware\Core\Framework\Adapter\Cache\CacheTagCollection())));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheWarmer\Navigation\NavigationRouteWarmer' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheWarmer\Navigation\NavigationRouteWarmer
     */
    protected function getNavigationRouteWarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheRouteWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/Navigation/NavigationRouteWarmer.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\Navigation\\NavigationRouteWarmer'] = new \Shopware\Storefront\Framework\Cache\CacheWarmer\Navigation\NavigationRouteWarmer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), ($this->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? $this->getCategoryDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheWarmer\Product\ProductRouteWarmer' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheWarmer\Product\ProductRouteWarmer
     */
    protected function getProductRouteWarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheRouteWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/Product/ProductRouteWarmer.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\Product\\ProductRouteWarmer'] = new \Shopware\Storefront\Framework\Cache\CacheWarmer\Product\ProductRouteWarmer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), ($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Captcha\BasicCaptcha' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\BasicCaptcha
     */
    protected function getBasicCaptchaService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/AbstractCaptcha.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/BasicCaptcha.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'] = new \Shopware\Storefront\Framework\Captcha\BasicCaptcha(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Captcha\CaptchaRouteListener' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\CaptchaRouteListener
     */
    protected function getCaptchaRouteListenerService()
    {
        $a = ($this->services['Shopware\\Storefront\\Controller\\ErrorController'] ?? $this->getErrorControllerService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'] = new \Shopware\Storefront\Framework\Captcha\CaptchaRouteListener(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'] ?? $this->getHoneypotCaptchaService());
            yield 1 => ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'] ?? $this->getBasicCaptchaService());
            yield 2 => ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV2'] ?? $this->getGoogleReCaptchaV2Service());
            yield 3 => ($this->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV3'] ?? $this->getGoogleReCaptchaV3Service());
        }, 4), $a, $b);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV2' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV2
     */
    protected function getGoogleReCaptchaV2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/AbstractCaptcha.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/GoogleReCaptchaV2.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV2'] = new \Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV2(($this->privates['shopware.captcha.client'] ?? ($this->privates['shopware.captcha.client'] = new \GuzzleHttp\Client())));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV3' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV3
     */
    protected function getGoogleReCaptchaV3Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/AbstractCaptcha.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/GoogleReCaptchaV3.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV3'] = new \Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV3(($this->privates['shopware.captcha.client'] ?? ($this->privates['shopware.captcha.client'] = new \GuzzleHttp\Client())));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Captcha\HoneypotCaptcha' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\HoneypotCaptcha
     */
    protected function getHoneypotCaptchaService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/AbstractCaptcha.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/HoneypotCaptcha.php';

        $a = ($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'] = new \Shopware\Storefront\Framework\Captcha\HoneypotCaptcha($a);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Command\HttpCacheWarmUpCommand' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Command\HttpCacheWarmUpCommand
     */
    protected function getHttpCacheWarmUpCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Command/HttpCacheWarmUpCommand.php';

        $this->privates['Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand'] = $instance = new \Shopware\Storefront\Framework\Command\HttpCacheWarmUpCommand(($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmer'] ?? $this->getCacheWarmer2Service()), ($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));

        $instance->setName('http:cache:warm:up');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Command\SalesChannelCreateStorefrontCommand' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Command\SalesChannelCreateStorefrontCommand
     */
    protected function getSalesChannelCreateStorefrontCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelCreateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Command/SalesChannelCreateStorefrontCommand.php';

        $this->privates['Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand'] = $instance = new \Shopware\Storefront\Framework\Command\SalesChannelCreateStorefrontCommand(($this->services['payment_method.repository'] ?? $this->getPaymentMethod_RepositoryService()), ($this->services['shipping_method.repository'] ?? $this->getShippingMethod_RepositoryService()), ($this->services['country.repository'] ?? $this->getCountry_RepositoryService()), ($this->services['snippet_set.repository'] ?? $this->getSnippetSet_RepositoryService()), ($this->services['category.repository'] ?? $this->getCategory_RepositoryService()), ($this->services['Shopware\\Core\\Maintenance\\SalesChannel\\Service\\SalesChannelCreator'] ?? $this->getSalesChannelCreatorService()));

        $instance->setName('sales-channel:create:storefront');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Csrf\CsrfRouteListener' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Csrf\CsrfRouteListener
     */
    protected function getCsrfRouteListenerService()
    {
        $a = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Csrf\\CsrfRouteListener'] = new \Shopware\Storefront\Framework\Csrf\CsrfRouteListener(($this->services['.container.private.security.csrf.token_manager'] ?? $this->get_Container_Private_Security_Csrf_TokenManagerService()), true, 'twig', $a);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Routing\CachedDomainLoaderInvalidator' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\CachedDomainLoaderInvalidator
     */
    protected function getCachedDomainLoaderInvalidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/CachedDomainLoaderInvalidator.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator'] = new \Shopware\Storefront\Framework\Routing\CachedDomainLoaderInvalidator($a);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Routing\MaintenanceModeResolver' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\MaintenanceModeResolver
     */
    protected function getMaintenanceModeResolverService()
    {
        return $this->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] = new \Shopware\Storefront\Framework\Routing\MaintenanceModeResolver(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Routing\NotFound\NotFoundSubscriber' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\NotFound\NotFoundSubscriber
     */
    protected function getNotFoundSubscriberService()
    {
        $a = ($this->services['Shopware\\Storefront\\Controller\\ErrorController'] ?? $this->getErrorControllerService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }
        $b = ($this->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? $this->getSalesChannelContextServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }
        $c = ($this->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? $this->getCacheTracerService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }
        $d = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }
        $e = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'] = new \Shopware\Storefront\Framework\Routing\NotFound\NotFoundSubscriber($a, ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $b, false, ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), $c, ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ?? ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator())), $d, $e);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Routing\StorefrontSubscriber' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\StorefrontSubscriber
     */
    protected function getStorefrontSubscriberService()
    {
        $a = ($this->services['sales_channel_domain.repository'] ?? $this->getSalesChannelDomain_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'];
        }
        $b = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'];
        }
        $c = ($this->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'] ?? $this->getNotFoundSubscriberService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] = new \Shopware\Storefront\Framework\Routing\StorefrontSubscriber(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->services['router'] ?? $this->getRouterService()), ($this->services['Shopware\\Storefront\\Framework\\Csrf\\CsrfPlaceholderHandler'] ?? $this->getCsrfPlaceholderHandlerService()), new \Shopware\Core\Content\Seo\HreflangLoader(($this->privates['router.default'] ?? $this->getRouter_DefaultService()), $a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), ($this->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] ?? $this->getMaintenanceModeResolverService()), ($this->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? $this->getShopIdProviderService()), ($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? $this->getActiveAppsLoaderService()), $b, ($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), $c);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Seo\SeoUrlRoute\LandingPageSeoUrlRoute' shared service.
     *
     * @return \Shopware\Storefront\Framework\Seo\SeoUrlRoute\LandingPageSeoUrlRoute
     */
    protected function getLandingPageSeoUrlRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlRoute/SeoUrlRouteInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Seo/SeoUrlRoute/LandingPageSeoUrlRoute.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\LandingPageSeoUrlRoute'] = new \Shopware\Storefront\Framework\Seo\SeoUrlRoute\LandingPageSeoUrlRoute(($this->services['Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition'] ?? $this->getLandingPageDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Seo\SeoUrlRoute\NavigationPageSeoUrlRoute' shared service.
     *
     * @return \Shopware\Storefront\Framework\Seo\SeoUrlRoute\NavigationPageSeoUrlRoute
     */
    protected function getNavigationPageSeoUrlRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlRoute/SeoUrlRouteInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Seo/SeoUrlRoute/NavigationPageSeoUrlRoute.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\NavigationPageSeoUrlRoute'] = new \Shopware\Storefront\Framework\Seo\SeoUrlRoute\NavigationPageSeoUrlRoute(($this->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? $this->getCategoryDefinitionService()), ($this->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'] ?? $this->getCategoryBreadcrumbBuilderService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Seo\SeoUrlRoute\ProductPageSeoUrlRoute' shared service.
     *
     * @return \Shopware\Storefront\Framework\Seo\SeoUrlRoute\ProductPageSeoUrlRoute
     */
    protected function getProductPageSeoUrlRouteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlRoute/SeoUrlRouteInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Seo/SeoUrlRoute/ProductPageSeoUrlRoute.php';

        return $this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\ProductPageSeoUrlRoute'] = new \Shopware\Storefront\Framework\Seo\SeoUrlRoute\ProductPageSeoUrlRoute(($this->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? $this->getProductDefinitionService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Seo\SeoUrlRoute\SeoUrlUpdateListener' shared service.
     *
     * @return \Shopware\Storefront\Framework\Seo\SeoUrlRoute\SeoUrlUpdateListener
     */
    protected function getSeoUrlUpdateListenerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Seo/SeoUrlRoute/SeoUrlUpdateListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlUpdater.php';

        $a = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'];
        }
        $b = ($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'] ?? $this->getSeoUrlPersisterService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'];
        }
        $c = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'];
        }
        $d = ($this->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? $this->getEntityIndexerRegistryService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'];
        }
        $e = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        return $this->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] = new \Shopware\Storefront\Framework\Seo\SeoUrlRoute\SeoUrlUpdateListener(new \Shopware\Core\Content\Seo\SeoUrlUpdater($a, ($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteRegistry'] ?? $this->getSeoUrlRouteRegistryService()), ($this->privates['Shopware\\Core\\Content\\Seo\\SeoUrlGenerator'] ?? $this->getSeoUrlGeneratorService()), $b, $e, $c), $e, $d);
    }

    /*
     * Gets the private 'Shopware\Storefront\Framework\Twig\TwigDateRequestListener' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Twig\TwigDateRequestListener
     */
    protected function getTwigDateRequestListenerService()
    {
        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->privates['Shopware\\Storefront\\Framework\\Twig\\TwigDateRequestListener'])) {
            return $this->privates['Shopware\\Storefront\\Framework\\Twig\\TwigDateRequestListener'];
        }

        return $this->privates['Shopware\\Storefront\\Framework\\Twig\\TwigDateRequestListener'] = new \Shopware\Storefront\Framework\Twig\TwigDateRequestListener($a);
    }

    /*
     * Gets the private 'Shopware\Storefront\Page\Account\Login\AccountLoginPageLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Account\Login\AccountLoginPageLoader
     */
    protected function getAccountLoginPageLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Login/AccountLoginPageLoader.php';

        return $this->privates['Shopware\\Storefront\\Page\\Account\\Login\\AccountLoginPageLoader'] = new \Shopware\Storefront\Page\Account\Login\AccountLoginPageLoader(($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? $this->getGenericPageLoaderService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? $this->getCachedCountryRouteService()), ($this->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? $this->getCachedSalutationRouteService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Page\Cms\DefaultMediaResolver' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Cms\DefaultMediaResolver
     */
    protected function getDefaultMediaResolverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/AbstractDefaultMediaResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Cms/DefaultMediaResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/DefaultMediaResolver.php';

        $a = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'])) {
            return $this->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'];
        }

        return $this->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'] = new \Shopware\Storefront\Page\Cms\DefaultMediaResolver(new \Shopware\Core\Content\Media\Cms\DefaultMediaResolver(($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService())), $a, ($this->privates['assets.packages'] ?? $this->getAssets_PackagesService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Page\GenericPageLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\GenericPageLoader
     */
    protected function getGenericPageLoaderService()
    {
        $a = ($this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'] ?? $this->getHeaderPageletLoaderService());

        if (isset($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'] ?? $this->getFooterPageletLoaderService());

        if (isset($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $c = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $d = ($this->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? $this->getSortedPaymentMethodRouteService());

        if (isset($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $e = ($this->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'] ?? $this->getSortedShippingMethodRouteService());

        if (isset($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $f = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }

        return $this->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] = new \Shopware\Storefront\Page\GenericPageLoader($a, $b, $c, $d, $e, $f);
    }

    /*
     * Gets the private 'Shopware\Storefront\Page\Product\Configurator\ProductPageConfiguratorLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Product\Configurator\ProductPageConfiguratorLoader
     */
    protected function getProductPageConfiguratorLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/ProductConfiguratorLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/Configurator/ProductPageConfiguratorLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/AvailableCombinationLoader.php';

        $a = ($this->services['product_configurator_setting.repository'] ?? $this->getProductConfiguratorSetting_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'])) {
            return $this->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'];
        }

        return $this->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'] = new \Shopware\Storefront\Page\Product\Configurator\ProductPageConfiguratorLoader(new \Shopware\Core\Content\Product\SalesChannel\Detail\ProductConfiguratorLoader($a, new \Shopware\Core\Content\Product\SalesChannel\Detail\AvailableCombinationLoader(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()))));
    }

    /*
     * Gets the private 'Shopware\Storefront\Pagelet\Footer\FooterPageletLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Pagelet\Footer\FooterPageletLoader
     */
    protected function getFooterPageletLoaderService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'])) {
            return $this->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'];
        }
        $b = ($this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] ?? $this->getNavigationLoaderService());

        if (isset($this->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'])) {
            return $this->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'];
        }

        return $this->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'] = new \Shopware\Storefront\Pagelet\Footer\FooterPageletLoader($a, $b);
    }

    /*
     * Gets the private 'Shopware\Storefront\Pagelet\Header\HeaderPageletLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Pagelet\Header\HeaderPageletLoader
     */
    protected function getHeaderPageletLoaderService()
    {
        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'])) {
            return $this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'];
        }
        $b = ($this->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'] ?? $this->getCachedCurrencyRouteService());

        if (isset($this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'])) {
            return $this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'];
        }
        $c = ($this->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'] ?? $this->getCachedLanguageRouteService());

        if (isset($this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'])) {
            return $this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'];
        }
        $d = ($this->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] ?? $this->getNavigationLoaderService());

        if (isset($this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'])) {
            return $this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'];
        }

        return $this->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'] = new \Shopware\Storefront\Pagelet\Header\HeaderPageletLoader($a, $b, $c, $d);
    }

    /*
     * Gets the private 'Shopware\Storefront\Pagelet\Newsletter\Account\NewsletterAccountPageletLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Pagelet\Newsletter\Account\NewsletterAccountPageletLoader
     */
    protected function getNewsletterAccountPageletLoaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Newsletter/Account/NewsletterAccountPageletLoader.php';

        return $this->privates['Shopware\\Storefront\\Pagelet\\Newsletter\\Account\\NewsletterAccountPageletLoader'] = new \Shopware\Storefront\Pagelet\Newsletter\Account\NewsletterAccountPageletLoader(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute'] ?? $this->getNewsletterSubscribeRouteService()), ($this->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute'] ?? $this->getNewsletterUnsubscribeRouteService()), ($this->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountNewsletterRecipientRoute'] ?? $this->getAccountNewsletterRecipientRouteService()), ($this->services['translator'] ?? $this->getTranslatorService()), ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\CachedResolvedConfigLoaderInvalidator' shared service.
     *
     * @return \Shopware\Storefront\Theme\CachedResolvedConfigLoaderInvalidator
     */
    protected function getCachedResolvedConfigLoaderInvalidatorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/CachedResolvedConfigLoaderInvalidator.php';

        $a = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'] = new \Shopware\Storefront\Theme\CachedResolvedConfigLoaderInvalidator($a);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeChangeCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeChangeCommand
     */
    protected function getThemeChangeCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeChangeCommand.php';

        $this->privates['Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeChangeCommand(($this->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? $this->getThemeServiceService()), ($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService()), ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService()), ($this->services['theme_sales_channel.repository'] ?? $this->getThemeSalesChannel_RepositoryService()), ($this->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaThumbnailRepositoryDecorator'] ?? $this->getMediaThumbnailRepositoryDecoratorService()));

        $instance->setName('theme:change');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeCompileCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeCompileCommand
     */
    protected function getThemeCompileCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeCompileCommand.php';

        $this->privates['Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeCompileCommand(($this->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? $this->getThemeServiceService()), ($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'] ?? $this->getDatabaseAvailableThemeProviderService()));

        $instance->setName('theme:compile');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeCreateCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeCreateCommand
     */
    protected function getThemeCreateCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeCreateCommand.php';

        $this->privates['Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeCreateCommand(\dirname(__DIR__, 4));

        $instance->setName('theme:create');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeDumpCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeDumpCommand
     */
    protected function getThemeDumpCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeDumpCommand.php';

        $this->privates['Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeDumpCommand(($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), ($this->privates['Shopware\\Storefront\\Theme\\ThemeFileResolver'] ?? $this->getThemeFileResolverService()), ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService()), \dirname(__DIR__, 4), ($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] ?? $this->getStaticFileConfigDumperService()));

        $instance->setName('theme:dump');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemePrepareIconsCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemePrepareIconsCommand
     */
    protected function getThemePrepareIconsCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemePrepareIconsCommand.php';

        $this->privates['Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemePrepareIconsCommand();

        $instance->setName('theme:prepare-icons');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeRefreshCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeRefreshCommand
     */
    protected function getThemeRefreshCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeRefreshCommand.php';

        $this->privates['Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeRefreshCommand(($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? $this->getThemeLifecycleServiceService()));

        $instance->setName('theme:refresh');

        return $instance;
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ConfigLoader\DatabaseAvailableThemeProvider' shared service.
     *
     * @return \Shopware\Storefront\Theme\ConfigLoader\DatabaseAvailableThemeProvider
     */
    protected function getDatabaseAvailableThemeProviderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/AbstractAvailableThemeProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/DatabaseAvailableThemeProvider.php';

        $a = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'] = new \Shopware\Storefront\Theme\ConfigLoader\DatabaseAvailableThemeProvider($a);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ConfigLoader\DatabaseConfigLoader' shared service.
     *
     * @return \Shopware\Storefront\Theme\ConfigLoader\DatabaseConfigLoader
     */
    protected function getDatabaseConfigLoaderService()
    {
        $a = ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'];
        }
        $b = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'] = new \Shopware\Storefront\Theme\ConfigLoader\DatabaseConfigLoader($a, ($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), $b);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ConfigLoader\StaticFileConfigDumper' shared service.
     *
     * @return \Shopware\Storefront\Theme\ConfigLoader\StaticFileConfigDumper
     */
    protected function getStaticFileConfigDumperService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/StaticFileConfigDumper.php';

        $a = ($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'] ?? $this->getDatabaseAvailableThemeProviderService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] = new \Shopware\Storefront\Theme\ConfigLoader\StaticFileConfigDumper(($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'] ?? $this->getDatabaseConfigLoaderService()), $a, ($this->services['shopware.filesystem.private'] ?? $this->getShopware_Filesystem_PrivateService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\DataAbstractionLayer\ThemeIndexer' shared service.
     *
     * @return \Shopware\Storefront\Theme\DataAbstractionLayer\ThemeIndexer
     */
    protected function getThemeIndexerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/DataAbstractionLayer/ThemeIndexer.php';

        $a = ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'] = new \Shopware\Storefront\Theme\DataAbstractionLayer\ThemeIndexer(($this->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? $this->getIteratorFactoryService()), $a, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), $b);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\AppLifecycleSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\AppLifecycleSubscriber
     */
    protected function getAppLifecycleSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/AppLifecycleSubscriber.php';

        $a = ($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? $this->getThemeLifecycleServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'];
        }
        $b = ($this->services['app.repository'] ?? $this->getApp_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\AppLifecycleSubscriber($a, $b);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\FirstRunWizardSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\FirstRunWizardSubscriber
     */
    protected function getFirstRunWizardSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/FirstRunWizardSubscriber.php';

        $a = ($this->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? $this->getThemeServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? $this->getThemeLifecycleServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }
        $c = ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }
        $d = ($this->services['theme_sales_channel.repository'] ?? $this->getThemeSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }
        $e = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\FirstRunWizardSubscriber($a, $b, $c, $d, $e);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\PluginLifecycleSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\PluginLifecycleSubscriber
     */
    protected function getPluginLifecycleSubscriber2Service()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/PluginLifecycleSubscriber.php';

        $a = ($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'] ?? $this->getThemeLifecycleHandlerService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? $this->getThemeLifecycleServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\PluginLifecycleSubscriber(($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), \dirname(__DIR__, 4), ($this->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ?? ($this->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] = new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4)))), $a, $b);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\ThemeCompilerEnrichScssVarSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\ThemeCompilerEnrichScssVarSubscriber
     */
    protected function getThemeCompilerEnrichScssVarSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/ThemeCompilerEnrichScssVarSubscriber.php';

        $a = ($this->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'] ?? $this->getConfigurationServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\ThemeCompilerEnrichScssVarSubscriber($a, ($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\UpdateSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\UpdateSubscriber
     */
    protected function getUpdateSubscriberService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/UpdateSubscriber.php';

        $a = ($this->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? $this->getThemeServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? $this->getThemeLifecycleServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'];
        }
        $c = ($this->services['sales_channel.repository'] ?? $this->getSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\UpdateSubscriber($a, $b, $c);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ThemeAppLifecycleHandler' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeAppLifecycleHandler
     */
    protected function getThemeAppLifecycleHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeAppLifecycleHandler.php';

        $a = ($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'] ?? $this->getThemeLifecycleHandlerService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] = new \Shopware\Storefront\Theme\ThemeAppLifecycleHandler(($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), ($this->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ?? ($this->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] = new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4)))), $a);
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ThemeConfigValueAccessor' shared autowired service.
     *
     * @return \Shopware\Storefront\Theme\ThemeConfigValueAccessor
     */
    protected function getThemeConfigValueAccessorService()
    {
        $a = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? $this->getThemeServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'] = new \Shopware\Storefront\Theme\ThemeConfigValueAccessor(new \Shopware\Storefront\Theme\CachedResolvedConfigLoader(new \Shopware\Storefront\Theme\ResolvedConfigLoader($a, $b), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService())));
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ThemeFileResolver' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeFileResolver
     */
    protected function getThemeFileResolverService()
    {
        return $this->privates['Shopware\\Storefront\\Theme\\ThemeFileResolver'] = new \Shopware\Storefront\Theme\ThemeFileResolver(($this->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] ?? ($this->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] = new \Shopware\Storefront\Theme\ThemeFileImporter(\dirname(__DIR__, 4)))));
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ThemeLifecycleHandler' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeLifecycleHandler
     */
    protected function getThemeLifecycleHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeLifecycleHandler.php';

        $a = ($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? $this->getThemeLifecycleServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'];
        }
        $b = ($this->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? $this->getThemeServiceService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'];
        }
        $c = ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'] = new \Shopware\Storefront\Theme\ThemeLifecycleHandler($a, $b, $c, ($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ThemeLifecycleService' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeLifecycleService
     */
    protected function getThemeLifecycleServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeLifecycleService.php';

        $a = ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $b = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $c = ($this->services['media_folder.repository'] ?? $this->getMediaFolder_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $d = ($this->services['theme_media.repository'] ?? $this->getThemeMedia_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $e = ($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? $this->getFileSaverService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $f = ($this->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'] ?? $this->getFileNameProviderService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $g = ($this->services['language.repository'] ?? $this->getLanguage_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $h = ($this->services['theme_child.repository'] ?? $this->getThemeChild_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] = new \Shopware\Storefront\Theme\ThemeLifecycleService(($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), $a, $b, $c, $d, $e, $f, ($this->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] ?? ($this->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] = new \Shopware\Storefront\Theme\ThemeFileImporter(\dirname(__DIR__, 4)))), $g, $h, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\ThemeService' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeService
     */
    protected function getThemeServiceService()
    {
        $a = ($this->services['theme.repository'] ?? $this->getTheme_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $b = ($this->services['theme_sales_channel.repository'] ?? $this->getThemeSalesChannel_RepositoryService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $d = ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? $this->getCacheInvalidatorService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $e = ($this->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'] ?? $this->getDatabaseConfigLoaderService());

        if (isset($this->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $this->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }

        return $this->privates['Shopware\\Storefront\\Theme\\ThemeService'] = new \Shopware\Storefront\Theme\ThemeService(($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService()), $a, $b, new \Shopware\Storefront\Theme\ThemeCompiler(($this->services['shopware.filesystem.theme'] ?? $this->getShopware_Filesystem_ThemeService()), ($this->services['shopware.filesystem.temp'] ?? $this->getShopware_Filesystem_TempService()), ($this->privates['Shopware\\Storefront\\Theme\\ThemeFileResolver'] ?? $this->getThemeFileResolverService()), false, $c, ($this->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] ?? ($this->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] = new \Shopware\Storefront\Theme\ThemeFileImporter(\dirname(__DIR__, 4)))), ['public' => ($this->privates['shopware.asset.public'] ?? $this->getShopware_Asset_PublicService()), 'theme' => ($this->privates['shopware.asset.theme'] ?? $this->getShopware_Asset_ThemeService()), 'asset' => ($this->privates['shopware.asset.asset'] ?? $this->getShopware_Asset_AssetService()), 'sitemap' => ($this->privates['shopware.asset.sitemap'] ?? $this->getShopware_Asset_SitemapService())], $d, ($this->privates['Shopware\\Storefront\\Theme\\MD5ThemePathBuilder'] ?? ($this->privates['Shopware\\Storefront\\Theme\\MD5ThemePathBuilder'] = new \Shopware\Storefront\Theme\MD5ThemePathBuilder())), \dirname(__DIR__, 4), new \Shopware\Storefront\Theme\ScssPhpCompiler()), $c, $e, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Shopware\Storefront\Theme\Twig\ThemeNamespaceHierarchyBuilder' shared service.
     *
     * @return \Shopware\Storefront\Theme\Twig\ThemeNamespaceHierarchyBuilder
     */
    protected function getThemeNamespaceHierarchyBuilderService()
    {
        return $this->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] = new \Shopware\Storefront\Theme\Twig\ThemeNamespaceHierarchyBuilder(new \Shopware\Storefront\Theme\Twig\ThemeInheritanceBuilder(($this->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? $this->getStorefrontPluginRegistryService())), ($this->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'] ?? $this->getSalesChannelThemeLoaderService()));
    }

    /*
     * Gets the private 'Swag\PlatformDemoData\DataProvider\CategoryProvider' shared service.
     *
     * @return \Swag\PlatformDemoData\DataProvider\CategoryProvider
     */
    protected function getCategoryProviderService()
    {
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/DemoDataProvider.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/CategoryProvider.php';

        return $this->privates['Swag\\PlatformDemoData\\DataProvider\\CategoryProvider'] = new \Swag\PlatformDemoData\DataProvider\CategoryProvider(($this->services['category.repository'] ?? $this->getCategory_RepositoryService()), ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Swag\PlatformDemoData\DataProvider\CmsPageProvider' shared service.
     *
     * @return \Swag\PlatformDemoData\DataProvider\CmsPageProvider
     */
    protected function getCmsPageProviderService()
    {
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/DemoDataProvider.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/CmsPageProvider.php';

        return $this->privates['Swag\\PlatformDemoData\\DataProvider\\CmsPageProvider'] = new \Swag\PlatformDemoData\DataProvider\CmsPageProvider(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Swag\PlatformDemoData\DataProvider\CustomerProvider' shared service.
     *
     * @return \Swag\PlatformDemoData\DataProvider\CustomerProvider
     */
    protected function getCustomerProviderService()
    {
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/DemoDataProvider.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/CustomerProvider.php';

        return $this->privates['Swag\\PlatformDemoData\\DataProvider\\CustomerProvider'] = new \Swag\PlatformDemoData\DataProvider\CustomerProvider(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['category.repository'] ?? $this->getCategory_RepositoryService()));
    }

    /*
     * Gets the private 'Swag\PlatformDemoData\DataProvider\MediaProvider' shared service.
     *
     * @return \Swag\PlatformDemoData\DataProvider\MediaProvider
     */
    protected function getMediaProviderService()
    {
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/DemoDataProvider.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/MediaProvider.php';

        return $this->privates['Swag\\PlatformDemoData\\DataProvider\\MediaProvider'] = new \Swag\PlatformDemoData\DataProvider\MediaProvider(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()), ($this->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? $this->getFileSaverService()));
    }

    /*
     * Gets the private 'Swag\PlatformDemoData\DataProvider\ProductProvider' shared service.
     *
     * @return \Swag\PlatformDemoData\DataProvider\ProductProvider
     */
    protected function getProductProviderService()
    {
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/DemoDataProvider.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/ProductProvider.php';

        return $this->privates['Swag\\PlatformDemoData\\DataProvider\\ProductProvider'] = new \Swag\PlatformDemoData\DataProvider\ProductProvider(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Swag\PlatformDemoData\DataProvider\PropertyProvider' shared service.
     *
     * @return \Swag\PlatformDemoData\DataProvider\PropertyProvider
     */
    protected function getPropertyProviderService()
    {
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/DemoDataProvider.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/PropertyProvider.php';

        return $this->privates['Swag\\PlatformDemoData\\DataProvider\\PropertyProvider'] = new \Swag\PlatformDemoData\DataProvider\PropertyProvider(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Swag\PlatformDemoData\DataProvider\RuleProvider' shared service.
     *
     * @return \Swag\PlatformDemoData\DataProvider\RuleProvider
     */
    protected function getRuleProviderService()
    {
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/DemoDataProvider.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/RuleProvider.php';

        return $this->privates['Swag\\PlatformDemoData\\DataProvider\\RuleProvider'] = new \Swag\PlatformDemoData\DataProvider\RuleProvider(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Swag\PlatformDemoData\DataProvider\ShippingMethodProvider' shared service.
     *
     * @return \Swag\PlatformDemoData\DataProvider\ShippingMethodProvider
     */
    protected function getShippingMethodProviderService()
    {
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/DemoDataProvider.php';
        include_once \dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/DataProvider/ShippingMethodProvider.php';

        return $this->privates['Swag\\PlatformDemoData\\DataProvider\\ShippingMethodProvider'] = new \Swag\PlatformDemoData\DataProvider\ShippingMethodProvider(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));
    }

    /*
     * Gets the private 'Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory' shared service.
     *
     * @return \Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory
     */
    protected function getPsrHttpFactoryService()
    {
        $a = ($this->privates['Nyholm\\Psr7\\Factory\\Psr17Factory'] ?? ($this->privates['Nyholm\\Psr7\\Factory\\Psr17Factory'] = new \Nyholm\Psr7\Factory\Psr17Factory()));

        return $this->privates['Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory'] = new \Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory($a, $a, $a, $a);
    }

    /*
     * Gets the private 'Symfony\Component\Dotenv\Command\DotenvDumpCommand' shared autowired service.
     *
     * @return \Symfony\Component\Dotenv\Command\DotenvDumpCommand
     */
    protected function getDotenvDumpCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dotenv/Command/DotenvDumpCommand.php';

        $this->privates['Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand'] = $instance = new \Symfony\Component\Dotenv\Command\DotenvDumpCommand(\dirname(__DIR__, 4));

        $instance->setName('dotenv:dump');
        $instance->setDescription('Compiles .env files to .env.local.php');

        return $instance;
    }

    /*
     * Gets the private 'annotations.cache_adapter' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\PhpArrayAdapter
     */
    protected function getAnnotations_CacheAdapterService()
    {
        return \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($this->targetDir.''.'/annotations.php'), ($this->privates['cache.annotations'] ?? $this->getCache_AnnotationsService()));
    }

    /*
     * Gets the private 'annotations.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer
     */
    protected function getAnnotations_CacheWarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/AbstractPhpFileCacheWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/AnnotationsCacheWarmer.php';

        return $this->privates['annotations.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer(($this->privates['annotations.reader'] ?? $this->getAnnotations_ReaderService()), ($this->targetDir.''.'/annotations.php'), '#^Symfony\\\\(?:Component\\\\HttpKernel\\\\|Bundle\\\\FrameworkBundle\\\\Controller\\\\(?!.*Controller$))#', false);
    }

    /*
     * Gets the private 'annotations.cached_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\PsrCachedReader
     */
    protected function getAnnotations_CachedReaderService()
    {
        return $this->privates['annotations.cached_reader'] = new \Doctrine\Common\Annotations\PsrCachedReader(($this->privates['annotations.reader'] ?? $this->getAnnotations_ReaderService()), $this->getAnnotations_CacheAdapterService(), false);
    }

    /*
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Shopware\Core\Framework\Compatibility\AnnotationReader
     */
    protected function getAnnotations_ReaderService()
    {
        $this->privates['annotations.reader'] = $instance = new \Shopware\Core\Framework\Compatibility\AnnotationReader();

        $a = new \Doctrine\Common\Annotations\AnnotationRegistry();
        $a->registerUniqueLoader('class_exists');

        $instance->addGlobalIgnoredName('required', $a);

        return $instance;
    }

    /*
     * Gets the private 'argument_resolver.service' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver
     */
    protected function getArgumentResolver_ServiceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/ServiceValueResolver.php';

        return $this->privates['argument_resolver.service'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController::index' => ['privates', '.service_locator.Q1m2WkM', 'get_ServiceLocator_Q1m2WkMService', false],
            'kernel::loadRoutes' => ['privates', '.service_locator.KfbR3DY', 'get_ServiceLocator_KfbR3DYService', false],
            'kernel::reboot' => ['privates', '.service_locator.N1ijGuF', 'get_ServiceLocator_N1ijGuFService', false],
            'kernel::registerContainerConfiguration' => ['privates', '.service_locator.KfbR3DY', 'get_ServiceLocator_KfbR3DYService', false],
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController:index' => ['privates', '.service_locator.Q1m2WkM', 'get_ServiceLocator_Q1m2WkMService', false],
            'kernel:loadRoutes' => ['privates', '.service_locator.KfbR3DY', 'get_ServiceLocator_KfbR3DYService', false],
            'kernel:reboot' => ['privates', '.service_locator.N1ijGuF', 'get_ServiceLocator_N1ijGuFService', false],
            'kernel:registerContainerConfiguration' => ['privates', '.service_locator.KfbR3DY', 'get_ServiceLocator_KfbR3DYService', false],
        ], [
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController::index' => '?',
            'kernel::loadRoutes' => '?',
            'kernel::reboot' => '?',
            'kernel::registerContainerConfiguration' => '?',
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController:index' => '?',
            'kernel:loadRoutes' => '?',
            'kernel:reboot' => '?',
            'kernel:registerContainerConfiguration' => '?',
        ]));
    }

    /*
     * Gets the private 'assets.packages' shared service.
     *
     * @return \Symfony\Component\Asset\Packages
     */
    protected function getAssets_PackagesService()
    {
        $a = ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService());

        $this->privates['assets.packages'] = $instance = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', ($this->privates['assets.empty_version_strategy'] ?? ($this->privates['assets.empty_version_strategy'] = new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy())), new \Symfony\Component\Asset\Context\RequestStackContext(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), $a->getBaseUrl(), $a->isSecure())), new RewindableGenerator(function () {
            yield 'public' => ($this->privates['shopware.asset.public'] ?? $this->getShopware_Asset_PublicService());
            yield 'theme' => ($this->privates['shopware.asset.theme'] ?? $this->getShopware_Asset_ThemeService());
            yield 'asset' => ($this->privates['shopware.asset.asset'] ?? $this->getShopware_Asset_AssetService());
            yield 'sitemap' => ($this->privates['shopware.asset.sitemap'] ?? $this->getShopware_Asset_SitemapService());
        }, 4));

        $instance->setDefaultPackage(($this->privates['shopware.asset.asset'] ?? $this->getShopware_Asset_AssetService()));

        return $instance;
    }

    /*
     * Gets the private 'cache.annotations' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_AnnotationsService()
    {
        return $this->privates['cache.annotations'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('r5wHx2ha7s', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the private 'cache.http' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TagAwareAdapter
     */
    protected function getCache_HttpService()
    {
        $this->privates['cache.http'] = $instance = new \Symfony\Component\Cache\Adapter\TagAwareAdapter(($this->privates['.cache.http.inner'] ?? $this->get_Cache_Http_InnerService()), ($this->privates['cache.tags'] ?? $this->getCache_TagsService()));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the private 'cache.messenger.restart_workers_signal' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function getCache_Messenger_RestartWorkersSignalService()
    {
        $this->privates['cache.messenger.restart_workers_signal'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('LchBRvnVId', 0, ($this->targetDir.''.'/pools/app'), ($this->privates['cache.default_marshaller'] ?? ($this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false))));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the private 'cache.property_access' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_PropertyAccessService()
    {
        return $this->privates['cache.property_access'] = \Symfony\Component\PropertyAccess\PropertyAccessor::createCache('oT99UHNtY7', 0, $this->getParameter('container.build_id'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the private 'cache.property_info' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_PropertyInfoService()
    {
        return $this->privates['cache.property_info'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('GoOekQq2yS', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the private 'cache.rate_limiter' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function getCache_RateLimiterService()
    {
        $this->privates['cache.rate_limiter'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('QQo4aVP-xR', 0, ($this->targetDir.''.'/pools/app'), ($this->privates['cache.default_marshaller'] ?? ($this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false))));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the private 'cache.serializer' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_SerializerService()
    {
        return $this->privates['cache.serializer'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('md5qY40zuf', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the private 'cache.tags' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected function getCache_TagsService()
    {
        $this->privates['cache.tags'] = $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('Voen5NwQy3', 0, ($this->targetDir.''.'/pools/app'), ($this->privates['cache.default_marshaller'] ?? ($this->privates['cache.default_marshaller'] = new \Symfony\Component\Cache\Marshaller\DefaultMarshaller(NULL, false))));

        $instance->setLogger(($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));

        return $instance;
    }

    /*
     * Gets the private 'cache.validator' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_ValidatorService()
    {
        return $this->privates['cache.validator'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('pFZC4cKRKe', 0, $this->getParameter('container.build_id'), ($this->targetDir.''.'/pools/system'), ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService()));
    }

    /*
     * Gets the private 'config_builder.warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer
     */
    protected function getConfigBuilder_WarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/ConfigBuilderCacheWarmer.php';

        return $this->privates['config_builder.warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()));
    }

    /*
     * Gets the private 'console.command.about' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\AboutCommand
     */
    protected function getConsole_Command_AboutService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/AboutCommand.php';

        $this->privates['console.command.about'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\AboutCommand();

        $instance->setName('about');
        $instance->setDescription('Display information about the current project');

        return $instance;
    }

    /*
     * Gets the private 'console.command.assets_install' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\AssetInstallCommand
     */
    protected function getConsole_Command_AssetsInstallService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Asset/AssetInstallCommand.php';

        $this->privates['console.command.assets_install'] = $instance = new \Shopware\Core\Framework\Adapter\Asset\AssetInstallCommand(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'] ?? $this->getAssetServiceService()), ($this->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? $this->getActiveAppsLoaderService()));

        $instance->setName('assets:install');

        return $instance;
    }

    /*
     * Gets the private 'console.command.cache_clear' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand
     */
    protected function getConsole_Command_CacheClearService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CacheClearCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $this->privates['console.command.cache_clear'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand(($this->services['.container.private.cache_clearer'] ?? $this->get_Container_Private_CacheClearerService()), ($this->services['.container.private.filesystem'] ?? ($this->services['.container.private.filesystem'] = new \Symfony\Component\Filesystem\Filesystem())));

        $instance->setName('cache:clear');
        $instance->setDescription('Clear the cache');

        return $instance;
    }

    /*
     * Gets the private 'console.command.cache_pool_clear' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand
     */
    protected function getConsole_Command_CachePoolClearService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolClearCommand.php';

        $this->privates['console.command.cache_pool_clear'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand(($this->services['cache.global_clearer'] ?? $this->getCache_GlobalClearerService()), [0 => 'cache.app', 1 => 'cache.system', 2 => 'cache.validator', 3 => 'cache.serializer', 4 => 'cache.annotations', 5 => 'cache.property_info', 6 => 'cache.messenger.restart_workers_signal', 7 => 'cache.rate_limiter', 8 => 'cache.object', 9 => 'cache.http', 10 => 'cache.tags', 11 => 'cache.property_access', 12 => 'cache.validator_expression_language']);

        $instance->setName('cache:pool:clear');
        $instance->setDescription('Clear cache pools');

        return $instance;
    }

    /*
     * Gets the private 'console.command.cache_pool_delete' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand
     */
    protected function getConsole_Command_CachePoolDeleteService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolDeleteCommand.php';

        $this->privates['console.command.cache_pool_delete'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand(($this->services['cache.global_clearer'] ?? $this->getCache_GlobalClearerService()), [0 => 'cache.app', 1 => 'cache.system', 2 => 'cache.validator', 3 => 'cache.serializer', 4 => 'cache.annotations', 5 => 'cache.property_info', 6 => 'cache.messenger.restart_workers_signal', 7 => 'cache.rate_limiter', 8 => 'cache.object', 9 => 'cache.http', 10 => 'cache.tags', 11 => 'cache.property_access', 12 => 'cache.validator_expression_language']);

        $instance->setName('cache:pool:delete');
        $instance->setDescription('Delete an item from a cache pool');

        return $instance;
    }

    /*
     * Gets the private 'console.command.cache_pool_list' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand
     */
    protected function getConsole_Command_CachePoolListService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolListCommand.php';

        $this->privates['console.command.cache_pool_list'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand([0 => 'cache.app', 1 => 'cache.system', 2 => 'cache.validator', 3 => 'cache.serializer', 4 => 'cache.annotations', 5 => 'cache.property_info', 6 => 'cache.messenger.restart_workers_signal', 7 => 'cache.rate_limiter', 8 => 'cache.object', 9 => 'cache.http', 10 => 'cache.tags', 11 => 'cache.property_access', 12 => 'cache.validator_expression_language']);

        $instance->setName('cache:pool:list');
        $instance->setDescription('List available cache pools');

        return $instance;
    }

    /*
     * Gets the private 'console.command.cache_pool_prune' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand
     */
    protected function getConsole_Command_CachePoolPruneService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolPruneCommand.php';

        $this->privates['console.command.cache_pool_prune'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand(new RewindableGenerator(function () {
            yield 'cache.app' => ($this->services['cache.app'] ?? $this->getCache_AppService());
            yield 'cache.messenger.restart_workers_signal' => ($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService());
            yield 'cache.rate_limiter' => ($this->privates['cache.rate_limiter'] ?? $this->getCache_RateLimiterService());
            yield '.cache.object.inner' => ($this->privates['.cache.object.inner'] ?? $this->get_Cache_Object_InnerService());
            yield '.cache.http.inner' => ($this->privates['.cache.http.inner'] ?? $this->get_Cache_Http_InnerService());
            yield 'cache.tags' => ($this->privates['cache.tags'] ?? $this->getCache_TagsService());
        }, 6));

        $instance->setName('cache:pool:prune');
        $instance->setDescription('Prune cache pools');

        return $instance;
    }

    /*
     * Gets the private 'console.command.cache_warmup' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand
     */
    protected function getConsole_Command_CacheWarmupService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CacheWarmupCommand.php';

        $this->privates['console.command.cache_warmup'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand(($this->services['cache_warmer'] ?? $this->getCacheWarmerService()));

        $instance->setName('cache:warmup');
        $instance->setDescription('Warm up an empty cache');

        return $instance;
    }

    /*
     * Gets the private 'console.command.config_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand
     */
    protected function getConsole_Command_ConfigDebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerDebugCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/AbstractConfigCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ConfigDebugCommand.php';

        $this->privates['console.command.config_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand();

        $instance->setName('debug:config');
        $instance->setDescription('Dump the current configuration for an extension');

        return $instance;
    }

    /*
     * Gets the private 'console.command.config_dump_reference' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand
     */
    protected function getConsole_Command_ConfigDumpReferenceService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerDebugCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/AbstractConfigCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ConfigDumpReferenceCommand.php';

        $this->privates['console.command.config_dump_reference'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand();

        $instance->setName('config:dump-reference');
        $instance->setDescription('Dump the default configuration for an extension');

        return $instance;
    }

    /*
     * Gets the private 'console.command.container_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand
     */
    protected function getConsole_Command_ContainerDebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerDebugCommand.php';

        $this->privates['console.command.container_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand();

        $instance->setName('debug:container');
        $instance->setDescription('Display current services for an application');

        return $instance;
    }

    /*
     * Gets the private 'console.command.container_lint' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand
     */
    protected function getConsole_Command_ContainerLintService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerLintCommand.php';

        $this->privates['console.command.container_lint'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand();

        $instance->setName('lint:container');
        $instance->setDescription('Ensure that arguments injected into services match type declarations');

        return $instance;
    }

    /*
     * Gets the private 'console.command.debug_autowiring' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand
     */
    protected function getConsole_Command_DebugAutowiringService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerDebugCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/DebugAutowiringCommand.php';

        $this->privates['console.command.debug_autowiring'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand(NULL, ($this->privates['debug.file_link_formatter'] ?? ($this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))));

        $instance->setName('debug:autowiring');
        $instance->setDescription('List classes/interfaces you can use for autowiring');

        return $instance;
    }

    /*
     * Gets the private 'console.command.dotenv_debug' shared service.
     *
     * @return \Symfony\Component\Dotenv\Command\DebugCommand
     */
    protected function getConsole_Command_DotenvDebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dotenv/Command/DebugCommand.php';

        $this->privates['console.command.dotenv_debug'] = $instance = new \Symfony\Component\Dotenv\Command\DebugCommand('prod', \dirname(__DIR__, 4));

        $instance->setName('debug:dotenv');
        $instance->setDescription('Lists all dotenv files with variables and values');

        return $instance;
    }

    /*
     * Gets the private 'console.command.event_dispatcher_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand
     */
    protected function getConsole_Command_EventDispatcherDebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/EventDispatcherDebugCommand.php';

        $this->privates['console.command.event_dispatcher_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'event_dispatcher' => ['services', 'event_dispatcher', 'getEventDispatcherService', false],
        ], [
            'event_dispatcher' => '?',
        ]));

        $instance->setName('debug:event-dispatcher');
        $instance->setDescription('Display configured listeners for an application');

        return $instance;
    }

    /*
     * Gets the private 'console.command.messenger_consume_messages' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\ConsumeMessagesCommand
     */
    protected function getConsole_Command_MessengerConsumeMessagesService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/ResetServicesListener.php';

        $this->privates['console.command.messenger_consume_messages'] = $instance = new \Symfony\Component\Messenger\Command\ConsumeMessagesCommand(($this->privates['messenger.routable_message_bus'] ?? $this->getMessenger_RoutableMessageBusService()), ($this->privates['messenger.receiver_locator'] ?? $this->getMessenger_ReceiverLocatorService()), ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()), ($this->privates['monolog.logger.messenger'] ?? $this->getMonolog_Logger_MessengerService()), $this->parameters['enqueue.transports'], new \Symfony\Component\Messenger\EventListener\ResetServicesListener(($this->services['services_resetter'] ?? $this->getServicesResetterService())), [0 => 'messenger.bus.shopware']);

        $instance->setName('messenger:consume');
        $instance->setDescription('Consume messages');

        return $instance;
    }

    /*
     * Gets the private 'console.command.messenger_debug' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\DebugCommand
     */
    protected function getConsole_Command_MessengerDebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/DebugCommand.php';

        $this->privates['console.command.messenger_debug'] = $instance = new \Symfony\Component\Messenger\Command\DebugCommand(['messenger.bus.shopware' => ['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTask' => [0 => [0 => 'Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler', 1 => []]], 'Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTask' => [0 => [0 => 'Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler', 1 => []]], 'Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFolders' => [0 => [0 => 'Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler', 1 => []]], 'Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsMessage' => [0 => [0 => 'Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler', 1 => []]], 'Shopware\\Core\\Content\\Media\\Message\\UpdateThumbnailsMessage' => [0 => [0 => 'Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler', 1 => []]], 'Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsTask' => [0 => [0 => 'Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler', 1 => []]], 'Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsTask' => [0 => [0 => 'Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler', 1 => []]], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexingMessage' => [0 => [0 => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry', 1 => []]], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\MessageQueue\\IterateEntityIndexerMessage' => [0 => [0 => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry', 1 => []]], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTask' => [0 => [0 => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler', 1 => []]], 'Shopware\\Core\\Framework\\MessageQueue\\Message\\EncryptedMessage' => [0 => [0 => 'Shopware\\Core\\Framework\\MessageQueue\\Handler\\EncryptedMessageHandler', 1 => []]], 'Shopware\\Core\\Framework\\MessageQueue\\Message\\RetryMessage' => [0 => [0 => 'Shopware\\Core\\Framework\\MessageQueue\\Handler\\RetryMessageHandler', 1 => []]], 'Shopware\\Core\\Framework\\MessageQueue\\Message\\SleepMessage' => [0 => [0 => 'Shopware\\Core\\Framework\\MessageQueue\\Handler\\SleepTaskHandler', 1 => []]], 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesTask' => [0 => [0 => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesHandler', 1 => []]], 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskMessage' => [0 => [0 => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler', 1 => []]], 'Shopware\\Core\\Framework\\Webhook\\Message\\WebhookEventMessage' => [0 => [0 => 'Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler', 1 => []]], 'Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTask' => [0 => [0 => 'Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler', 1 => []]], 'Shopware\\Core\\Content\\Media\\Message\\DeleteFileMessage' => [0 => [0 => 'Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler', 1 => []]], 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTask' => [0 => [0 => 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler', 1 => []]], 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTask' => [0 => [0 => 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler', 1 => []]], 'Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTask' => [0 => [0 => 'Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler', 1 => []]], 'Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTask' => [0 => [0 => 'Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler', 1 => []]], 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTask' => [0 => [0 => 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler', 1 => []]], 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGeneration' => [0 => [0 => 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler', 1 => []]], 'Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportMessage' => [0 => [0 => 'Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler', 1 => []]], 'Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileMessage' => [0 => [0 => 'Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileHandler', 1 => []]], 'Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTask' => [0 => [0 => 'Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler', 1 => []]], 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTask' => [0 => [0 => 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler', 1 => []]], 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessage' => [0 => [0 => 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler', 1 => []]], 'Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTask' => [0 => [0 => 'Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler', 1 => []]], 'Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\WarmUpMessage' => [0 => [0 => 'Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler', 1 => []]], 'Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTask' => [0 => [0 => 'Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler', 1 => []]], 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexingMessage' => [0 => [0 => 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer', 1 => []]], 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchLanguageIndexIteratorMessage' => [0 => [0 => 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer', 1 => []]], 'Shopware\\Elasticsearch\\Admin\\AdminSearchIndexingMessage' => [0 => [0 => 'Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry', 1 => []]], 'Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage' => [0 => [0 => 'mailer.messenger.message_handler', 1 => []]]]]);

        $instance->setName('debug:messenger');
        $instance->setDescription('List messages you can dispatch using the message buses');

        return $instance;
    }

    /*
     * Gets the private 'console.command.messenger_setup_transports' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\SetupTransportsCommand
     */
    protected function getConsole_Command_MessengerSetupTransportsService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/SetupTransportsCommand.php';

        $this->privates['console.command.messenger_setup_transports'] = $instance = new \Symfony\Component\Messenger\Command\SetupTransportsCommand(($this->privates['messenger.receiver_locator'] ?? $this->getMessenger_ReceiverLocatorService()), $this->parameters['enqueue.transports']);

        $instance->setName('messenger:setup-transports');
        $instance->setDescription('Prepare the required infrastructure for the transport');

        return $instance;
    }

    /*
     * Gets the private 'console.command.messenger_stop_workers' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\StopWorkersCommand
     */
    protected function getConsole_Command_MessengerStopWorkersService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/StopWorkersCommand.php';

        $this->privates['console.command.messenger_stop_workers'] = $instance = new \Symfony\Component\Messenger\Command\StopWorkersCommand(($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService()));

        $instance->setName('messenger:stop-workers');
        $instance->setDescription('Stop workers after their current message');

        return $instance;
    }

    /*
     * Gets the private 'console.command.router_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand
     */
    protected function getConsole_Command_RouterDebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/RouterDebugCommand.php';

        $this->privates['console.command.router_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand(($this->services['router'] ?? $this->getRouterService()), ($this->privates['debug.file_link_formatter'] ?? ($this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))));

        $instance->setName('debug:router');
        $instance->setDescription('Display current routes for an application');

        return $instance;
    }

    /*
     * Gets the private 'console.command.router_match' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand
     */
    protected function getConsole_Command_RouterMatchService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/RouterMatchCommand.php';

        $this->privates['console.command.router_match'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand(($this->services['router'] ?? $this->getRouterService()), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0));

        $instance->setName('router:match');
        $instance->setDescription('Help debug routes by simulating a path info match');

        return $instance;
    }

    /*
     * Gets the private 'console.command.secrets_decrypt_to_local' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand
     */
    protected function getConsole_Command_SecretsDecryptToLocalService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsDecryptToLocalCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $this->privates['console.command.secrets_decrypt_to_local'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand(($this->privates['secrets.vault'] ?? $this->getSecrets_VaultService()), ($this->privates['secrets.local_vault'] ?? ($this->privates['secrets.local_vault'] = new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.prod.local')))));

        $instance->setName('secrets:decrypt-to-local');
        $instance->setDescription('Decrypt all secrets and stores them in the local vault');

        return $instance;
    }

    /*
     * Gets the private 'console.command.secrets_encrypt_from_local' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand
     */
    protected function getConsole_Command_SecretsEncryptFromLocalService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsEncryptFromLocalCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $this->privates['console.command.secrets_encrypt_from_local'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand(($this->privates['secrets.vault'] ?? $this->getSecrets_VaultService()), ($this->privates['secrets.local_vault'] ?? ($this->privates['secrets.local_vault'] = new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.prod.local')))));

        $instance->setName('secrets:encrypt-from-local');
        $instance->setDescription('Encrypt all local secrets to the vault');

        return $instance;
    }

    /*
     * Gets the private 'console.command.secrets_generate_key' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand
     */
    protected function getConsole_Command_SecretsGenerateKeyService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsGenerateKeysCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $this->privates['console.command.secrets_generate_key'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand(($this->privates['secrets.vault'] ?? $this->getSecrets_VaultService()), ($this->privates['secrets.local_vault'] ?? ($this->privates['secrets.local_vault'] = new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.prod.local')))));

        $instance->setName('secrets:generate-keys');
        $instance->setDescription('Generate new encryption keys');

        return $instance;
    }

    /*
     * Gets the private 'console.command.secrets_list' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand
     */
    protected function getConsole_Command_SecretsListService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsListCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $this->privates['console.command.secrets_list'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand(($this->privates['secrets.vault'] ?? $this->getSecrets_VaultService()), ($this->privates['secrets.local_vault'] ?? ($this->privates['secrets.local_vault'] = new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.prod.local')))));

        $instance->setName('secrets:list');
        $instance->setDescription('List all secrets');

        return $instance;
    }

    /*
     * Gets the private 'console.command.secrets_remove' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand
     */
    protected function getConsole_Command_SecretsRemoveService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsRemoveCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $this->privates['console.command.secrets_remove'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand(($this->privates['secrets.vault'] ?? $this->getSecrets_VaultService()), ($this->privates['secrets.local_vault'] ?? ($this->privates['secrets.local_vault'] = new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.prod.local')))));

        $instance->setName('secrets:remove');
        $instance->setDescription('Remove a secret from the vault');

        return $instance;
    }

    /*
     * Gets the private 'console.command.secrets_set' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand
     */
    protected function getConsole_Command_SecretsSetService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsSetCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $this->privates['console.command.secrets_set'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand(($this->privates['secrets.vault'] ?? $this->getSecrets_VaultService()), ($this->privates['secrets.local_vault'] ?? ($this->privates['secrets.local_vault'] = new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.prod.local')))));

        $instance->setName('secrets:set');
        $instance->setDescription('Set a secret in the vault');

        return $instance;
    }

    /*
     * Gets the private 'console.command.translation_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand
     */
    protected function getConsole_Command_TranslationDebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/TranslationDebugCommand.php';

        $this->privates['console.command.translation_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand(($this->services['translator'] ?? $this->getTranslatorService()), ($this->privates['translation.reader'] ?? $this->getTranslation_ReaderService()), ($this->privates['translation.extractor'] ?? $this->getTranslation_ExtractorService()), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet'), (\dirname(__DIR__, 4).'/templates'), [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations')], [0 => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), 1 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportGenerator.php'), 2 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ScheduledTask/ProductExportPartialGenerationHandler.php'), 3 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Subscriber/MailSendSubscriber.php'), 4 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SendMailAction.php'), 5 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Twig/DocumentTemplateRenderer.php'), 6 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Csrf/CsrfRouteListener.php'), 7 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Newsletter/Account/NewsletterAccountPageletLoader.php'), 8 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Cms/DefaultMediaResolver.php'), 9 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheTracer.php'), 10 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Event/CartMergedSubscriber.php'), 11 => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/TranslationDebugCommand.php'), 12 => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/TranslationsCacheWarmer.php'), 13 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/ValidatorBuilder.php'), 14 => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php')], []);

        $instance->setName('debug:translation');
        $instance->setDescription('Display translation messages information');

        return $instance;
    }

    /*
     * Gets the private 'console.command.translation_extract' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand
     */
    protected function getConsole_Command_TranslationExtractService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/TranslationUpdateCommand.php';

        $this->privates['console.command.translation_extract'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand(($this->privates['translation.writer'] ?? $this->getTranslation_WriterService()), ($this->privates['translation.reader'] ?? $this->getTranslation_ReaderService()), ($this->privates['translation.extractor'] ?? $this->getTranslation_ExtractorService()), 'en-GB', (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet'), (\dirname(__DIR__, 4).'/templates'), [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations')], [0 => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), 1 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportGenerator.php'), 2 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ScheduledTask/ProductExportPartialGenerationHandler.php'), 3 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Subscriber/MailSendSubscriber.php'), 4 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SendMailAction.php'), 5 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Twig/DocumentTemplateRenderer.php'), 6 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Csrf/CsrfRouteListener.php'), 7 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Newsletter/Account/NewsletterAccountPageletLoader.php'), 8 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Cms/DefaultMediaResolver.php'), 9 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheTracer.php'), 10 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Event/CartMergedSubscriber.php'), 11 => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/TranslationDebugCommand.php'), 12 => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/TranslationsCacheWarmer.php'), 13 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/ValidatorBuilder.php'), 14 => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php')], []);

        $instance->setName('translation:extract');
        $instance->setAliases([0 => 'translation:update']);
        $instance->setDescription('Extract missing translations keys from code to translation files.');

        return $instance;
    }

    /*
     * Gets the private 'console.command.translation_pull' shared service.
     *
     * @return \Symfony\Component\Translation\Command\TranslationPullCommand
     */
    protected function getConsole_Command_TranslationPullService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/TranslationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/TranslationPullCommand.php';

        $this->privates['console.command.translation_pull'] = $instance = new \Symfony\Component\Translation\Command\TranslationPullCommand(($this->privates['translation.provider_collection'] ?? $this->getTranslation_ProviderCollectionService()), ($this->privates['translation.writer'] ?? $this->getTranslation_WriterService()), ($this->privates['translation.reader'] ?? $this->getTranslation_ReaderService()), 'en-GB', [], []);

        $instance->setName('translation:pull');
        $instance->setDescription('Pull translations from a given provider.');

        return $instance;
    }

    /*
     * Gets the private 'console.command.translation_push' shared service.
     *
     * @return \Symfony\Component\Translation\Command\TranslationPushCommand
     */
    protected function getConsole_Command_TranslationPushService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/TranslationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/TranslationPushCommand.php';

        $this->privates['console.command.translation_push'] = $instance = new \Symfony\Component\Translation\Command\TranslationPushCommand(($this->privates['translation.provider_collection'] ?? $this->getTranslation_ProviderCollectionService()), ($this->privates['translation.reader'] ?? $this->getTranslation_ReaderService()), [], []);

        $instance->setName('translation:push');
        $instance->setDescription('Push translations to a given provider.');

        return $instance;
    }

    /*
     * Gets the private 'console.command.validator_debug' shared service.
     *
     * @return \Symfony\Component\Validator\Command\DebugCommand
     */
    protected function getConsole_Command_ValidatorDebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Command/DebugCommand.php';

        $this->privates['console.command.validator_debug'] = $instance = new \Symfony\Component\Validator\Command\DebugCommand(($this->services['.container.private.validator'] ?? $this->get_Container_Private_ValidatorService()));

        $instance->setName('debug:validator');
        $instance->setDescription('Display validation constraints for classes');

        return $instance;
    }

    /*
     * Gets the private 'console.command.xliff_lint' shared service.
     *
     * @return \Symfony\Component\Translation\Command\XliffLintCommand
     */
    protected function getConsole_Command_XliffLintService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/XliffLintCommand.php';

        $this->privates['console.command.xliff_lint'] = $instance = new \Symfony\Component\Translation\Command\XliffLintCommand();

        $instance->setName('lint:xliff');
        $instance->setDescription('Lint an XLIFF file and outputs encountered errors');

        return $instance;
    }

    /*
     * Gets the private 'console.command.yaml_lint' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand
     */
    protected function getConsole_Command_YamlLintService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/yaml/Command/LintCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/YamlLintCommand.php';

        $this->privates['console.command.yaml_lint'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand();

        $instance->setName('lint:yaml');
        $instance->setDescription('Lint a YAML file and outputs encountered errors');

        return $instance;
    }

    /*
     * Gets the private 'console.error_listener' shared service.
     *
     * @return \Symfony\Component\Console\EventListener\ErrorListener
     */
    protected function getConsole_ErrorListenerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/EventListener/ErrorListener.php';

        $a = new \Symfony\Bridge\Monolog\Logger('console');
        $a->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $a->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        return $this->privates['console.error_listener'] = new \Symfony\Component\Console\EventListener\ErrorListener($a);
    }

    /*
     * Gets the private 'container.env_var_processor' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\EnvVarProcessor
     */
    protected function getContainer_EnvVarProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/EnvVarProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/EnvVarProcessor.php';

        return $this->privates['container.env_var_processor'] = new \Symfony\Component\DependencyInjection\EnvVarProcessor($this, new RewindableGenerator(function () {
            yield 0 => ($this->privates['secrets.vault'] ?? $this->getSecrets_VaultService());
        }, 1));
    }

    /*
     * Gets the private 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        $a = new \Symfony\Bridge\Monolog\Logger('php');
        $a->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $a->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        return $this->privates['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $a, NULL, 0, false, false, NULL);
    }

    /*
     * Gets the private 'enqueue.client.consume_command' shared service.
     *
     * @return \Enqueue\Symfony\Client\ConsumeCommand
     */
    protected function getEnqueue_Client_ConsumeCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Consumption/LimitsExtensionsCommandTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Client/SetupBrokerExtensionCommandTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Consumption/QueueConsumerOptionsCommandTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Consumption/ChooseLoggerCommandTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Client/ConsumeCommand.php';

        $this->privates['enqueue.client.consume_command'] = $instance = new \Enqueue\Symfony\Client\ConsumeCommand(($this->privates['enqueue.locator'] ?? $this->getEnqueue_LocatorService()), 'default', 'enqueue.client.%s.queue_consumer', 'enqueue.client.%s.driver', 'enqueue.client.%s.delegate_processor');

        $instance->setName('enqueue:consume');

        return $instance;
    }

    /*
     * Gets the private 'enqueue.client.default.context' shared service.
     *
     * @return \Interop\Queue\Context
     */
    protected function getEnqueue_Client_Default_ContextService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/queue-interop/queue-interop/src/Context.php';

        return $this->privates['enqueue.client.default.context'] = ($this->privates['enqueue.client.default.driver'] ?? $this->getEnqueue_Client_Default_DriverService())->getContext();
    }

    /*
     * Gets the private 'enqueue.client.default.delegate_processor' shared service.
     *
     * @return \Enqueue\Client\DelegateProcessor
     */
    protected function getEnqueue_Client_Default_DelegateProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/queue-interop/queue-interop/src/Processor.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/DelegateProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/ProcessorRegistryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/ContainerProcessorRegistry.php';

        return $this->privates['enqueue.client.default.delegate_processor'] = new \Enqueue\Client\DelegateProcessor(new \Enqueue\Symfony\ContainerProcessorRegistry((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'enqueue.client.default.router_processor' => ['privates', 'enqueue.client.default.router_processor', 'getEnqueue_Client_Default_RouterProcessorService', false],
        ], [
            'enqueue.client.default.router_processor' => '?',
        ]))->withContext('enqueue.client.default.processor_registry', $this)));
    }

    /*
     * Gets the private 'enqueue.client.default.driver' shared service.
     *
     * @return \Enqueue\Client\DriverInterface
     */
    protected function getEnqueue_Client_Default_DriverService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/DriverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/DriverFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/DriverFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/Config.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/RouteCollection.php';

        return $this->privates['enqueue.client.default.driver'] = (new \Enqueue\Client\DriverFactory())->create(($this->privates['enqueue.transport.default.connection_factory'] ?? $this->getEnqueue_Transport_Default_ConnectionFactoryService()), new \Enqueue\Client\Config('enqueue', '.', 'app', 'default', 'default', 'default', 'enqueue.client.default.router_processor', ['dsn' => 'null:', 'factory_service' => 'Shopware\\Core\\Framework\\MessageQueue\\Enqueue\\ConnectionFactoryFactory'], []), \Enqueue\Client\RouteCollection::fromArray([]));
    }

    /*
     * Gets the private 'enqueue.client.default.flush_spool_producer_listener' shared service.
     *
     * @return \Enqueue\Symfony\Client\FlushSpoolProducerListener
     */
    protected function getEnqueue_Client_Default_FlushSpoolProducerListenerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Client/FlushSpoolProducerListener.php';

        return $this->privates['enqueue.client.default.flush_spool_producer_listener'] = new \Enqueue\Symfony\Client\FlushSpoolProducerListener(($this->privates['enqueue.client.default.spool_producer'] ?? $this->getEnqueue_Client_Default_SpoolProducerService()));
    }

    /*
     * Gets the private 'enqueue.client.default.lazy_producer' shared service.
     *
     * @return \Enqueue\Symfony\Client\LazyProducer
     */
    protected function getEnqueue_Client_Default_LazyProducerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/ProducerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Client/LazyProducer.php';

        return $this->privates['enqueue.client.default.lazy_producer'] = new \Enqueue\Symfony\Client\LazyProducer(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'enqueue.client.default.producer' => ['services', 'enqueue.client.default.producer', 'getEnqueue_Client_Default_ProducerService', false],
        ], [
            'enqueue.client.default.producer' => '?',
        ]), 'enqueue.client.default.producer');
    }

    /*
     * Gets the private 'enqueue.client.default.queue_consumer' shared service.
     *
     * @return \Enqueue\Consumption\QueueConsumer
     */
    protected function getEnqueue_Client_Default_QueueConsumerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/QueueConsumerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/QueueConsumer.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/StartExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/PreSubscribeExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/PreConsumeExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/MessageReceivedExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/PostMessageReceivedExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/MessageResultExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/ProcessorExceptionExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/PostConsumeExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/EndExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/InitLoggerExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/ExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/ChainExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/ConsumptionExtension/SetRouterPropertiesExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/ConsumptionExtension/ExclusiveCommandExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/ConsumptionExtension/FlushSpoolProducerExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/Extension/ReplyExtension.php';

        $a = ($this->privates['enqueue.client.default.driver'] ?? $this->getEnqueue_Client_Default_DriverService());

        return $this->privates['enqueue.client.default.queue_consumer'] = new \Enqueue\Consumption\QueueConsumer(($this->privates['enqueue.client.default.context'] ?? $this->getEnqueue_Client_Default_ContextService()), new \Enqueue\Consumption\ChainExtension([0 => new \Enqueue\Client\ConsumptionExtension\SetRouterPropertiesExtension($a), 1 => new \Enqueue\Client\ConsumptionExtension\ExclusiveCommandExtension($a), 2 => ($this->privates['enqueue.consumption.reply_extension'] ?? ($this->privates['enqueue.consumption.reply_extension'] = new \Enqueue\Consumption\Extension\ReplyExtension())), 3 => new \Enqueue\Client\ConsumptionExtension\FlushSpoolProducerExtension(($this->privates['enqueue.client.default.spool_producer'] ?? $this->getEnqueue_Client_Default_SpoolProducerService()))]), [], ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), 1000);
    }

    /*
     * Gets the private 'enqueue.client.default.router_processor' shared service.
     *
     * @return \Enqueue\Client\RouterProcessor
     */
    protected function getEnqueue_Client_Default_RouterProcessorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/queue-interop/queue-interop/src/Processor.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/RouterProcessor.php';

        return $this->privates['enqueue.client.default.router_processor'] = new \Enqueue\Client\RouterProcessor(($this->privates['enqueue.client.default.driver'] ?? $this->getEnqueue_Client_Default_DriverService()));
    }

    /*
     * Gets the private 'enqueue.client.default.spool_producer' shared service.
     *
     * @return \Enqueue\Client\SpoolProducer
     */
    protected function getEnqueue_Client_Default_SpoolProducerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/ProducerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Client/SpoolProducer.php';

        return $this->privates['enqueue.client.default.spool_producer'] = new \Enqueue\Client\SpoolProducer(($this->privates['enqueue.client.default.lazy_producer'] ?? $this->getEnqueue_Client_Default_LazyProducerService()));
    }

    /*
     * Gets the private 'enqueue.client.produce_command' shared service.
     *
     * @return \Enqueue\Symfony\Client\ProduceCommand
     */
    protected function getEnqueue_Client_ProduceCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Client/ProduceCommand.php';

        $this->privates['enqueue.client.produce_command'] = $instance = new \Enqueue\Symfony\Client\ProduceCommand(($this->privates['enqueue.locator'] ?? $this->getEnqueue_LocatorService()), 'default', 'enqueue.client.%s.producer');

        $instance->setName('enqueue:produce');

        return $instance;
    }

    /*
     * Gets the private 'enqueue.client.routes_command' shared service.
     *
     * @return \Enqueue\Symfony\Client\RoutesCommand
     */
    protected function getEnqueue_Client_RoutesCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Client/RoutesCommand.php';

        $this->privates['enqueue.client.routes_command'] = $instance = new \Enqueue\Symfony\Client\RoutesCommand(($this->privates['enqueue.locator'] ?? $this->getEnqueue_LocatorService()), 'default', 'enqueue.client.%s.driver');

        $instance->setName('enqueue:routes');

        return $instance;
    }

    /*
     * Gets the private 'enqueue.client.setup_broker_command' shared service.
     *
     * @return \Enqueue\Symfony\Client\SetupBrokerCommand
     */
    protected function getEnqueue_Client_SetupBrokerCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Client/SetupBrokerCommand.php';

        $this->privates['enqueue.client.setup_broker_command'] = $instance = new \Enqueue\Symfony\Client\SetupBrokerCommand(($this->privates['enqueue.locator'] ?? $this->getEnqueue_LocatorService()), 'default', 'enqueue.client.%s.driver');

        $instance->setName('enqueue:setup-broker');

        return $instance;
    }

    /*
     * Gets the private 'enqueue.locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getEnqueue_LocatorService()
    {
        return $this->privates['enqueue.locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'enqueue.client.default.delegate_processor' => ['privates', 'enqueue.client.default.delegate_processor', 'getEnqueue_Client_Default_DelegateProcessorService', false],
            'enqueue.client.default.driver' => ['privates', 'enqueue.client.default.driver', 'getEnqueue_Client_Default_DriverService', false],
            'enqueue.client.default.producer' => ['privates', 'enqueue.client.default.lazy_producer', 'getEnqueue_Client_Default_LazyProducerService', false],
            'enqueue.client.default.queue_consumer' => ['privates', 'enqueue.client.default.queue_consumer', 'getEnqueue_Client_Default_QueueConsumerService', false],
            'enqueue.transport.default.context' => ['privates', 'enqueue.transport.default.context', 'getEnqueue_Transport_Default_ContextService', false],
            'enqueue.transport.default.processor_registry' => ['privates', 'enqueue.transport.default.processor_registry', 'getEnqueue_Transport_Default_ProcessorRegistryService', false],
            'enqueue.transport.default.queue_consumer' => ['privates', 'enqueue.transport.default.queue_consumer', 'getEnqueue_Transport_Default_QueueConsumerService', false],
        ], [
            'enqueue.client.default.delegate_processor' => '?',
            'enqueue.client.default.driver' => '?',
            'enqueue.client.default.producer' => '?',
            'enqueue.client.default.queue_consumer' => '?',
            'enqueue.transport.default.context' => '?',
            'enqueue.transport.default.processor_registry' => '?',
            'enqueue.transport.default.queue_consumer' => '?',
        ]);
    }

    /*
     * Gets the private 'enqueue.messenger_transport.factory' shared service.
     *
     * @return \Enqueue\MessengerAdapter\QueueInteropTransportFactory
     */
    protected function getEnqueue_MessengerTransport_FactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/sroze/messenger-enqueue-transport/QueueInteropTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/SerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/PhpSerializer.php';

        return new \Enqueue\MessengerAdapter\QueueInteropTransportFactory(($this->privates['messenger.transport.native_php_serializer'] ?? ($this->privates['messenger.transport.native_php_serializer'] = new \Symfony\Component\Messenger\Transport\Serialization\PhpSerializer())), ($this->privates['enqueue.locator'] ?? $this->getEnqueue_LocatorService()), false);
    }

    /*
     * Gets the private 'enqueue.transport.consume_command' shared service.
     *
     * @return \Enqueue\Symfony\Consumption\ConfigurableConsumeCommand
     */
    protected function getEnqueue_Transport_ConsumeCommandService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Consumption/LimitsExtensionsCommandTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Consumption/QueueConsumerOptionsCommandTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Consumption/ChooseLoggerCommandTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/Consumption/ConfigurableConsumeCommand.php';

        $this->privates['enqueue.transport.consume_command'] = $instance = new \Enqueue\Symfony\Consumption\ConfigurableConsumeCommand(($this->privates['enqueue.locator'] ?? $this->getEnqueue_LocatorService()), 'default', 'enqueue.transport.%s.queue_consumer', 'enqueue.transport.%s.processor_registry');

        $instance->setName('enqueue:transport:consume');

        return $instance;
    }

    /*
     * Gets the private 'enqueue.transport.default.connection_factory' shared service.
     *
     * @return \Interop\Queue\ConnectionFactory
     */
    protected function getEnqueue_Transport_Default_ConnectionFactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/queue-interop/queue-interop/src/ConnectionFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/ConnectionFactoryFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Enqueue/ConnectionFactoryFactory.php';

        return $this->privates['enqueue.transport.default.connection_factory'] = (new \Shopware\Core\Framework\MessageQueue\Enqueue\ConnectionFactoryFactory(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())))->create(['dsn' => 'null:']);
    }

    /*
     * Gets the private 'enqueue.transport.default.context' shared service.
     *
     * @return \Interop\Queue\Context
     */
    protected function getEnqueue_Transport_Default_ContextService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/queue-interop/queue-interop/src/Context.php';

        return $this->privates['enqueue.transport.default.context'] = ($this->privates['enqueue.transport.default.connection_factory'] ?? $this->getEnqueue_Transport_Default_ConnectionFactoryService())->createContext();
    }

    /*
     * Gets the private 'enqueue.transport.default.processor_registry' shared service.
     *
     * @return \Enqueue\Symfony\ContainerProcessorRegistry
     */
    protected function getEnqueue_Transport_Default_ProcessorRegistryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/ProcessorRegistryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Symfony/ContainerProcessorRegistry.php';

        return $this->privates['enqueue.transport.default.processor_registry'] = new \Enqueue\Symfony\ContainerProcessorRegistry((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [], []))->withContext('enqueue.transport.default.processor_registry', $this));
    }

    /*
     * Gets the private 'enqueue.transport.default.queue_consumer' shared service.
     *
     * @return \Enqueue\Consumption\QueueConsumer
     */
    protected function getEnqueue_Transport_Default_QueueConsumerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/QueueConsumerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/QueueConsumer.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/StartExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/PreSubscribeExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/PreConsumeExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/MessageReceivedExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/PostMessageReceivedExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/MessageResultExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/ProcessorExceptionExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/PostConsumeExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/EndExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/InitLoggerExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/ExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/ChainExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/Extension/LogExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/enqueue/enqueue/Consumption/Extension/ReplyExtension.php';

        return $this->privates['enqueue.transport.default.queue_consumer'] = new \Enqueue\Consumption\QueueConsumer(($this->privates['enqueue.transport.default.context'] ?? $this->getEnqueue_Transport_Default_ContextService()), new \Enqueue\Consumption\ChainExtension([0 => ($this->privates['enqueue.consumption.reply_extension'] ?? ($this->privates['enqueue.consumption.reply_extension'] = new \Enqueue\Consumption\Extension\ReplyExtension())), 1 => new \Enqueue\Consumption\Extension\LogExtension()]), [], ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService()), 1000);
    }

    /*
     * Gets the private 'esi_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SurrogateListener
     */
    protected function getEsiListenerService()
    {
        return $this->privates['esi_listener'] = new \Symfony\Component\HttpKernel\EventListener\SurrogateListener(($this->privates['esi'] ?? ($this->privates['esi'] = new \Symfony\Component\HttpKernel\HttpCache\Esi())));
    }

    /*
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected function getExceptionListenerService()
    {
        return $this->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()), false, []);
    }

    /*
     * Gets the private 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected function getFragment_ListenerService()
    {
        return $this->privates['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(($this->privates['uri_signer'] ?? ($this->privates['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner($this->getEnv('APP_SECRET')))), '/_fragment');
    }

    /*
     * Gets the private 'fragment.renderer.esi' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer
     */
    protected function getFragment_Renderer_EsiService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/RoutableFragmentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/AbstractSurrogateFragmentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/EsiFragmentRenderer.php';

        $a = ($this->privates['fragment.renderer.inline'] ?? $this->getFragment_Renderer_InlineService());

        if (isset($this->privates['fragment.renderer.esi'])) {
            return $this->privates['fragment.renderer.esi'];
        }

        $this->privates['fragment.renderer.esi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer(($this->privates['esi'] ?? ($this->privates['esi'] = new \Symfony\Component\HttpKernel\HttpCache\Esi())), $a, ($this->privates['uri_signer'] ?? ($this->privates['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner($this->getEnv('APP_SECRET')))));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /*
     * Gets the private 'fragment.renderer.hinclude' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer
     */
    protected function getFragment_Renderer_HincludeService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/RoutableFragmentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/HIncludeFragmentRenderer.php';

        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->privates['fragment.renderer.hinclude'])) {
            return $this->privates['fragment.renderer.hinclude'];
        }

        $this->privates['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer($a, ($this->privates['uri_signer'] ?? ($this->privates['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner($this->getEnv('APP_SECRET')))), NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /*
     * Gets the private 'fragment.renderer.inline' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer
     */
    protected function getFragment_Renderer_InlineService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/RoutableFragmentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/InlineFragmentRenderer.php';

        $a = ($this->services['http_kernel'] ?? $this->getHttpKernelService());

        if (isset($this->privates['fragment.renderer.inline'])) {
            return $this->privates['fragment.renderer.inline'];
        }
        $b = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['fragment.renderer.inline'])) {
            return $this->privates['fragment.renderer.inline'];
        }

        $this->privates['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($a, $b);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /*
     * Gets the private 'framework_extra_bundle.event.is_granted' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener
     */
    protected function getFrameworkExtraBundle_Event_IsGrantedService()
    {
        return $this->privates['framework_extra_bundle.event.is_granted'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener(new \Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter(($this->privates['argument_metadata_factory'] ?? ($this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()))), NULL);
    }

    /*
     * Gets the private 'kernel.bundles' shared service.
     *
     * @return \Iterator
     */
    protected function getKernel_BundlesService()
    {
        return $this->privates['kernel.bundles'] = ($this->services['kernel'] ?? $this->get('kernel', 1))->getBundles();
    }

    /*
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected function getLocaleAwareListenerService()
    {
        return $this->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () {
            yield 0 => ($this->privates['slugger'] ?? ($this->privates['slugger'] = new \Symfony\Component\String\Slugger\AsciiSlugger('en-GB')));
            yield 1 => ($this->privates['translator.default'] ?? $this->getTranslator_DefaultService());
        }, 2), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())));
    }

    /*
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected function getLocaleListenerService()
    {
        return $this->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), 'en-GB', ($this->services['router'] ?? $this->getRouterService()), false, []);
    }

    /*
     * Gets the private 'lock.default.factory' shared service.
     *
     * @return \Symfony\Component\Lock\LockFactory
     */
    protected function getLock_Default_FactoryService()
    {
        $this->privates['lock.default.factory'] = $instance = new \Symfony\Component\Lock\LockFactory(\Symfony\Component\Lock\Store\StoreFactory::createStore('semaphore'));

        $a = new \Symfony\Bridge\Monolog\Logger('lock');
        $a->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $a->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        $instance->setLogger($a);

        return $instance;
    }

    /*
     * Gets the private 'mailer.messenger.message_handler' shared service.
     *
     * @return \Symfony\Component\Mailer\Messenger\MessageHandler
     */
    protected function getMailer_Messenger_MessageHandlerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Messenger/MessageHandler.php';

        $a = ($this->privates['mailer.transports'] ?? $this->getMailer_TransportsService());

        if (isset($this->privates['mailer.messenger.message_handler'])) {
            return $this->privates['mailer.messenger.message_handler'];
        }

        return $this->privates['mailer.messenger.message_handler'] = new \Symfony\Component\Mailer\Messenger\MessageHandler($a);
    }

    /*
     * Gets the private 'mailer.transport_factory.native' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\NativeTransportFactory
     */
    protected function getMailer_TransportFactory_NativeService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/AbstractTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/NativeTransportFactory.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['mailer.transport_factory.native'])) {
            return $this->privates['mailer.transport_factory.native'];
        }

        return $this->privates['mailer.transport_factory.native'] = new \Symfony\Component\Mailer\Transport\NativeTransportFactory($a, NULL, ($this->privates['monolog.logger.mailer'] ?? $this->getMonolog_Logger_MailerService()));
    }

    /*
     * Gets the private 'mailer.transport_factory.null' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\NullTransportFactory
     */
    protected function getMailer_TransportFactory_NullService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/AbstractTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/NullTransportFactory.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['mailer.transport_factory.null'])) {
            return $this->privates['mailer.transport_factory.null'];
        }

        return $this->privates['mailer.transport_factory.null'] = new \Symfony\Component\Mailer\Transport\NullTransportFactory($a, NULL, ($this->privates['monolog.logger.mailer'] ?? $this->getMonolog_Logger_MailerService()));
    }

    /*
     * Gets the private 'mailer.transport_factory.sendmail' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\SendmailTransportFactory
     */
    protected function getMailer_TransportFactory_SendmailService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/AbstractTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/SendmailTransportFactory.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['mailer.transport_factory.sendmail'])) {
            return $this->privates['mailer.transport_factory.sendmail'];
        }

        return $this->privates['mailer.transport_factory.sendmail'] = new \Symfony\Component\Mailer\Transport\SendmailTransportFactory($a, NULL, ($this->privates['monolog.logger.mailer'] ?? $this->getMonolog_Logger_MailerService()));
    }

    /*
     * Gets the private 'mailer.transport_factory.smtp' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\Smtp\EsmtpTransportFactory
     */
    protected function getMailer_TransportFactory_SmtpService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/AbstractTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/Smtp/EsmtpTransportFactory.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['mailer.transport_factory.smtp'])) {
            return $this->privates['mailer.transport_factory.smtp'];
        }

        return $this->privates['mailer.transport_factory.smtp'] = new \Symfony\Component\Mailer\Transport\Smtp\EsmtpTransportFactory($a, NULL, ($this->privates['monolog.logger.mailer'] ?? $this->getMonolog_Logger_MailerService()));
    }

    /*
     * Gets the private 'mailer.transports' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\Transports
     */
    protected function getMailer_TransportsService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/Transports.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailerTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailAttachmentsBuilder.php';

        $a = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());

        if (isset($this->privates['mailer.transports'])) {
            return $this->privates['mailer.transports'];
        }
        $b = ($this->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? $this->getMediaServiceService());

        if (isset($this->privates['mailer.transports'])) {
            return $this->privates['mailer.transports'];
        }
        $c = ($this->services['media.repository'] ?? $this->getMedia_RepositoryService());

        if (isset($this->privates['mailer.transports'])) {
            return $this->privates['mailer.transports'];
        }
        $d = ($this->services['document.repository'] ?? $this->getDocument_RepositoryService());

        if (isset($this->privates['mailer.transports'])) {
            return $this->privates['mailer.transports'];
        }
        $e = ($this->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? $this->getDocumentGeneratorService());

        if (isset($this->privates['mailer.transports'])) {
            return $this->privates['mailer.transports'];
        }
        $f = ($this->privates['Shopware\\Core\\Checkout\\Document\\DocumentService'] ?? $this->getDocumentServiceService());

        if (isset($this->privates['mailer.transports'])) {
            return $this->privates['mailer.transports'];
        }

        return $this->privates['mailer.transports'] = (new \Shopware\Core\Content\Mail\Service\MailerTransportFactory(new RewindableGenerator(function () {
            yield 0 => ($this->privates['mailer.transport_factory.null'] ?? $this->getMailer_TransportFactory_NullService());
            yield 1 => ($this->privates['mailer.transport_factory.sendmail'] ?? $this->getMailer_TransportFactory_SendmailService());
            yield 2 => ($this->privates['mailer.transport_factory.native'] ?? $this->getMailer_TransportFactory_NativeService());
            yield 3 => ($this->privates['mailer.transport_factory.smtp'] ?? $this->getMailer_TransportFactory_SmtpService());
        }, 4), $a, new \Shopware\Core\Content\Mail\Service\MailAttachmentsBuilder($b, $c, $d, $e, $f, ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), ($this->services['shopware.filesystem.public'] ?? $this->getShopware_Filesystem_PublicService()), $d))->fromStrings(['main' => $this->getEnv('MAILER_URL')]);
    }

    /*
     * Gets the private 'messenger.bus.shopware.middleware.handle_message' shared service.
     *
     * @return \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware
     */
    protected function getMessenger_Bus_Shopware_Middleware_HandleMessageService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlersLocatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlersLocator.php';

        $this->privates['messenger.bus.shopware.middleware.handle_message'] = $instance = new \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware(new \Symfony\Component\Messenger\Handler\HandlersLocator(['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.h1gRAD1'] ?? $this->get_Messenger_HandlerDescriptor_H1gRAD1Service());
        }, 1), 'Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.aM76mVQ'] ?? $this->get_Messenger_HandlerDescriptor_AM76mVQService());
        }, 1), 'Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFolders' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.goUFZIo'] ?? $this->get_Messenger_HandlerDescriptor_GoUFZIoService());
        }, 1), 'Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.6a6vTR.'] ?? $this->get_Messenger_HandlerDescriptor_6a6vTR_Service());
        }, 1), 'Shopware\\Core\\Content\\Media\\Message\\UpdateThumbnailsMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.88lOdtC'] ?? $this->get_Messenger_HandlerDescriptor_88lOdtCService());
        }, 1), 'Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.vN2QjSm'] ?? $this->get_Messenger_HandlerDescriptor_VN2QjSmService());
        }, 1), 'Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.bD1J5H6'] ?? $this->get_Messenger_HandlerDescriptor_BD1J5H6Service());
        }, 1), 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexingMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.2yo6BZJ'] ?? $this->get_Messenger_HandlerDescriptor_2yo6BZJService());
        }, 1), 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\MessageQueue\\IterateEntityIndexerMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.hq66vfV'] ?? $this->get_Messenger_HandlerDescriptor_Hq66vfVService());
        }, 1), 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.n5_pcyU'] ?? $this->get_Messenger_HandlerDescriptor_N5PcyUService());
        }, 1), 'Shopware\\Core\\Framework\\MessageQueue\\Message\\EncryptedMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.W5d8anj'] ?? $this->get_Messenger_HandlerDescriptor_W5d8anjService());
        }, 1), 'Shopware\\Core\\Framework\\MessageQueue\\Message\\RetryMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.rvKU_JQ'] ?? $this->get_Messenger_HandlerDescriptor_RvKUJQService());
        }, 1), 'Shopware\\Core\\Framework\\MessageQueue\\Message\\SleepMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.6XWr01B'] ?? $this->get_Messenger_HandlerDescriptor_6XWr01BService());
        }, 1), 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\RequeueDeadMessagesTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.BzkW.st'] ?? $this->get_Messenger_HandlerDescriptor_BzkW_StService());
        }, 1), 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.dVP21hY'] ?? $this->get_Messenger_HandlerDescriptor_DVP21hYService());
        }, 1), 'Shopware\\Core\\Framework\\Webhook\\Message\\WebhookEventMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.Z5qzcmD'] ?? $this->get_Messenger_HandlerDescriptor_Z5qzcmDService());
        }, 1), 'Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor._mx1WXF'] ?? $this->get_Messenger_HandlerDescriptor_Mx1WXFService());
        }, 1), 'Shopware\\Core\\Content\\Media\\Message\\DeleteFileMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.TaMu3bd'] ?? $this->get_Messenger_HandlerDescriptor_TaMu3bdService());
        }, 1), 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.vhvNn_P'] ?? $this->get_Messenger_HandlerDescriptor_VhvNnPService());
        }, 1), 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.wUKKx8c'] ?? $this->get_Messenger_HandlerDescriptor_WUKKx8cService());
        }, 1), 'Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.6kBcctU'] ?? $this->get_Messenger_HandlerDescriptor_6kBcctUService());
        }, 1), 'Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.zfOhFjq'] ?? $this->get_Messenger_HandlerDescriptor_ZfOhFjqService());
        }, 1), 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.wYSIMNj'] ?? $this->get_Messenger_HandlerDescriptor_WYSIMNjService());
        }, 1), 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGeneration' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.4htA3jl'] ?? $this->get_Messenger_HandlerDescriptor_4htA3jlService());
        }, 1), 'Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.Sx4TzkJ'] ?? $this->get_Messenger_HandlerDescriptor_Sx4TzkJService());
        }, 1), 'Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.3.rzR14'] ?? $this->get_Messenger_HandlerDescriptor_3_RzR14Service());
        }, 1), 'Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.yKXilMm'] ?? $this->get_Messenger_HandlerDescriptor_YKXilMmService());
        }, 1), 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.RWDR7vF'] ?? $this->get_Messenger_HandlerDescriptor_RWDR7vFService());
        }, 1), 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.z290ooz'] ?? $this->get_Messenger_HandlerDescriptor_Z290oozService());
        }, 1), 'Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.D8Msq11'] ?? $this->get_Messenger_HandlerDescriptor_D8Msq11Service());
        }, 1), 'Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\WarmUpMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.9FtfQXI'] ?? $this->get_Messenger_HandlerDescriptor_9FtfQXIService());
        }, 1), 'Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTask' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.RaXVyBY'] ?? $this->get_Messenger_HandlerDescriptor_RaXVyBYService());
        }, 1), 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexingMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.9zA2HRZ'] ?? $this->get_Messenger_HandlerDescriptor_9zA2HRZService());
        }, 1), 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchLanguageIndexIteratorMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.ZFmY.qW'] ?? $this->get_Messenger_HandlerDescriptor_ZFmY_QWService());
        }, 1), 'Shopware\\Elasticsearch\\Admin\\AdminSearchIndexingMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.blq.UUc'] ?? $this->get_Messenger_HandlerDescriptor_Blq_UUcService());
        }, 1), 'Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage' => new RewindableGenerator(function () {
            yield 0 => ($this->privates['.messenger.handler_descriptor.g5T3Vdz'] ?? $this->get_Messenger_HandlerDescriptor_G5T3VdzService());
        }, 1)]));

        $instance->setLogger(($this->privates['monolog.logger.messenger'] ?? $this->getMonolog_Logger_MessengerService()));

        return $instance;
    }

    /*
     * Gets the private 'messenger.listener.stop_worker_on_restart_signal_listener' shared service.
     *
     * @return \Symfony\Component\Messenger\EventListener\StopWorkerOnRestartSignalListener
     */
    protected function getMessenger_Listener_StopWorkerOnRestartSignalListenerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/StopWorkerOnRestartSignalListener.php';

        return $this->privates['messenger.listener.stop_worker_on_restart_signal_listener'] = new \Symfony\Component\Messenger\EventListener\StopWorkerOnRestartSignalListener(($this->privates['cache.messenger.restart_workers_signal'] ?? $this->getCache_Messenger_RestartWorkersSignalService()), ($this->privates['monolog.logger.messenger'] ?? $this->getMonolog_Logger_MessengerService()));
    }

    /*
     * Gets the private 'messenger.middleware.send_message' shared service.
     *
     * @return \Symfony\Component\Messenger\Middleware\SendMessageMiddleware
     */
    protected function getMessenger_Middleware_SendMessageService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SendersLocatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/DefaultSenderLocator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SendersLocator.php';

        $a = ($this->privates['.service_locator.ltYzMMM'] ?? $this->get_ServiceLocator_LtYzMMMService());

        if (isset($this->privates['messenger.middleware.send_message'])) {
            return $this->privates['messenger.middleware.send_message'];
        }
        $b = ($this->privates['messenger.transport.default'] ?? $this->getMessenger_Transport_DefaultService());

        if (isset($this->privates['messenger.middleware.send_message'])) {
            return $this->privates['messenger.middleware.send_message'];
        }
        $c = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['messenger.middleware.send_message'])) {
            return $this->privates['messenger.middleware.send_message'];
        }

        $this->privates['messenger.middleware.send_message'] = $instance = new \Symfony\Component\Messenger\Middleware\SendMessageMiddleware(new \Shopware\Core\Framework\MessageQueue\DefaultSenderLocator(new \Symfony\Component\Messenger\Transport\Sender\SendersLocator([], $a), $b, 'default'), $c);

        $instance->setLogger(($this->privates['monolog.logger.messenger'] ?? $this->getMonolog_Logger_MessengerService()));

        return $instance;
    }

    /*
     * Gets the private 'messenger.receiver_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getMessenger_ReceiverLocatorService()
    {
        return $this->privates['messenger.receiver_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'default' => ['privates', 'messenger.transport.default', 'getMessenger_Transport_DefaultService', false],
            'messenger.transport.default' => ['privates', 'messenger.transport.default', 'getMessenger_Transport_DefaultService', false],
        ], [
            'default' => '?',
            'messenger.transport.default' => '?',
        ]);
    }

    /*
     * Gets the private 'messenger.retry.multiplier_retry_strategy.default' shared service.
     *
     * @return \Symfony\Component\Messenger\Retry\MultiplierRetryStrategy
     */
    protected function getMessenger_Retry_MultiplierRetryStrategy_DefaultService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Retry/RetryStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Retry/MultiplierRetryStrategy.php';

        return $this->privates['messenger.retry.multiplier_retry_strategy.default'] = new \Symfony\Component\Messenger\Retry\MultiplierRetryStrategy(3, 1000, 2, 0);
    }

    /*
     * Gets the private 'messenger.retry.send_failed_message_for_retry_listener' shared service.
     *
     * @return \Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener
     */
    protected function getMessenger_Retry_SendFailedMessageForRetryListenerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/SendFailedMessageForRetryListener.php';

        $a = ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());

        if (isset($this->privates['messenger.retry.send_failed_message_for_retry_listener'])) {
            return $this->privates['messenger.retry.send_failed_message_for_retry_listener'];
        }

        return $this->privates['messenger.retry.send_failed_message_for_retry_listener'] = new \Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener(($this->privates['.service_locator.ltYzMMM'] ?? $this->get_ServiceLocator_LtYzMMMService()), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'default' => ['privates', 'messenger.retry.multiplier_retry_strategy.default', 'getMessenger_Retry_MultiplierRetryStrategy_DefaultService', false],
        ], [
            'default' => '?',
        ]), ($this->privates['monolog.logger.messenger'] ?? $this->getMonolog_Logger_MessengerService()), $a);
    }

    /*
     * Gets the private 'messenger.routable_message_bus' shared service.
     *
     * @return \Symfony\Component\Messenger\RoutableMessageBus
     */
    protected function getMessenger_RoutableMessageBusService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/RoutableMessageBus.php';

        $a = ($this->services['messenger.default_bus'] ?? $this->getMessenger_DefaultBusService());

        if (isset($this->privates['messenger.routable_message_bus'])) {
            return $this->privates['messenger.routable_message_bus'];
        }

        return $this->privates['messenger.routable_message_bus'] = new \Symfony\Component\Messenger\RoutableMessageBus(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'messenger.bus.shopware' => ['services', 'messenger.default_bus', 'getMessenger_DefaultBusService', false],
        ], [
            'messenger.bus.shopware' => '?',
        ]), $a);
    }

    /*
     * Gets the private 'messenger.transport.default' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\TransportInterface
     */
    protected function getMessenger_Transport_DefaultService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Receiver/ReceiverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SenderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/SerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/PhpSerializer.php';

        return $this->privates['messenger.transport.default'] = (new \Symfony\Component\Messenger\Transport\TransportFactory(new RewindableGenerator(function () {
            yield 0 => (new \Symfony\Component\Messenger\Bridge\Amqp\Transport\AmqpTransportFactory());
            yield 1 => (new \Symfony\Component\Messenger\Bridge\Redis\Transport\RedisTransportFactory());
            yield 2 => ($this->privates['messenger.transport.sync.factory'] ?? $this->getMessenger_Transport_Sync_FactoryService());
            yield 3 => ($this->privates['messenger.transport.in_memory.factory'] ?? ($this->privates['messenger.transport.in_memory.factory'] = new \Symfony\Component\Messenger\Transport\InMemoryTransportFactory()));
            yield 4 => $this->getEnqueue_MessengerTransport_FactoryService();
        }, 5)))->createTransport($this->getEnv('MESSENGER_TRANSPORT_DSN'), ['transport_name' => 'default'], ($this->privates['messenger.transport.native_php_serializer'] ?? ($this->privates['messenger.transport.native_php_serializer'] = new \Symfony\Component\Messenger\Transport\Serialization\PhpSerializer())));
    }

    /*
     * Gets the private 'messenger.transport.sync.factory' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory
     */
    protected function getMessenger_Transport_Sync_FactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sync/SyncTransportFactory.php';

        $a = ($this->privates['messenger.routable_message_bus'] ?? $this->getMessenger_RoutableMessageBusService());

        if (isset($this->privates['messenger.transport.sync.factory'])) {
            return $this->privates['messenger.transport.sync.factory'];
        }

        return $this->privates['messenger.transport.sync.factory'] = new \Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory($a);
    }

    /*
     * Gets the private 'mime_types' shared service.
     *
     * @return \Symfony\Component\Mime\MimeTypes
     */
    protected function getMimeTypesService()
    {
        $this->privates['mime_types'] = $instance = new \Symfony\Component\Mime\MimeTypes();

        $instance->setDefault($instance);

        return $instance;
    }

    /*
     * Gets the private 'monolog.handler.business_event_handler_buffer' shared service.
     *
     * @return \Monolog\Handler\BufferHandler
     */
    protected function getMonolog_Handler_BusinessEventHandlerBufferService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/Monolog/DoctrineSQLHandler.php';

        return $this->privates['monolog.handler.business_event_handler_buffer'] = new \Monolog\Handler\BufferHandler(new \Shopware\Core\Framework\Log\Monolog\DoctrineSQLHandler(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService())), 0, 100, true, false);
    }

    /*
     * Gets the private 'monolog.handler.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        return $this->privates['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, true, [], []);
    }

    /*
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_LoggerService()
    {
        $this->privates['monolog.logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.cache' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_CacheService()
    {
        $this->privates['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.mailer' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_MailerService()
    {
        $this->privates['monolog.logger.mailer'] = $instance = new \Symfony\Bridge\Monolog\Logger('mailer');

        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.messenger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_MessengerService()
    {
        $this->privates['monolog.logger.messenger'] = $instance = new \Symfony\Bridge\Monolog\Logger('messenger');

        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.request' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->privates['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $instance->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        return $instance;
    }

    /*
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected function getParameterBagService()
    {
        return $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this);
    }

    /*
     * Gets the private 'property_info.cache' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoCacheExtractor
     */
    protected function getPropertyInfo_CacheService()
    {
        return $this->privates['property_info.cache'] = new \Symfony\Component\PropertyInfo\PropertyInfoCacheExtractor(new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () {
            yield 0 => ($this->privates['property_info.serializer_extractor'] ?? $this->getPropertyInfo_SerializerExtractorService());
            yield 1 => ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));
        }, 2), new RewindableGenerator(function () {
            yield 0 => ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));
        }, 1), new RewindableGenerator(function () {
            return new \EmptyIterator();
        }, 0), new RewindableGenerator(function () {
            yield 0 => ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));
        }, 1), new RewindableGenerator(function () {
            yield 0 => ($this->privates['property_info.reflection_extractor'] ?? ($this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor()));
        }, 1)), ($this->privates['cache.property_info'] ?? $this->getCache_PropertyInfoService()));
    }

    /*
     * Gets the private 'property_info.serializer_extractor' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\Extractor\SerializerExtractor
     */
    protected function getPropertyInfo_SerializerExtractorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/Extractor/SerializerExtractor.php';

        return $this->privates['property_info.serializer_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\SerializerExtractor(($this->privates['serializer.mapping.cache_class_metadata_factory'] ?? $this->getSerializer_Mapping_CacheClassMetadataFactoryService()));
    }

    /*
     * Gets the private 'router.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer
     */
    protected function getRouter_CacheWarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/RouterCacheWarmer.php';

        return $this->privates['router.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'router' => ['services', 'router', 'getRouterService', false],
        ], [
            'router' => '?',
        ]))->withContext('router.cache_warmer', $this));
    }

    /*
     * Gets the private 'router.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected function getRouter_DefaultService()
    {
        $a = new \Symfony\Bridge\Monolog\Logger('router');
        $a->pushHandler(($this->privates['monolog.handler.console'] ?? $this->getMonolog_Handler_ConsoleService()));
        $a->pushHandler(($this->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? $this->getExcludeFlowEventHandlerService()));

        $this->privates['router.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', false],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $this), 'kernel::loadRoutes', ['cache_dir' => $this->targetDir.'', 'debug' => false, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => NULL, 'resource_type' => 'service'], ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()), ($this->privates['parameter_bag'] ?? ($this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this))), $a, 'en-GB');

        $instance->setConfigCacheFactory(($this->privates['config_cache_factory'] ?? ($this->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory())));

        return $instance;
    }

    /*
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getRouter_RequestContextService()
    {
        return $this->privates['router.request_context'] = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);
    }

    /*
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected function getRouterListenerService()
    {
        return $this->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($this->services['router'] ?? $this->getRouterService()), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService()), ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService()), \dirname(__DIR__, 4), false);
    }

    /*
     * Gets the private 'secrets.vault' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault
     */
    protected function getSecrets_VaultService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/EnvVarLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/SodiumVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/polyfill-php80/Resources/stubs/Stringable.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/string/LazyString.php';

        return $this->privates['secrets.vault'] = new \Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault((\dirname(__DIR__, 4).'/config/secrets/'.$this->getEnv('string:default:kernel.environment:APP_RUNTIME_ENV')), \Symfony\Component\String\LazyString::fromCallable(\Closure::fromCallable([0 => $this, 1 => 'getEnv']), 'base64:default::SYMFONY_DECRYPTION_SECRET'));
    }

    /*
     * Gets the private 'sensio_framework_extra.controller.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->privates['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()));
    }

    /*
     * Gets the private 'sensio_framework_extra.converter.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        $a = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();
        $a->add(new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter(NULL, NULL), 0, 'doctrine.orm');
        $a->add(new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter(), 0, 'datetime');

        return $this->privates['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener($a, true);
    }

    /*
     * Gets the private 'sensio_framework_extra.view.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        $this->privates['sensio_framework_extra.view.listener'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener(new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(($this->services['kernel'] ?? $this->get('kernel', 1))));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'twig' => ['services', '.container.private.twig', 'get_Container_Private_TwigService', false],
        ], [
            'twig' => '?',
        ]))->withContext('sensio_framework_extra.view.listener', $this));

        return $instance;
    }

    /*
     * Gets the private 'serializer.mapping.cache_class_metadata_factory' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\CacheClassMetadataFactory
     */
    protected function getSerializer_Mapping_CacheClassMetadataFactoryService()
    {
        return $this->privates['serializer.mapping.cache_class_metadata_factory'] = new \Symfony\Component\Serializer\Mapping\Factory\CacheClassMetadataFactory(new \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory(new \Symfony\Component\Serializer\Mapping\Loader\LoaderChain([0 => new \Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()))])), \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($this->targetDir.''.'/serialization.php'), ($this->privates['cache.serializer'] ?? $this->getCache_SerializerService())));
    }

    /*
     * Gets the private 'serializer.mapping.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer
     */
    protected function getSerializer_Mapping_CacheWarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/AbstractPhpFileCacheWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/SerializerCacheWarmer.php';

        return $this->privates['serializer.mapping.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer([0 => new \Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()))], ($this->targetDir.''.'/serialization.php'));
    }

    /*
     * Gets the private 'session.factory' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\SessionFactory
     */
    protected function getSession_FactoryService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionFactory.php';

        $a = ($this->privates['session_listener'] ?? $this->getSessionListenerService());

        if (isset($this->privates['session.factory'])) {
            return $this->privates['session.factory'];
        }

        return $this->privates['session.factory'] = new \Symfony\Component\HttpFoundation\Session\SessionFactory(($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['session.storage.factory.native'] ?? $this->getSession_Storage_Factory_NativeService()), [0 => $a, 1 => 'onSessionUsage']);
    }

    /*
     * Gets the private 'session.storage.factory.native' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorageFactory
     */
    protected function getSession_Storage_Factory_NativeService()
    {
        return $this->privates['session.storage.factory.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorageFactory($this->parameters['session.storage.options'], NULL, new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', 0), true);
    }

    /*
     * Gets the private 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected function getSessionListenerService()
    {
        return $this->privates['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'initialized_session' => ['services', '.container.private.session', NULL, false],
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'session' => ['services', '.container.private.session', 'get_Container_Private_SessionService', false],
            'session_factory' => ['privates', 'session.factory', 'getSession_FactoryService', false],
        ], [
            'initialized_session' => '?',
            'logger' => '?',
            'session' => '?',
            'session_factory' => '?',
        ]), false, $this->parameters['session.storage.options']);
    }

    /*
     * Gets the private 'shopware.api.authorization_server' shared service.
     *
     * @return \League\OAuth2\Server\AuthorizationServer
     */
    protected function getShopware_Api_AuthorizationServerService()
    {
        $a = ($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService());

        return $this->privates['shopware.api.authorization_server'] = new \League\OAuth2\Server\AuthorizationServer(new \Shopware\Core\Framework\Api\OAuth\ClientRepository($a), ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\AccessTokenRepository'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\AccessTokenRepository'] = new \Shopware\Core\Framework\Api\OAuth\AccessTokenRepository())), new \Shopware\Core\Framework\Api\OAuth\ScopeRepository(new RewindableGenerator(function () {
            yield 0 => ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\WriteScope'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\WriteScope'] = new \Shopware\Core\Framework\Api\OAuth\Scope\WriteScope()));
            yield 1 => ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\AdminScope'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\AdminScope'] = new \Shopware\Core\Framework\Api\OAuth\Scope\AdminScope()));
            yield 2 => ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\UserVerifiedScope'] ?? ($this->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\UserVerifiedScope'] = new \Shopware\Core\Framework\Api\OAuth\Scope\UserVerifiedScope()));
        }, 3), $a), ($this->privates['shopware.private_key'] ?? ($this->privates['shopware.private_key'] = new \League\OAuth2\Server\CryptKey((\dirname(__DIR__, 4).'/config/jwt/private.pem'), $this->getEnv('string:default:jwt_private_key_passphrase_default:JWT_PRIVATE_KEY_PASSPHRASE')))), $this->getEnv('APP_SECRET'));
    }

    /*
     * Gets the private 'shopware.app_system.guzzle' shared service.
     *
     * @return \GuzzleHttp\Client
     */
    protected function getShopware_AppSystem_GuzzleService($lazyLoad = true)
    {
        if ($lazyLoad) {
            return $this->privates['shopware.app_system.guzzle'] = $this->createProxy('Client_b190fb5', function () {
                return \Client_b190fb5::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getShopware_AppSystem_GuzzleService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        include_once \dirname(__DIR__, 4).'/vendor/guzzlehttp/guzzle/src/HandlerStack.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Hmac/Guzzle/AuthMiddleware.php';

        $a = \GuzzleHttp\HandlerStack::create();
        $a->push(new \Shopware\Core\Framework\App\Hmac\Guzzle\AuthMiddleware('6.4.20.0', ($this->services['Shopware\\Core\\Framework\\App\\AppLocaleProvider'] ?? $this->getAppLocaleProviderService())));

        return new \GuzzleHttp\Client(['timeout' => 5, 'connect_timeout' => 1, 'handler' => $a]);
    }

    /*
     * Gets the private 'shopware.asset.asset' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage
     */
    protected function getShopware_Asset_AssetService()
    {
        return $this->privates['shopware.asset.asset'] = new \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage([0 => ''], ($this->privates['shopware.asset.asset.version_strategy'] ?? $this->getShopware_Asset_Asset_VersionStrategyService()));
    }

    /*
     * Gets the private 'shopware.asset.asset.version_strategy' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FlysystemLastModifiedVersionStrategy
     */
    protected function getShopware_Asset_Asset_VersionStrategyService()
    {
        return $this->privates['shopware.asset.asset.version_strategy'] = new \Shopware\Core\Framework\Adapter\Asset\FlysystemLastModifiedVersionStrategy('asset-metaData', ($this->services['shopware.filesystem.asset'] ?? $this->getShopware_Filesystem_AssetService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService()));
    }

    /*
     * Gets the private 'shopware.asset.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage
     */
    protected function getShopware_Asset_PublicService()
    {
        return $this->privates['shopware.asset.public'] = new \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage([0 => ''], ($this->privates['assets.empty_version_strategy'] ?? ($this->privates['assets.empty_version_strategy'] = new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy())));
    }

    /*
     * Gets the private 'shopware.asset.sitemap' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage
     */
    protected function getShopware_Asset_SitemapService()
    {
        return $this->privates['shopware.asset.sitemap'] = new \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage([0 => ''], ($this->privates['assets.empty_version_strategy'] ?? ($this->privates['assets.empty_version_strategy'] = new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy())));
    }

    /*
     * Gets the private 'shopware.asset.theme' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeAssetPackage
     */
    protected function getShopware_Asset_ThemeService()
    {
        return $this->privates['shopware.asset.theme'] = new \Shopware\Storefront\Theme\ThemeAssetPackage([0 => ''], new \Shopware\Core\Framework\Adapter\Asset\FlysystemLastModifiedVersionStrategy('theme-metaData', ($this->services['shopware.filesystem.theme'] ?? $this->getShopware_Filesystem_ThemeService()), ($this->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? $this->getCacheDecoratorService())), ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack())), ($this->privates['Shopware\\Storefront\\Theme\\MD5ThemePathBuilder'] ?? ($this->privates['Shopware\\Storefront\\Theme\\MD5ThemePathBuilder'] = new \Shopware\Storefront\Theme\MD5ThemePathBuilder())));
    }

    /*
     * Gets the private 'shopware.elasticsearch.logger' shared service.
     *
     * @return \Psr\Log\LoggerInterface
     */
    protected function getShopware_Elasticsearch_LoggerService()
    {
        return $this->privates['shopware.elasticsearch.logger'] = (new \Shopware\Core\Framework\Log\LoggerFactory((\dirname(__DIR__, 3).'/log/%s_prod.log'), 14))->createRotating('elasticsearch', 90, 400);
    }

    /*
     * Gets the private 'shopware.increment.message_queue.gateway.mysql' shared service.
     *
     * @return \Shopware\Core\Framework\Increment\MySQLIncrementer
     */
    protected function getShopware_Increment_MessageQueue_Gateway_MysqlService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/AbstractIncrementer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/MySQLIncrementer.php';

        $this->privates['shopware.increment.message_queue.gateway.mysql'] = $instance = new \Shopware\Core\Framework\Increment\MySQLIncrementer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));

        $instance->setPool('message_queue');
        $instance->setConfig([]);

        return $instance;
    }

    /*
     * Gets the private 'shopware.increment.user_activity.gateway.mysql' shared service.
     *
     * @return \Shopware\Core\Framework\Increment\MySQLIncrementer
     */
    protected function getShopware_Increment_UserActivity_Gateway_MysqlService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/AbstractIncrementer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/MySQLIncrementer.php';

        $this->privates['shopware.increment.user_activity.gateway.mysql'] = $instance = new \Shopware\Core\Framework\Increment\MySQLIncrementer(($this->services['Doctrine\\DBAL\\Connection'] ?? $this->getConnectionService()));

        $instance->setPool('user_activity');
        $instance->setConfig([]);

        return $instance;
    }

    /*
     * Gets the private 'shopware.jwt_config' shared service.
     *
     * @return \Lcobucci\JWT\Configuration
     */
    protected function getShopware_JwtConfigService()
    {
        return $this->privates['shopware.jwt_config'] = \Shopware\Core\Checkout\Payment\Cart\Token\JWTConfigurationFactory::createJWTConfiguration(new \Lcobucci\JWT\Signer\Rsa\Sha256(), ($this->privates['shopware.private_key'] ?? ($this->privates['shopware.private_key'] = new \League\OAuth2\Server\CryptKey((\dirname(__DIR__, 4).'/config/jwt/private.pem'), $this->getEnv('string:default:jwt_private_key_passphrase_default:JWT_PRIVATE_KEY_PASSPHRASE')))), ($this->privates['shopware.public_key'] ?? ($this->privates['shopware.public_key'] = new \League\OAuth2\Server\CryptKey((\dirname(__DIR__, 4).'/config/jwt/public.pem')))));
    }

    /*
     * Gets the private 'shopware.rate_limiter' shared service.
     *
     * @return \Shopware\Core\Framework\RateLimiter\RateLimiter
     */
    protected function getShopware_RateLimiterService()
    {
        $this->privates['shopware.rate_limiter'] = $instance = new \Shopware\Core\Framework\RateLimiter\RateLimiter();

        $a = ($this->privates['cache.rate_limiter'] ?? $this->getCache_RateLimiterService());
        $b = ($this->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? $this->getSystemConfigServiceService());
        $c = ($this->privates['lock.default.factory'] ?? $this->getLock_Default_FactoryService());

        $instance->registerLimiterFactory('login', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'login'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('guest_login', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'guest_login'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('oauth', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'oauth'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('reset_password', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'reset_password'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('user_recovery', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'user_recovery'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('contact_form', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'contact_form'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('notification', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'notification'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('newsletter_form', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'newsletter_form'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('cart_add_line_item', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'system_config', 'reset' => '1 hours', 'limits' => $this->parameters['shopware.api.rate_limiter.cart_add_line_item.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'cart_add_line_item'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));

        return $instance;
    }

    /*
     * Gets the private 'slugify' shared service.
     *
     * @return \Cocur\Slugify\Slugify
     */
    protected function getSlugifyService()
    {
        return $this->privates['slugify'] = new \Cocur\Slugify\Slugify($this->parameters['shopware.slug.config']);
    }

    /*
     * Gets the private 'translation.extractor' shared service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor
     */
    protected function getTranslation_ExtractorService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Extractor/ExtractorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Extractor/ChainExtractor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Extractor/AbstractFileExtractor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Extractor/PhpExtractor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Translation/TwigExtractor.php';

        $this->privates['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', new \Symfony\Component\Translation\Extractor\PhpExtractor());
        $instance->addExtractor('twig', new \Symfony\Bridge\Twig\Translation\TwigExtractor(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService())));

        return $instance;
    }

    /*
     * Gets the private 'translation.loader.csv' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader
     */
    protected function getTranslation_Loader_CsvService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/CsvFileLoader.php';

        return $this->privates['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /*
     * Gets the private 'translation.loader.dat' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader
     */
    protected function getTranslation_Loader_DatService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuResFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuDatFileLoader.php';

        return $this->privates['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /*
     * Gets the private 'translation.loader.ini' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader
     */
    protected function getTranslation_Loader_IniService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IniFileLoader.php';

        return $this->privates['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /*
     * Gets the private 'translation.loader.json' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader
     */
    protected function getTranslation_Loader_JsonService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/JsonFileLoader.php';

        return $this->privates['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /*
     * Gets the private 'translation.loader.mo' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader
     */
    protected function getTranslation_Loader_MoService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/MoFileLoader.php';

        return $this->privates['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /*
     * Gets the private 'translation.loader.php' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader
     */
    protected function getTranslation_Loader_PhpService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/PhpFileLoader.php';

        return $this->privates['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /*
     * Gets the private 'translation.loader.po' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader
     */
    protected function getTranslation_Loader_PoService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/PoFileLoader.php';

        return $this->privates['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /*
     * Gets the private 'translation.loader.qt' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader
     */
    protected function getTranslation_Loader_QtService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/QtFileLoader.php';

        return $this->privates['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /*
     * Gets the private 'translation.loader.res' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader
     */
    protected function getTranslation_Loader_ResService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuResFileLoader.php';

        return $this->privates['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /*
     * Gets the private 'translation.loader.xliff' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader
     */
    protected function getTranslation_Loader_XliffService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/XliffFileLoader.php';

        return $this->privates['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /*
     * Gets the private 'translation.loader.yml' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader
     */
    protected function getTranslation_Loader_YmlService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/YamlFileLoader.php';

        return $this->privates['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /*
     * Gets the private 'translation.provider_collection' shared service.
     *
     * @return \Symfony\Component\Translation\Provider\TranslationProviderCollection
     */
    protected function getTranslation_ProviderCollectionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Provider/TranslationProviderCollection.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Provider/TranslationProviderCollectionFactory.php';

        return $this->privates['translation.provider_collection'] = (new \Symfony\Component\Translation\Provider\TranslationProviderCollectionFactory(new RewindableGenerator(function () {
            yield 0 => (new \Symfony\Component\Translation\Provider\NullProviderFactory());
        }, 1), []))->fromConfig([]);
    }

    /*
     * Gets the private 'translation.reader' shared service.
     *
     * @return \Symfony\Component\Translation\Reader\TranslationReader
     */
    protected function getTranslation_ReaderService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Reader/TranslationReaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Reader/TranslationReader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/PhpFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/YamlFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/XliffFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/PoFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/MoFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/QtFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/CsvFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuResFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuDatFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IniFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/JsonFileLoader.php';

        $this->privates['translation.reader'] = $instance = new \Symfony\Component\Translation\Reader\TranslationReader();

        $a = ($this->privates['translation.loader.yml'] ?? ($this->privates['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader()));
        $b = ($this->privates['translation.loader.xliff'] ?? ($this->privates['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader()));

        $instance->addLoader('php', ($this->privates['translation.loader.php'] ?? ($this->privates['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader())));
        $instance->addLoader('yaml', $a);
        $instance->addLoader('yml', $a);
        $instance->addLoader('xlf', $b);
        $instance->addLoader('xliff', $b);
        $instance->addLoader('po', ($this->privates['translation.loader.po'] ?? ($this->privates['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader())));
        $instance->addLoader('mo', ($this->privates['translation.loader.mo'] ?? ($this->privates['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader())));
        $instance->addLoader('ts', ($this->privates['translation.loader.qt'] ?? ($this->privates['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader())));
        $instance->addLoader('csv', ($this->privates['translation.loader.csv'] ?? ($this->privates['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader())));
        $instance->addLoader('res', ($this->privates['translation.loader.res'] ?? ($this->privates['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader())));
        $instance->addLoader('dat', ($this->privates['translation.loader.dat'] ?? ($this->privates['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader())));
        $instance->addLoader('ini', ($this->privates['translation.loader.ini'] ?? ($this->privates['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader())));
        $instance->addLoader('json', ($this->privates['translation.loader.json'] ?? ($this->privates['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader())));

        return $instance;
    }

    /*
     * Gets the private 'translation.warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer
     */
    protected function getTranslation_WarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/TranslationsCacheWarmer.php';

        return $this->privates['translation.warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'translator' => ['services', 'translator', 'getTranslatorService', false],
        ], [
            'translator' => '?',
        ]))->withContext('translation.warmer', $this));
    }

    /*
     * Gets the private 'translation.writer' shared service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter
     */
    protected function getTranslation_WriterService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Writer/TranslationWriterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Writer/TranslationWriter.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/DumperInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/FileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/PhpFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/XliffFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/PoFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/MoFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/YamlFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/QtFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/CsvFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/IniFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/JsonFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/IcuResFileDumper.php';

        $this->privates['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', new \Symfony\Component\Translation\Dumper\PhpFileDumper());
        $instance->addDumper('xlf', new \Symfony\Component\Translation\Dumper\XliffFileDumper());
        $instance->addDumper('po', new \Symfony\Component\Translation\Dumper\PoFileDumper());
        $instance->addDumper('mo', new \Symfony\Component\Translation\Dumper\MoFileDumper());
        $instance->addDumper('yml', new \Symfony\Component\Translation\Dumper\YamlFileDumper());
        $instance->addDumper('yaml', new \Symfony\Component\Translation\Dumper\YamlFileDumper('yaml'));
        $instance->addDumper('ts', new \Symfony\Component\Translation\Dumper\QtFileDumper());
        $instance->addDumper('csv', new \Symfony\Component\Translation\Dumper\CsvFileDumper());
        $instance->addDumper('ini', new \Symfony\Component\Translation\Dumper\IniFileDumper());
        $instance->addDumper('json', new \Symfony\Component\Translation\Dumper\JsonFileDumper());
        $instance->addDumper('res', new \Symfony\Component\Translation\Dumper\IcuResFileDumper());

        return $instance;
    }

    /*
     * Gets the private 'translator.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected function getTranslator_DefaultService()
    {
        $this->privates['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', false],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', false],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', false],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', false],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', false],
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', false],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', false],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', false],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', false],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', false],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', false],
        ], [
            'translation.loader.csv' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.php' => '?',
            'translation.loader.po' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.res' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.yml' => '?',
        ]), ($this->privates['translator.formatter.default'] ?? $this->getTranslator_Formatter_DefaultService()), 'en-GB', ['translation.loader.php' => [0 => 'php'], 'translation.loader.yml' => [0 => 'yaml', 1 => 'yml'], 'translation.loader.xliff' => [0 => 'xlf', 1 => 'xliff'], 'translation.loader.po' => [0 => 'po'], 'translation.loader.mo' => [0 => 'mo'], 'translation.loader.qt' => [0 => 'ts'], 'translation.loader.csv' => [0 => 'csv'], 'translation.loader.res' => [0 => 'res'], 'translation.loader.dat' => [0 => 'dat'], 'translation.loader.ini' => [0 => 'ini'], 'translation.loader.json' => [0 => 'json']], ['cache_dir' => ($this->targetDir.''.'/translations'), 'debug' => false, 'resource_files' => ['af' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.af.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.af.xlf')], 'ar' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ar.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ar.xlf')], 'az' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.az.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.az.xlf')], 'be' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.be.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.be.xlf')], 'bg' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.bg.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.bg.xlf')], 'bs' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.bs.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.bs.xlf')], 'ca' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ca.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ca.xlf')], 'cs' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.cs.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.cs.xlf')], 'cy' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.cy.xlf')], 'da' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.da.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.da.xlf')], 'de' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.de.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.de.xlf')], 'el' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.el.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.el.xlf')], 'en' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.en.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.en.xlf')], 'es' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.es.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.es.xlf')], 'et' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.et.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.et.xlf')], 'eu' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.eu.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.eu.xlf')], 'fa' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fa.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fa.xlf')], 'fi' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fi.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fi.xlf')], 'fr' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fr.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fr.xlf')], 'gl' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.gl.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.gl.xlf')], 'he' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.he.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.he.xlf')], 'hr' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hr.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hr.xlf')], 'hu' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hu.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hu.xlf')], 'hy' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hy.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hy.xlf')], 'id' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.id.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.id.xlf')], 'it' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.it.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.it.xlf')], 'ja' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ja.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ja.xlf')], 'lb' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lb.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lb.xlf')], 'lt' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lt.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lt.xlf')], 'lv' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lv.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lv.xlf')], 'mn' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.mn.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.mn.xlf')], 'my' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.my.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.my.xlf')], 'nb' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nb.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nb.xlf')], 'nl' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nl.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nl.xlf')], 'nn' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nn.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nn.xlf')], 'no' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.no.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.no.xlf')], 'pl' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pl.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pl.xlf')], 'pt' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pt.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pt.xlf')], 'pt_BR' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pt_BR.xlf')], 'ro' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ro.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ro.xlf')], 'ru' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ru.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ru.xlf')], 'sk' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sk.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sk.xlf')], 'sl' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sl.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sl.xlf')], 'sq' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sq.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sq.xlf')], 'sr_Cyrl' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sr_Cyrl.xlf')], 'sr_Latn' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sr_Latn.xlf')], 'sv' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sv.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sv.xlf')], 'th' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.th.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.th.xlf')], 'tl' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.tl.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.tl.xlf')], 'tr' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.tr.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.tr.xlf')], 'uk' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.uk.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.uk.xlf')], 'ur' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ur.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ur.xlf')], 'uz' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.uz.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.uz.xlf')], 'vi' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.vi.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.vi.xlf')], 'zh_CN' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.zh_CN.xlf')], 'zh_TW' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.zh_TW.xlf')], 'de-DE' => [0 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet/de_DE/storefront.de-DE.json')], 'en-GB' => [0 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet/en_GB/storefront.en-GB.json')]], 'scanned_directories' => [0 => (\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations'), 1 => (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations'), 2 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet'), 3 => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/translations'), 4 => (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle/translations'), 5 => (\dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/translations'), 6 => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/translations'), 7 => (\dirname(__DIR__, 4).'/vendor/enqueue/enqueue-bundle/translations'), 8 => (\dirname(__DIR__, 4).'/vendor/sroze/messenger-enqueue-transport/Bundle/translations'), 9 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/translations'), 10 => (\dirname(__DIR__, 4).'/vendor/shopware/core/System/translations'), 11 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/translations'), 12 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/translations'), 13 => (\dirname(__DIR__, 4).'/vendor/shopware/administration/translations'), 14 => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/translations'), 15 => (\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/translations'), 16 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/translations'), 17 => (\dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/translations'), 18 => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/KernelPluginLoader/translations')], 'cache_vary' => ['scanned_directories' => [0 => 'vendor/symfony/validator/Resources/translations', 1 => 'vendor/symfony/security-core/Resources/translations', 2 => 'vendor/shopware/storefront/Resources/snippet', 3 => 'vendor/symfony/framework-bundle/translations', 4 => 'vendor/symfony/monolog-bundle/translations', 5 => 'vendor/sensio/framework-extra-bundle/src/translations', 6 => 'vendor/symfony/twig-bundle/translations', 7 => 'vendor/enqueue/enqueue-bundle/translations', 8 => 'vendor/sroze/messenger-enqueue-transport/Bundle/translations', 9 => 'vendor/shopware/core/Framework/translations', 10 => 'vendor/shopware/core/System/translations', 11 => 'vendor/shopware/core/Content/translations', 12 => 'vendor/shopware/core/Checkout/translations', 13 => 'vendor/shopware/administration/translations', 14 => 'vendor/shopware/storefront/translations', 15 => 'vendor/shopware/elasticsearch/translations', 16 => 'vendor/shopware/core/Maintenance/translations', 17 => 'custom/plugins/SwagPlatformDemoData/src/translations', 18 => 'vendor/shopware/core/Framework/Plugin/KernelPluginLoader/translations']]], []);

        $instance->setConfigCacheFactory(($this->privates['config_cache_factory'] ?? ($this->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory())));
        $instance->setFallbackLocales([0 => 'en_GB', 1 => 'en']);

        return $instance;
    }

    /*
     * Gets the private 'translator.formatter.default' shared service.
     *
     * @return \Symfony\Component\Translation\Formatter\MessageFormatter
     */
    protected function getTranslator_Formatter_DefaultService()
    {
        return $this->privates['translator.formatter.default'] = new \Symfony\Component\Translation\Formatter\MessageFormatter(new \Symfony\Component\Translation\IdentityTranslator());
    }

    /*
     * Gets the private 'twig.command.debug' shared service.
     *
     * @return \Symfony\Bridge\Twig\Command\DebugCommand
     */
    protected function getTwig_Command_DebugService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Command/DebugCommand.php';

        $this->privates['twig.command.debug'] = $instance = new \Symfony\Bridge\Twig\Command\DebugCommand(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()), \dirname(__DIR__, 4), $this->parameters['kernel.bundles_metadata'], (\dirname(__DIR__, 4).'/templates'), ($this->privates['debug.file_link_formatter'] ?? ($this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL))));

        $instance->setName('debug:twig');
        $instance->setDescription('Show a list of twig functions, filters, globals and tests');

        return $instance;
    }

    /*
     * Gets the private 'twig.command.lint' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Command\LintCommand
     */
    protected function getTwig_Command_LintService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Command/LintCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/Command/LintCommand.php';

        $this->privates['twig.command.lint'] = $instance = new \Symfony\Bundle\TwigBundle\Command\LintCommand(($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService()));

        $instance->setName('lint:twig');
        $instance->setDescription('Lint a Twig template and outputs encountered errors');

        return $instance;
    }

    /*
     * Gets the private 'twig.extension.trans' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\TranslationExtension
     */
    protected function getTwig_Extension_TransService()
    {
        $a = ($this->services['translator'] ?? $this->getTranslatorService());

        if (isset($this->privates['twig.extension.trans'])) {
            return $this->privates['twig.extension.trans'];
        }

        return $this->privates['twig.extension.trans'] = new \Symfony\Bridge\Twig\Extension\TranslationExtension($a);
    }

    /*
     * Gets the private 'twig.loader.chain' shared service.
     *
     * @return \Twig\Loader\ChainLoader
     */
    protected function getTwig_Loader_ChainService()
    {
        $this->privates['twig.loader.chain'] = $instance = new \Twig\Loader\ChainLoader();

        $a = new \Twig\Loader\FilesystemLoader([], \dirname(__DIR__, 4));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/enqueue/enqueue-bundle/Resources/views'), 'Enqueue');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/enqueue/enqueue-bundle/Resources/views'), '!Enqueue');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources/views'), 'Framework');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources/views'), '!Framework');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources/views'), 'Administration');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources/views'), '!Administration');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views'), 'Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views'), '!Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources/views'), 'Elasticsearch');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources/views'), '!Elasticsearch');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), 'email');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), '!email');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Resources'), 'FrameworkBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle/Resources'), 'MonologBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src/Resources'), 'SensioFrameworkExtraBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/Resources'), 'TwigBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/enqueue/enqueue-bundle/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/enqueue/enqueue-bundle/Resources/views'), 'EnqueueBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/enqueue/enqueue-bundle/Resources'), 'EnqueueBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/sroze/messenger-enqueue-transport/Bundle/Resources'), 'EnqueueAdapterBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources/views'), 'Framework');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources'), 'Framework');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/System/Resources'), 'System');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Content/Resources'), 'Content');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Resources'), 'Checkout');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources/views'), 'Administration');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources'), 'Administration');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views'), 'Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views/../app/storefront/dist'), 'Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources'), 'Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources/views'), 'Elasticsearch');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources'), 'Elasticsearch');
        $a->addPath((\dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src/Resources'), 'SwagPlatformDemoData');

        $instance->addLoader(($this->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'] ?? $this->getEntityTemplateLoaderService()));
        $instance->addLoader($a);

        return $instance;
    }

    /*
     * Gets the private 'twig.mailer.message_listener' shared service.
     *
     * @return \Symfony\Component\Mailer\EventListener\MessageListener
     */
    protected function getTwig_Mailer_MessageListenerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/EventListener/MessageListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/BodyRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Mime/BodyRenderer.php';

        $a = ($this->services['.container.private.twig'] ?? $this->get_Container_Private_TwigService());

        if (isset($this->privates['twig.mailer.message_listener'])) {
            return $this->privates['twig.mailer.message_listener'];
        }

        return $this->privates['twig.mailer.message_listener'] = new \Symfony\Component\Mailer\EventListener\MessageListener(NULL, new \Symfony\Bridge\Twig\Mime\BodyRenderer($a));
    }

    /*
     * Gets the private 'twig.runtime.httpkernel' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpKernelRuntime
     */
    protected function getTwig_Runtime_HttpkernelService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpKernelRuntime.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DependencyInjection/LazyLoadingFragmentHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentUriGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentUriGenerator.php';

        $a = ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()));

        return $this->privates['twig.runtime.httpkernel'] = new \Symfony\Bridge\Twig\Extension\HttpKernelRuntime(new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'esi' => ['privates', 'fragment.renderer.esi', 'getFragment_Renderer_EsiService', false],
            'hinclude' => ['privates', 'fragment.renderer.hinclude', 'getFragment_Renderer_HincludeService', false],
            'inline' => ['privates', 'fragment.renderer.inline', 'getFragment_Renderer_InlineService', false],
        ], [
            'esi' => '?',
            'hinclude' => '?',
            'inline' => '?',
        ]), $a, false), new \Symfony\Component\HttpKernel\Fragment\FragmentUriGenerator('/_fragment', ($this->privates['uri_signer'] ?? ($this->privates['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner($this->getEnv('APP_SECRET')))), $a));
    }

    /*
     * Gets the private 'twig.runtime.security_csrf' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\CsrfRuntime
     */
    protected function getTwig_Runtime_SecurityCsrfService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/CsrfRuntime.php';

        return $this->privates['twig.runtime.security_csrf'] = new \Symfony\Bridge\Twig\Extension\CsrfRuntime(($this->services['.container.private.security.csrf.token_manager'] ?? $this->get_Container_Private_Security_Csrf_TokenManagerService()));
    }

    /*
     * Gets the private 'twig.runtime.serializer' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\SerializerRuntime
     */
    protected function getTwig_Runtime_SerializerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/RuntimeExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/SerializerRuntime.php';

        return $this->privates['twig.runtime.serializer'] = new \Symfony\Bridge\Twig\Extension\SerializerRuntime(($this->services['.container.private.serializer'] ?? $this->get_Container_Private_SerializerService()));
    }

    /*
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected function getValidator_BuilderService()
    {
        $this->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $a = ($this->privates['property_info.cache'] ?? $this->getPropertyInfo_CacheService());

        $instance->setConstraintValidatorFactory(new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerEmailUniqueValidator' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerEmailUniqueValidator', 'getCustomerEmailUniqueValidatorService', false],
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator', 'getCustomerPasswordMatchesValidatorService', false],
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerVatIdentificationValidator' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerVatIdentificationValidator', 'getCustomerVatIdentificationValidatorService', false],
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator', 'getCustomerZipCodeValidatorService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator', 'getEntityExistsValidatorService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator', 'getEntityNotExistsValidatorService', false],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', false],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', false],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', false],
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', false],
        ], [
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerEmailUniqueValidator' => '?',
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator' => '?',
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerVatIdentificationValidator' => '?',
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'validator.expression' => '?',
        ])));
        if ($this->has('translator')) {
            $instance->setTranslator(($this->services['translator'] ?? $this->getTranslatorService()));
        }
        $instance->setTranslationDomain('validators');
        $instance->enableAnnotationMapping(true);
        $instance->setDoctrineAnnotationReader(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->setMappingCache(\Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($this->targetDir.''.'/validation.php'), ($this->privates['cache.validator'] ?? $this->getCache_ValidatorService())));
        $instance->addObjectInitializers([]);
        $instance->addLoader(new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL));

        return $instance;
    }

    /*
     * Gets the private 'validator.email' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator
     */
    protected function getValidator_EmailService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Constraints/EmailValidator.php';

        return $this->privates['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator('loose');
    }

    /*
     * Gets the private 'validator.expression' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator
     */
    protected function getValidator_ExpressionService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Constraints/ExpressionValidator.php';

        return $this->privates['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator(NULL);
    }

    /*
     * Gets the private 'validator.mapping.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer
     */
    protected function getValidator_Mapping_CacheWarmerService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/AbstractPhpFileCacheWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/ValidatorCacheWarmer.php';

        return $this->privates['validator.mapping.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer(($this->privates['validator.builder'] ?? $this->getValidator_BuilderService()), ($this->targetDir.''.'/validation.php'));
    }

    /*
     * Gets the private 'validator.not_compromised_password' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator
     */
    protected function getValidator_NotCompromisedPasswordService()
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Constraints/NotCompromisedPasswordValidator.php';

        return $this->privates['validator.not_compromised_password'] = new \Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator(NULL, 'UTF-8', true, NULL);
    }

    /*
     * Gets the public 'cache_clearer' alias.
     *
     * @return object The ".container.private.cache_clearer" service.
     */
    protected function getCacheClearerService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "cache_clearer" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.cache_clearer');
    }

    /*
     * Gets the public 'filesystem' alias.
     *
     * @return object The ".container.private.filesystem" service.
     */
    protected function getFilesystemService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "filesystem" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.filesystem');
    }

    /*
     * Gets the public 'serializer' alias.
     *
     * @return object The ".container.private.serializer" service.
     */
    protected function getSerializerService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "serializer" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.serializer');
    }

    /*
     * Gets the public 'security.csrf.token_manager' alias.
     *
     * @return object The ".container.private.security.csrf.token_manager" service.
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "security.csrf.token_manager" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.security.csrf.token_manager');
    }

    /*
     * Gets the public 'twig' alias.
     *
     * @return object The ".container.private.twig" service.
     */
    protected function getTwigService()
    {
        trigger_deprecation('symfony/twig-bundle', '5.2', 'Accessing the "twig" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.twig');
    }

    /*
     * Gets the public 'session' alias.
     *
     * @return object The ".container.private.session" service.
     */
    protected function getSessionService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.3', 'Accessing the "session" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.session');
    }

    /*
     * Gets the public 'validator' alias.
     *
     * @return object The ".container.private.validator" service.
     */
    protected function getValidatorService()
    {
        trigger_deprecation('symfony/framework-bundle', '5.2', 'Accessing the "validator" service directly from the container is deprecated, use dependency injection instead.');

        return $this->get('.container.private.validator');
    }

    /**
     * @return array|bool|float|int|string|\UnitEnum|null
     */
    public function getParameter(string $name)
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'APP_URL' => false,
        'shopware.routing.registered_api_prefixes' => false,
        'shopware.dbal.time_zone_support_enabled' => false,
        'shopware.dbal.token_minimum_length' => false,
        'instance_id' => false,
        'shopware_administration.path_name' => false,
        'shopware.http.cache.enabled' => false,
        'shopware.http.cache.default_ttl' => false,
        'elasticsearch.enabled' => false,
        'elasticsearch.indexing_enabled' => false,
        'elasticsearch.hosts' => false,
        'elasticsearch.index_prefix' => false,
        'shopware.cdn.strategy' => false,
        'kernel.secret' => false,
        'serializer.mapping.cache.file' => false,
        'session.save_path' => false,
        'validator.mapping.cache.file' => false,
        'shopware.cdn' => false,
        'shopware.deployment' => false,
        'shopware.deployment.blue_green' => false,
        'shopware.html_sanitizer' => false,
        'shopware.html_sanitizer.cache_dir' => false,
        'shopware.cache' => false,
        'shopware.cache.redis_prefix' => false,
        'elasticsearch.indexing_batch_size' => false,
        'elasticsearch.throw_exception' => false,
        'elasticsearch.administration' => false,
        'elasticsearch.administration.hosts' => false,
        'elasticsearch.administration.enabled' => false,
        'elasticsearch.administration.refresh_indices' => false,
        'elasticsearch.administration.index_prefix' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        switch ($name) {
            case 'kernel.runtime_environment': $value = $this->getEnv('default:kernel.environment:APP_RUNTIME_ENV'); break;
            case 'kernel.build_dir': $value = $this->targetDir.''; break;
            case 'kernel.cache_dir': $value = $this->targetDir.''; break;
            case 'APP_URL': $value = $this->getEnv('string:APP_URL'); break;
            case 'shopware.routing.registered_api_prefixes': $value = [
                0 => '_wdt',
                1 => '_profiler',
                2 => '_error',
                3 => 'api',
                4 => 'sw-domain-hash.html',
                5 => 'store-api',
                6 => $this->getEnv('resolve:SHOPWARE_ADMINISTRATION_PATH_NAME'),
                7 => 'api',
            ]; break;
            case 'shopware.dbal.time_zone_support_enabled': $value = $this->getEnv('bool:SHOPWARE_DBAL_TIMEZONE_SUPPORT_ENABLED'); break;
            case 'shopware.dbal.token_minimum_length': $value = $this->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH'); break;
            case 'instance_id': $value = $this->getEnv('INSTANCE_ID'); break;
            case 'shopware_administration.path_name': $value = $this->getEnv('resolve:SHOPWARE_ADMINISTRATION_PATH_NAME'); break;
            case 'shopware.http.cache.enabled': $value = $this->getEnv('default:shopware_http_cache_enabled_default:SHOPWARE_HTTP_CACHE_ENABLED'); break;
            case 'shopware.http.cache.default_ttl': $value = $this->getEnv('default:shopware_http_cache_default_ttl_default:SHOPWARE_HTTP_DEFAULT_TTL'); break;
            case 'elasticsearch.enabled': $value = $this->getEnv('bool:default:default_whitespace:SHOPWARE_ES_ENABLED'); break;
            case 'elasticsearch.indexing_enabled': $value = $this->getEnv('bool:default:default_whitespace:SHOPWARE_ES_INDEXING_ENABLED'); break;
            case 'elasticsearch.hosts': $value = $this->getEnv('string:default:default_whitespace:SHOPWARE_ES_HOSTS'); break;
            case 'elasticsearch.index_prefix': $value = $this->getEnv('string:default:default_elasticsearch_prefix:SHOPWARE_ES_INDEX_PREFIX'); break;
            case 'shopware.cdn.strategy': $value = $this->getEnv('default:default_cdn_strategy:SHOPWARE_CDN_STRATEGY_DEFAULT'); break;
            case 'kernel.secret': $value = $this->getEnv('APP_SECRET'); break;
            case 'serializer.mapping.cache.file': $value = ($this->targetDir.''.'/serialization.php'); break;
            case 'session.save_path': $value = ($this->targetDir.''.'/sessions'); break;
            case 'validator.mapping.cache.file': $value = ($this->targetDir.''.'/validation.php'); break;
            case 'shopware.cdn': $value = [
                'url' => '',
                'strategy' => $this->getEnv('string:default:default_cdn_strategy:SHOPWARE_CDN_STRATEGY_DEFAULT'),
            ]; break;
            case 'shopware.deployment': $value = [
                'blue_green' => $this->getEnv('bool:default:defaults_bool_true:BLUE_GREEN_DEPLOYMENT'),
            ]; break;
            case 'shopware.deployment.blue_green': $value = $this->getEnv('bool:default:defaults_bool_true:BLUE_GREEN_DEPLOYMENT'); break;
            case 'shopware.html_sanitizer': $value = [
                'cache_dir' => $this->targetDir.'',
                'cache_enabled' => true,
                'sets' => [
                    'basic' => [
                        'tags' => [
                            0 => 'a',
                            1 => 'abbr',
                            2 => 'acronym',
                            3 => 'address',
                            4 => 'b',
                            5 => 'bdo',
                            6 => 'big',
                            7 => 'blockquote',
                            8 => 'br',
                            9 => 'caption',
                            10 => 'center',
                            11 => 'cite',
                            12 => 'code',
                            13 => 'col',
                            14 => 'colgroup',
                            15 => 'dd',
                            16 => 'del',
                            17 => 'dfn',
                            18 => 'dir',
                            19 => 'div',
                            20 => 'dl',
                            21 => 'dt',
                            22 => 'em',
                            23 => 'font',
                            24 => 'h1',
                            25 => 'h2',
                            26 => 'h3',
                            27 => 'h4',
                            28 => 'h5',
                            29 => 'h6',
                            30 => 'hr',
                            31 => 'i',
                            32 => 'ins',
                            33 => 'kbd',
                            34 => 'li',
                            35 => 'menu',
                            36 => 'ol',
                            37 => 'p',
                            38 => 'pre',
                            39 => 'q',
                            40 => 's',
                            41 => 'samp',
                            42 => 'small',
                            43 => 'span',
                            44 => 'strike',
                            45 => 'strong',
                            46 => 'sub',
                            47 => 'sup',
                            48 => 'table',
                            49 => 'tbody',
                            50 => 'td',
                            51 => 'tfoot',
                            52 => 'th',
                            53 => 'thead',
                            54 => 'tr',
                            55 => 'tt',
                            56 => 'u',
                            57 => 'ul',
                            58 => 'var',
                        ],
                        'attributes' => [
                            0 => 'align',
                            1 => 'bgcolor',
                            2 => 'border',
                            3 => 'cellpadding',
                            4 => 'cellspacing',
                            5 => 'cite',
                            6 => 'class',
                            7 => 'clear',
                            8 => 'color',
                            9 => 'colspan',
                            10 => 'dir',
                            11 => 'face',
                            12 => 'frame',
                            13 => 'height',
                            14 => 'href',
                            15 => 'id',
                            16 => 'lang',
                            17 => 'name',
                            18 => 'noshade',
                            19 => 'nowrap',
                            20 => 'rel',
                            21 => 'rev',
                            22 => 'rowspan',
                            23 => 'scope',
                            24 => 'size',
                            25 => 'span',
                            26 => 'start',
                            27 => 'style',
                            28 => 'summary',
                            29 => 'title',
                            30 => 'type',
                            31 => 'valign',
                            32 => 'value',
                            33 => 'width',
                        ],
                        'options' => [

                        ],
                    ],
                    'media' => [
                        'tags' => [
                            0 => 'img',
                        ],
                        'attributes' => [
                            0 => 'src',
                            1 => 'alt',
                        ],
                        'options' => [

                        ],
                    ],
                    'script' => [
                        'tags' => [
                            0 => 'script',
                        ],
                        'options' => [
                            'HTML.Trusted' => true,
                        ],
                        'attributes' => [

                        ],
                    ],
                    'tidy' => [
                        'options' => [
                            'Output.TidyFormat' => true,
                        ],
                        'tags' => [

                        ],
                        'attributes' => [

                        ],
                    ],
                ],
                'fields' => [
                    'product_translation.description' => [
                        'sets' => [
                            0 => 'basic',
                            1 => 'media',
                        ],
                    ],
                    'app_cms_block.template' => [
                        'sets' => [
                            0 => 'basic',
                            1 => 'media',
                            2 => 'tidy',
                        ],
                    ],
                ],
            ]; break;
            case 'shopware.html_sanitizer.cache_dir': $value = $this->targetDir.''; break;
            case 'shopware.cache': $value = [
                'redis_prefix' => $this->getEnv('REDIS_PREFIX'),
                'invalidation' => [
                    'delay' => 0,
                    'count' => 150,
                    'http_cache' => [
                        0 => 'logged-in',
                        1 => 'cart-filled',
                    ],
                    'product_listing_route' => [

                    ],
                    'product_detail_route' => [

                    ],
                    'product_review_route' => [

                    ],
                    'product_search_route' => [

                    ],
                    'product_suggest_route' => [

                    ],
                    'product_cross_selling_route' => [

                    ],
                    'payment_method_route' => [

                    ],
                    'shipping_method_route' => [

                    ],
                    'navigation_route' => [

                    ],
                    'category_route' => [

                    ],
                    'landing_page_route' => [

                    ],
                    'language_route' => [

                    ],
                    'currency_route' => [

                    ],
                    'country_route' => [

                    ],
                    'country_state_route' => [

                    ],
                    'salutation_route' => [

                    ],
                    'sitemap_route' => [

                    ],
                ],
            ]; break;
            case 'shopware.cache.redis_prefix': $value = $this->getEnv('REDIS_PREFIX'); break;
            case 'elasticsearch.indexing_batch_size': $value = $this->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'); break;
            case 'elasticsearch.throw_exception': $value = $this->getEnv('string:SHOPWARE_ES_THROW_EXCEPTION'); break;
            case 'elasticsearch.administration': $value = [
                'hosts' => $this->getEnv('string:ADMIN_OPENSEARCH_URL'),
                'enabled' => $this->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'),
                'refresh_indices' => $this->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'),
                'index_prefix' => $this->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'),
                'index_settings' => [
                    'number_of_shards' => 3,
                    'number_of_replicas' => 3,
                    'mapping.total_fields.limit' => 50000,
                    'mapping.nested_fields.limit' => 500,
                    'mapping.nested_objects.limit' => 1000000,
                ],
                'analysis' => [
                    'normalizer' => [
                        'sw_lowercase_normalizer' => [
                            'type' => 'custom',
                            'filter' => [
                                0 => 'lowercase',
                            ],
                        ],
                    ],
                ],
                'dynamic_templates' => [
                    0 => [
                        'keywords' => [
                            'match_mapping_type' => 'string',
                            'mapping' => [
                                'type' => 'keyword',
                                'normalizer' => 'sw_lowercase_normalizer',
                                'fields' => [
                                    'text' => [
                                        'type' => 'text',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ]; break;
            case 'elasticsearch.administration.hosts': $value = $this->getEnv('string:ADMIN_OPENSEARCH_URL'); break;
            case 'elasticsearch.administration.enabled': $value = $this->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'); break;
            case 'elasticsearch.administration.refresh_indices': $value = $this->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'); break;
            case 'elasticsearch.administration.index_prefix': $value = $this->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'); break;
            default: throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
        }
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'prod',
            'kernel.debug' => false,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).'/log'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'EnqueueBundle' => 'Enqueue\\Bundle\\EnqueueBundle',
                'EnqueueAdapterBundle' => 'Enqueue\\MessengerAdapter\\Bundle\\EnqueueAdapterBundle',
                'Framework' => 'Shopware\\Core\\Framework\\Framework',
                'System' => 'Shopware\\Core\\System\\System',
                'Content' => 'Shopware\\Core\\Content\\Content',
                'Checkout' => 'Shopware\\Core\\Checkout\\Checkout',
                'Administration' => 'Shopware\\Administration\\Administration',
                'Storefront' => 'Shopware\\Storefront\\Storefront',
                'Elasticsearch' => 'Shopware\\Elasticsearch\\Elasticsearch',
                'Maintenance' => 'Shopware\\Core\\Maintenance\\Maintenance',
                'SwagPlatformDemoData' => 'Swag\\PlatformDemoData\\SwagPlatformDemoData',
                'DbalKernelPluginLoader' => 'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\DbalKernelPluginLoader',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'MonologBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ],
                'SensioFrameworkExtraBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/sensio/framework-extra-bundle/src'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'EnqueueBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/enqueue/enqueue-bundle'),
                    'namespace' => 'Enqueue\\Bundle',
                ],
                'EnqueueAdapterBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/sroze/messenger-enqueue-transport/Bundle'),
                    'namespace' => 'Enqueue\\MessengerAdapter\\Bundle',
                ],
                'Framework' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework'),
                    'namespace' => 'Shopware\\Core\\Framework',
                ],
                'System' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/System'),
                    'namespace' => 'Shopware\\Core\\System',
                ],
                'Content' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content'),
                    'namespace' => 'Shopware\\Core\\Content',
                ],
                'Checkout' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout'),
                    'namespace' => 'Shopware\\Core\\Checkout',
                ],
                'Administration' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/administration'),
                    'namespace' => 'Shopware\\Administration',
                ],
                'Storefront' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/storefront'),
                    'namespace' => 'Shopware\\Storefront',
                ],
                'Elasticsearch' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch'),
                    'namespace' => 'Shopware\\Elasticsearch',
                ],
                'Maintenance' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance'),
                    'namespace' => 'Shopware\\Core\\Maintenance',
                ],
                'SwagPlatformDemoData' => [
                    'path' => (\dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src'),
                    'namespace' => 'Swag\\PlatformDemoData',
                ],
                'DbalKernelPluginLoader' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/KernelPluginLoader'),
                    'namespace' => 'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'Shopware_Core_KernelProdContainer',
            'kernel.cache.hash' => '9dfa0a726cb2f211cbef053d05840993',
            'kernel.shopware_version' => '6.4.20.0',
            'kernel.shopware_version_revision' => 'd5bd15a56b0f08e867f273d2c624871534195850',
            'kernel.shopware_core_dir' => (\dirname(__DIR__, 4).'/vendor/shopware/core'),
            'kernel.plugin_dir' => (\dirname(__DIR__, 4).'/custom/plugins'),
            'kernel.app_dir' => (\dirname(__DIR__, 4).'/custom/apps'),
            'kernel.active_plugins' => [
                'Swag\\PlatformDemoData\\SwagPlatformDemoData' => [
                    'name' => 'SwagPlatformDemoData',
                    'path' => (\dirname(__DIR__, 4).'/custom/plugins/SwagPlatformDemoData/src'),
                    'class' => 'Swag\\PlatformDemoData\\SwagPlatformDemoData',
                ],
            ],
            'kernel.plugin_infos' => [
                0 => [
                    'name' => 'SwagPlatformDemoData',
                    'baseClass' => 'Swag\\PlatformDemoData\\SwagPlatformDemoData',
                    'active' => true,
                    'path' => 'custom/plugins/SwagPlatformDemoData',
                    'version' => '1.0.9',
                    'autoload' => [
                        'psr-4' => [
                            'Swag\\PlatformDemoData\\' => 'src/',
                        ],
                    ],
                    'managedByComposer' => false,
                    'composerName' => 'swag/demo-data',
                ],
            ],
            'kernel.supported_api_versions' => [
                0 => 2,
                1 => 3,
                2 => 4,
            ],
            'defaults_bool_true' => true,
            'defaults_bool_false' => false,
            'default_whitespace' => ' ',
            'locale' => 'en-GB',
            'messenger.default_transport_name' => 'default',
            'env(MAILER_URL)' => 'null://null',
            'env(MESSENGER_TRANSPORT_DSN)' => 'enqueue://default?receiveTimeout=100',
            'default_cdn_strategy' => 'physical_filename',
            'env(APP_URL)' => '',
            'env(REDIS_PREFIX)' => '',
            'shopware.slug.config' => [
                'regexp' => '/([^A-Za-z0-9\\.]|-)+/',
                'lowercase' => false,
            ],
            'core.migration.directories' => [

            ],
            'migration.active' => [
                0 => 1536232600,
                1 => 1536232610,
                2 => 1536232620,
                3 => 1536232630,
                4 => 1536232640,
                5 => 1536232650,
                6 => 1536232660,
                7 => 1536232670,
                8 => 1536232680,
                9 => 1536232690,
                10 => 1536232700,
                11 => 1536232710,
                12 => 1536232720,
                13 => 1536232730,
                14 => 1536232740,
                15 => 1536232750,
                16 => 1536232760,
                17 => 1536232770,
                18 => 1536232790,
                19 => 1536232800,
                20 => 1536232810,
                21 => 1536232820,
                22 => 1536232830,
                23 => 1536232840,
                24 => 1536232850,
                25 => 1536232860,
                26 => 1536232870,
                27 => 1536232880,
                28 => 1536232890,
                29 => 1536232900,
                30 => 1536232910,
                31 => 1536232920,
                32 => 1536232930,
                33 => 1536232940,
                34 => 1536232950,
                35 => 1536232960,
                36 => 1536232970,
                37 => 1536232980,
                38 => 1536232990,
                39 => 1536233000,
                40 => 1536233010,
                41 => 1536233020,
                42 => 1536233030,
                43 => 1536233040,
                44 => 1536233050,
                45 => 1536233060,
                46 => 1536233070,
                47 => 1536233080,
                48 => 1536233090,
                49 => 1536233100,
                50 => 1536233110,
                51 => 1536233120,
                52 => 1536233130,
                53 => 1536233140,
                54 => 1536233150,
                55 => 1536233160,
                56 => 1536233170,
                57 => 1536233180,
                58 => 1536233190,
                59 => 1536233200,
                60 => 1536233210,
                61 => 1536233220,
                62 => 1536233230,
                63 => 1536233240,
                64 => 1536233250,
                65 => 1536233260,
                66 => 1536233270,
                67 => 1536233280,
                68 => 1536233290,
                69 => 1536233300,
                70 => 1536233310,
                71 => 1536233320,
                72 => 1536233330,
                73 => 1536233340,
                74 => 1536233350,
                75 => 1536233360,
                76 => 1536233370,
                77 => 1536233380,
                78 => 1536233390,
                79 => 1536233400,
                80 => 1536233410,
                81 => 1536233420,
                82 => 1536233430,
                83 => 1536233440,
                84 => 1536233450,
                85 => 1536233460,
                86 => 1536233470,
                87 => 1536233480,
                88 => 1536233500,
                89 => 1536233510,
                90 => 1536233520,
                91 => 1536233530,
                92 => 1536233540,
                93 => 1536233550,
                94 => 1536233560,
                95 => 1552360944,
                96 => 1554199340,
                97 => 1554200141,
                98 => 1554203706,
                99 => 1554900301,
                100 => 1556809270,
                101 => 1558082916,
                102 => 1558105657,
                103 => 1558443337,
                104 => 1558505525,
                105 => 1558594334,
                106 => 1558938938,
                107 => 1559050088,
                108 => 1559050903,
                109 => 1559134989,
                110 => 1559306391,
                111 => 1561370284,
                112 => 1561377793,
                113 => 1561442979,
                114 => 1561452005,
                115 => 1561712450,
                116 => 1562228335,
                117 => 1562240231,
                118 => 1562306893,
                119 => 1562324772,
                120 => 1562579120,
                121 => 1562684474,
                122 => 1562841035,
                123 => 1562933907,
                124 => 1563180880,
                125 => 1563288227,
                126 => 1563518181,
                127 => 1563805586,
                128 => 1563949275,
                129 => 1564475053,
                130 => 1565007156,
                131 => 1565079228,
                132 => 1565270155,
                133 => 1565270366,
                134 => 1565346846,
                135 => 1565705280,
                136 => 1566293076,
                137 => 1566460168,
                138 => 1566817701,
                139 => 1567431050,
                140 => 1568120239,
                141 => 1568120302,
                142 => 1568645037,
                143 => 1568901713,
                144 => 1569403146,
                145 => 1570187167,
                146 => 1570459127,
                147 => 1570621541,
                148 => 1570622696,
                149 => 1570629862,
                150 => 1570684913,
                151 => 1571059598,
                152 => 1571210820,
                153 => 1571660203,
                154 => 1571724915,
                155 => 1571981437,
                156 => 1571990395,
                157 => 1572193798,
                158 => 1572264837,
                159 => 1572273565,
                160 => 1572421282,
                161 => 1572425108,
                162 => 1572957455,
                163 => 1573049297,
                164 => 1573569685,
                165 => 1573729158,
                166 => 1574063550,
                167 => 1574082635,
                168 => 1574258787,
                169 => 1574258788,
                170 => 1574258789,
                171 => 1574520220,
                172 => 1574672450,
                173 => 1574695657,
                174 => 1574925962,
                175 => 1575010262,
                176 => 1575021466,
                177 => 1575034234,
                178 => 1575036586,
                179 => 1575039284,
                180 => 1575197543,
                181 => 1575274700,
                182 => 1575293069,
                183 => 1575451283,
                184 => 1575626180,
                185 => 1575883959,
                186 => 1576488398,
                187 => 1576590301,
                188 => 1578042218,
                189 => 1578044453,
                190 => 1578470886,
                191 => 1578475268,
                192 => 1578485775,
                193 => 1578491480,
                194 => 1578590702,
                195 => 1578648299,
                196 => 1578650334,
                197 => 1580202210,
                198 => 1580218617,
                199 => 1580743279,
                200 => 1580746806,
                201 => 1580808849,
                202 => 1580819350,
                203 => 1580827023,
                204 => 1582011195,
                205 => 1583142266,
                206 => 1583416186,
                207 => 1583756864,
                208 => 1583844433,
                209 => 1584002637,
                210 => 1584953715,
                211 => 1585056571,
                212 => 1585126355,
                213 => 1585490020,
                214 => 1585744384,
                215 => 1585816139,
                216 => 1586158920,
                217 => 1586173614,
                218 => 1586260286,
                219 => 1586334003,
                220 => 1587039363,
                221 => 1587109484,
                222 => 1587111506,
                223 => 1587461582,
                224 => 1588143272,
                225 => 1588144801,
                226 => 1588153272,
                227 => 1589178550,
                228 => 1589357321,
                229 => 1589359936,
                230 => 1589379060,
                231 => 1589447332,
                232 => 1589458026,
                233 => 1590408550,
                234 => 1590409548,
                235 => 1590566018,
                236 => 1590566405,
                237 => 1590579986,
                238 => 1590758953,
                239 => 1591052278,
                240 => 1591167126,
                241 => 1591253089,
                242 => 1591259559,
                243 => 1591272594,
                244 => 1591361320,
                245 => 1591683158,
                246 => 1591817370,
                247 => 1592466717,
                248 => 1592837424,
                249 => 1592978289,
                250 => 1593698606,
                251 => 1594650256,
                252 => 1594885630,
                253 => 1594886106,
                254 => 1594886773,
                255 => 1594886895,
                256 => 1594887027,
                257 => 1595160327,
                258 => 1595321666,
                259 => 1595422169,
                260 => 1595480600,
                261 => 1595489705,
                262 => 1595492052,
                263 => 1595492053,
                264 => 1595499689,
                265 => 1595553089,
                266 => 1595578253,
                267 => 1595919251,
                268 => 1596091744,
                269 => 1596441551,
                270 => 1597391970,
                271 => 1597394241,
                272 => 1597657689,
                273 => 1597762808,
                274 => 1597830237,
                275 => 1597930227,
                276 => 1598280548,
                277 => 1598520424,
                278 => 1598885384,
                279 => 1599112309,
                280 => 1599134496,
                281 => 1599463278,
                282 => 1599570560,
                283 => 1599720163,
                284 => 1599806584,
                285 => 1599806595,
                286 => 1599822061,
                287 => 1600072779,
                288 => 1600156989,
                289 => 1600253602,
                290 => 1600330846,
                291 => 1600338271,
                292 => 1600349343,
                293 => 1600676671,
                294 => 1600769357,
                295 => 1600778848,
                296 => 1601388975,
                297 => 1601451838,
                298 => 1601539530,
                299 => 1601543829,
                300 => 1601891339,
                301 => 1602062376,
                302 => 1602146868,
                303 => 1602153572,
                304 => 1602494493,
                305 => 1602494495,
                306 => 1602745374,
                307 => 1602822727,
                308 => 1603179023,
                309 => 1603293043,
                310 => 1603970276,
                311 => 1604056363,
                312 => 1604056421,
                313 => 1604475913,
                314 => 1604499476,
                315 => 1604568928,
                316 => 1604669773,
                317 => 1605103533,
                318 => 1605530777,
                319 => 1605609309,
                320 => 1605609477,
                321 => 1605861407,
                322 => 1606310257,
                323 => 1607415095,
                324 => 1607500561,
                325 => 1607514878,
                326 => 1607581275,
                327 => 1607581276,
                328 => 1608624028,
                329 => 1609125144,
                330 => 1609857999,
                331 => 1610531188,
                332 => 1610965670,
                333 => 1610974673,
                334 => 1611155140,
                335 => 1614240671,
                336 => 1552899789,
                337 => 1555406153,
                338 => 1563785071,
                339 => 1564385954,
                340 => 1564385960,
                341 => 1565640170,
                342 => 1565640175,
                343 => 1595492054,
                344 => 1604502151,
                345 => 1594104496,
                346 => 1604585230,
                347 => 1609140710,
                348 => 1610337444,
                349 => 1610439375,
                350 => 1610448012,
                351 => 1610523204,
                352 => 1610523548,
                353 => 1610616655,
                354 => 1610621999,
                355 => 1610625925,
                356 => 1610634383,
                357 => 1610904608,
                358 => 1611732852,
                359 => 1611817467,
                360 => 1612184092,
                361 => 1612442685,
                362 => 1612442686,
                363 => 1612442786,
                364 => 1612851765,
                365 => 1612865237,
                366 => 1612970642,
                367 => 1612980753,
                368 => 1613665555,
                369 => 1614249488,
                370 => 1614691876,
                371 => 1614765170,
                372 => 1614765785,
                373 => 1615359964,
                374 => 1615366708,
                375 => 1615452749,
                376 => 1615802866,
                377 => 1615819992,
                378 => 1616076922,
                379 => 1616496610,
                380 => 1616555956,
                381 => 1617000878,
                382 => 1617356092,
                383 => 1617784658,
                384 => 1617864895,
                385 => 1617868381,
                386 => 1617877887,
                387 => 1617896006,
                388 => 1617935350,
                389 => 1617953690,
                390 => 1617960456,
                391 => 1617974402,
                392 => 1618218491,
                393 => 1618389817,
                394 => 1618476427,
                395 => 1618569201,
                396 => 1618900427,
                397 => 1618989442,
                398 => 1619070236,
                399 => 1619428555,
                400 => 1619604605,
                401 => 1619703075,
                402 => 1620146632,
                403 => 1620147234,
                404 => 1620201616,
                405 => 1620215586,
                406 => 1620374229,
                407 => 1620376945,
                408 => 1620632460,
                409 => 1620634856,
                410 => 1620733405,
                411 => 1620733405,
                412 => 1620820321,
                413 => 1621845357,
                414 => 1621845370,
                415 => 1622010069,
                416 => 1622104463,
                417 => 1622782058,
                418 => 1623305620,
                419 => 1623391399,
                420 => 1623828962,
                421 => 1624262862,
                422 => 1624884801,
                423 => 1624967118,
                424 => 1625304609,
                425 => 1625465756,
                426 => 1625505190,
                427 => 1625554302,
                428 => 1625569667,
                429 => 1625583596,
                430 => 1625583619,
                431 => 1625816310,
                432 => 1625819412,
                433 => 1625831469,
                434 => 1626241110,
                435 => 1626442868,
                436 => 1626696809,
                437 => 1626785125,
                438 => 1627292049,
                439 => 1627540693,
                440 => 1627541488,
                441 => 1627562945,
                442 => 1627650101,
                443 => 1627929168,
                444 => 1627983652,
                445 => 1628519513,
                446 => 1628749113,
                447 => 1629204538,
                448 => 1629700169,
                449 => 1629877210,
                450 => 1630074081,
                451 => 1630485317,
                452 => 1631625055,
                453 => 1631703921,
                454 => 1631790054,
                455 => 1631863869,
                456 => 1632111590,
                457 => 1632215760,
                458 => 1632721037,
                459 => 1633347511,
                460 => 1633358879,
                461 => 1633422057,
                462 => 1634735841,
                463 => 1635147952,
                464 => 1635230747,
                465 => 1635237551,
                466 => 1635388654,
                467 => 1635936029,
                468 => 1636014089,
                469 => 1636018970,
                470 => 1636362839,
                471 => 1636449347,
                472 => 1636964297,
                473 => 1636971615,
                474 => 1638195971,
                475 => 1638365464,
                476 => 1638514913,
                477 => 1638993987,
                478 => 1639122665,
                479 => 1639139581,
                480 => 1639992771,
                481 => 1641289204,
                482 => 1642517958,
                483 => 1642732351,
                484 => 1642757286,
                485 => 1643366069,
                486 => 1643386819,
                487 => 1643724178,
                488 => 1643878976,
                489 => 1643892702,
                490 => 1645019769,
                491 => 1645453538,
                492 => 1646125417,
                493 => 1646397836,
                494 => 1646817331,
                495 => 1647260673,
                496 => 1647443222,
                497 => 1647511158,
                498 => 1648031611,
                499 => 1648031636,
                500 => 1648543185,
                501 => 1648709176,
                502 => 1648803451,
                503 => 1649040981,
                504 => 1649315608,
                505 => 1649858046,
                506 => 1650249241,
                507 => 1650444800,
                508 => 1650548599,
                509 => 1650620993,
                510 => 1650872291,
                511 => 1650981517,
                512 => 1651118773,
                513 => 1652166447,
                514 => 1652345915,
                515 => 1652441129,
                516 => 1652864153,
                517 => 1653376989,
                518 => 1653385302,
                519 => 1654839361,
                520 => 1654839361,
                521 => 1654839361,
                522 => 1655730949,
                523 => 1656397126,
                524 => 1656928097,
                525 => 1657011337,
                526 => 1657027979,
                527 => 1657173907,
                528 => 1658786605,
                529 => 1659256999,
                530 => 1659257296,
                531 => 1659257396,
                532 => 1659257496,
                533 => 1660814397,
                534 => 1661759290,
                535 => 1661771388,
                536 => 1663238480,
                537 => 1664512574,
                538 => 1664541794,
                539 => 1664894872,
                540 => 1665064823,
                541 => 1665267882,
                542 => 1667731399,
                543 => 1667806582,
                544 => 1667983492,
                545 => 1668677456,
                546 => 1669316067,
                547 => 1672164687,
                548 => 1672743034,
                549 => 1673001912,
                550 => 1673966228,
                551 => 1675218708,
                552 => 1675827655,
                553 => 1632281097,
                554 => 1636121186,
                555 => 1660813696,
                556 => 1641476963,
                557 => 1661505878,
                558 => 1632281097,
                559 => 1636121186,
                560 => 1660813696,
                561 => 1552899789,
                562 => 1555406153,
                563 => 1563785071,
                564 => 1564385954,
                565 => 1564385960,
                566 => 1565640170,
                567 => 1565640175,
                568 => 1595492054,
                569 => 1604502151,
            ],
            'shopware.security.csp_templates' => [
                'default' => ''."\n".'object-src \'none\';'."\n".'script-src \'none\';'."\n".'base-uri \'self\';'."\n".'            ',
                'administration' => ''."\n".'object-src \'none\';'."\n".'script-src \'strict-dynamic\' \'nonce-%nonce%\' \'unsafe-inline\' \'unsafe-eval\' https: http:;'."\n".'base-uri \'self\';'."\n".'            ',
                'storefront' => '',
                'installer' => '',
            ],
            'shopware.app_dir' => (\dirname(__DIR__, 4).'/custom/apps'),
            'env(SHOPWARE_DBAL_TIMEZONE_SUPPORT_ENABLED)' => 0,
            'env(SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH)' => 3,
            'env(INSTANCE_ID)' => 'install',
            'shopware.store_endpoints' => [
                'ping' => '/ping',
                'my_extensions' => '/swplatform/licenseenvironment',
                'my_licenses' => '/swplatform/licenses',
                'my_plugin_licenses' => '/swplatform/pluginlicenses',
                'my_plugin_updates' => '/swplatform/pluginupdates',
                'environment_information' => '/swplatform/environmentinformation',
                'updater_extension_compatibility' => '/swplatform/autoupdate',
                'updater_permission' => '/swplatform/autoupdate/permission',
                'plugin_download' => '/swplatform/pluginfiles/{pluginName}',
                'app_generate_signature' => '/swplatform/generatesignature',
                'cancel_license' => '/swplatform/pluginlicenses/%s/cancel',
                'login' => '/swplatform/login',
                'create_rating' => '/swplatform/extensionstore/extensions/%s/ratings',
                'user_info' => '/swplatform/userinfo',
            ],
            'env(SHOPWARE_UPDATE_TEST)' => '',
            'shopware.media.metadata.types' => [
                0 => '\\Shopware\\Core\\Content\\Media\\Metadata\\Type\\ImageMetadata',
                1 => '\\Shopware\\Core\\Content\\Media\\Metadata\\Type\\DocumentMetadata',
                2 => '\\Shopware\\Core\\Content\\Media\\Metadata\\Type\\VideoMetadata',
            ],
            'product_export.directory' => 'export',
            'product_export.read_buffer_size' => 100,
            'import_export.supported_entities' => [
                0 => 'customer',
                1 => 'product',
            ],
            'import_export.supported_file_types' => [
                0 => 'text/csv',
            ],
            'import_export.read_buffer_size' => 100,
            'import_export.write_buffer_size' => 100,
            'import_export.http_batch_size' => 100,
            'env(SHOPWARE_ADMINISTRATION_PATH_NAME)' => 'admin',
            'shopware_http_cache_enabled_default' => 1,
            'shopware_http_cache_default_ttl_default' => 7200,
            'shopware.twig.app_variable.allowed_server_params' => [
                0 => 'server_name',
                1 => 'request_uri',
                2 => 'app_url',
                3 => 'http_user_agent',
                4 => 'http_host',
                5 => 'server_name',
                6 => 'server_port',
                7 => 'redirect_url',
                8 => 'https',
                9 => 'forwarded',
                10 => 'host',
                11 => 'remote_addr',
                12 => 'http_x_forwarded_for',
                13 => 'http_x_forwarded_host',
                14 => 'http_x_forwarded_proto',
                15 => 'http_x_forwarded_port',
                16 => 'http_x_forwarded_prefix',
            ],
            'storefrontRoot' => (\dirname(__DIR__, 4).'/vendor/shopware/storefront'),
            'elasticsearch.index.config' => [
                'settings' => [
                    'index' => [
                        'number_of_shards' => 3,
                        'number_of_replicas' => 3,
                        'mapping.total_fields.limit' => 50000,
                        'mapping.nested_fields.limit' => 500,
                        'mapping.nested_objects.limit' => 1000000,
                    ],
                    'analysis' => [
                        'normalizer' => [
                            'sw_lowercase_normalizer' => [
                                'type' => 'custom',
                                'filter' => [
                                    0 => 'lowercase',
                                ],
                            ],
                        ],
                        'analyzer' => [
                            'sw_ngram_analyzer' => [
                                'type' => 'custom',
                                'tokenizer' => 'whitespace',
                                'filter' => [
                                    0 => 'lowercase',
                                    1 => 'sw_ngram_filter',
                                ],
                            ],
                        ],
                        'filter' => [
                            'sw_ngram_filter' => [
                                'type' => 'ngram',
                                'min_gram' => 4,
                                'max_gram' => 5,
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.index.mapping' => [
                'dynamic_templates' => [
                    0 => [
                        'keywords' => [
                            'match_mapping_type' => 'string',
                            'mapping' => [
                                'type' => 'keyword',
                                'normalizer' => 'sw_lowercase_normalizer',
                                'fields' => [
                                    'text' => [
                                        'type' => 'text',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.index.config' => [
                'settings' => [
                    'index' => [
                        'number_of_shards' => 3,
                        'number_of_replicas' => 3,
                        'mapping.total_fields.limit' => 50000,
                        'mapping.nested_fields.limit' => 500,
                        'mapping.nested_objects.limit' => 1000000,
                    ],
                    'analysis' => [
                        'normalizer' => [
                            'sw_lowercase_normalizer' => [
                                'type' => 'custom',
                                'filter' => [
                                    0 => 'lowercase',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.index.mapping' => [
                'dynamic_templates' => [
                    0 => [
                        'keywords' => [
                            'match_mapping_type' => 'string',
                            'mapping' => [
                                'type' => 'keyword',
                                'normalizer' => 'sw_lowercase_normalizer',
                                'fields' => [
                                    'text' => [
                                        'type' => 'text',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'default_elasticsearch_prefix' => 'sw',
            'env(SHOPWARE_ES_ENABLED)' => '',
            'env(SHOPWARE_ES_INDEXING_ENABLED)' => '',
            'env(SHOPWARE_ES_HOSTS)' => '',
            'env(SHOPWARE_ES_INDEX_PREFIX)' => 'sw',
            'env(SHOPWARE_ES_THROW_EXCEPTION)' => '',
            'env(SHOPWARE_ADMIN_ES_ENABLED)' => '',
            'env(ADMIN_OPENSEARCH_URL)' => '',
            'env(SHOPWARE_ADMIN_ES_INDEX_PREFIX)' => 'sw-admin',
            'env(SHOPWARE_ADMIN_ES_REFRESH_INDICES)' => '',
            'env(SHOPWARE_ES_INDEXING_BATCH_SIZE)' => 100,
            'env(APP_URL_CHECK_DISABLED)' => false,
            'container.dumper.inline_class_loader' => true,
            'container.dumper.inline_factories' => true,
            'jwt_private_key_passphrase_default' => 'shopware',
            'shopware.store.frw' => true,
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => [

            ],
            'kernel.default_locale' => 'en-GB',
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'debug.file_link_format' => NULL,
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet'),
            'debug.error_handler.throw_at' => 0,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'kernel::loadRoutes',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => [
                'cache_limiter' => '0',
                'name' => 'session-',
                'cookie_secure' => 'auto',
                'cookie_httponly' => true,
                'cookie_samesite' => 'lax',
                'gc_probability' => 1,
            ],
            'session.metadata.update_threshold' => 0,
            'validator.translation_domain' => 'validators',
            'data_collector.templates' => [

            ],
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => [

            ],
            'monolog.handlers_to_channels' => [
                'monolog.handler.business_event_handler_buffer' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'business_events',
                    ],
                ],
                'monolog.handler.console' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'event',
                        1 => 'doctrine',
                    ],
                ],
                'monolog.handler.main' => NULL,
            ],
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 4).'/templates'),
            'enqueue.transport.default.receive_timeout' => 1000,
            'enqueue.client.default.router_processor' => 'enqueue.client.default.router_processor',
            'enqueue.client.default.router_queue_name' => 'default',
            'enqueue.client.default.default_queue_name' => 'default',
            'enqueue.transports' => [
                0 => 'default',
            ],
            'enqueue.clients' => [
                0 => 'default',
            ],
            'enqueue.default_transport' => 'default',
            'enqueue.default_client' => 'default',
            'shopware.feature' => [
                'flags' => [
                    'v6.5.0.0' => [
                        'default' => false,
                        'major' => true,
                    ],
                    'PERFORMANCE_TWEAKS' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Performance improvements that include a breaking change',
                    ],
                    'FEATURE_NEXT_1797' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'composer require for plugins',
                    ],
                    'FEATURE_NEXT_16710' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Do not allow empty ids provided in criteria',
                    ],
                    'FEATURE_NEXT_13810' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Deprecate old promotion module',
                    ],
                    'FEATURE_NEXT_13250' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Reduce database queries if all required data for the line items is already assign',
                    ],
                    'FEATURE_NEXT_17276' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Don\'t override languageId of SalesChannel in SalesChannelContext',
                    ],
                    'FEATURE_NEXT_16151' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Remove CheapestPriceField from product entity, to speed up entity hydration',
                    ],
                    'FEATURE_NEXT_16155' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'EntityLoadedEventFactory will be required in repositories',
                    ],
                    'FEATURE_NEXT_19501' => [
                        'default' => false,
                        'major' => false,
                        'description' => 'Disables the cart.container function',
                    ],
                    'FEATURE_NEXT_15053' => [
                        'default' => false,
                        'major' => false,
                        'description' => 'Replace wrong displayed characters in number format',
                    ],
                    'FEATURE_NEXT_18215' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Rules are aware of their assignment',
                    ],
                    'FEATURE_NEXT_15815' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Remove single record handling in sync service. Only single operation should be supported',
                    ],
                    'FEATURE_NEXT_14699' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Refactoring of Storefront theme assets',
                    ],
                    'FEATURE_NEXT_15707' => [
                        'default' => false,
                        'major' => false,
                        'description' => 'Delivery notice for EU geoblocking regulation',
                    ],
                    'FEATURE_NEXT_14360' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'App System 4.0 - Build action button messaging system',
                    ],
                    'FEATURE_NEXT_15172' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Sanitize html of fields with AllowHtml flag',
                    ],
                    'FEATURE_NEXT_14001' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Newsletter DOI for registered customers',
                    ],
                    'FEATURE_NEXT_7739' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Optional salutation',
                    ],
                    'FEATURE_NEXT_16200' => [
                        'default' => false,
                        'major' => false,
                        'description' => 'Register Doi Domain',
                    ],
                    'FEATURE_NEXT_13410' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Make sales channels required in seo generator',
                    ],
                    'FEATURE_NEXT_15917' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Move storefront script tags to head with defer',
                    ],
                    'FEATURE_NEXT_15957' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'VAT id field for guest',
                    ],
                    'FEATURE_NEXT_13601' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Default transaction state for async app payments',
                    ],
                    'FEATURE_NEXT_16992' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Remove page_product_detail_not_available and buy_widget_not_available block',
                    ],
                    'FEATURE_NEXT_7530' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Improve orders UX in Administration',
                    ],
                    'FEATURE_NEXT_16824' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Cart merged event',
                    ],
                    'FEATURE_NEXT_16271' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Refactor `sw-simple-search-field` component to a transparent wrapper component',
                    ],
                    'FEATURE_NEXT_15381' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Save theme compilation',
                    ],
                    'FEATURE_NEXT_17275' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'StorefrontRenderEvent only gets original view',
                    ],
                    'FEATURE_NEXT_17016' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Add, update or improve the selection and specification of Rule Builder Condition Fields.',
                    ],
                    'FEATURE_NEXT_16236' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Change customer creation behaviour on checkout/register page to opt in customer account.',
                    ],
                    'FEATURE_NEXT_16640' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Change ExceptionHandlerInterface by removing Command $command argument',
                    ],
                    'FEATURE_NEXT_17858' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Major feature flag for Business Event',
                    ],
                    'FEATURE_NEXT_6758' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Layout assignment for category as list',
                    ],
                    'FEATURE_NEXT_19048' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Fix media resolution in theme',
                    ],
                    'FEATURE_NEXT_19822' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Enables lazy loading components in the administration',
                    ],
                    'FEATURE_NEXT_18129' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Require positionIdentifier for some components',
                    ],
                    'FEATURE_NEXT_19163' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'one to one inheritance',
                    ],
                    'FEATURE_NEXT_18187' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Move admin dashboard statistics into separate component',
                    ],
                    'FEATURE_NEXT_17978' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Change component factory to work with extension overrides in Administration',
                    ],
                    'FEATURE_NEXT_11634' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Webpack alias refactor',
                    ],
                    'FEATURE_NEXT_21547' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Change admin criteria defaults',
                    ],
                    'FEATURE_NEXT_22900' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Admin search configuration is used in Elasticsearch',
                    ],
                ],
            ],
            'shopware.feature.flags' => [
                'v6.5.0.0' => [
                    'default' => false,
                    'major' => true,
                ],
                'PERFORMANCE_TWEAKS' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Performance improvements that include a breaking change',
                ],
                'FEATURE_NEXT_1797' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'composer require for plugins',
                ],
                'FEATURE_NEXT_16710' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Do not allow empty ids provided in criteria',
                ],
                'FEATURE_NEXT_13810' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Deprecate old promotion module',
                ],
                'FEATURE_NEXT_13250' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Reduce database queries if all required data for the line items is already assign',
                ],
                'FEATURE_NEXT_17276' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Don\'t override languageId of SalesChannel in SalesChannelContext',
                ],
                'FEATURE_NEXT_16151' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Remove CheapestPriceField from product entity, to speed up entity hydration',
                ],
                'FEATURE_NEXT_16155' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'EntityLoadedEventFactory will be required in repositories',
                ],
                'FEATURE_NEXT_19501' => [
                    'default' => false,
                    'major' => false,
                    'description' => 'Disables the cart.container function',
                ],
                'FEATURE_NEXT_15053' => [
                    'default' => false,
                    'major' => false,
                    'description' => 'Replace wrong displayed characters in number format',
                ],
                'FEATURE_NEXT_18215' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Rules are aware of their assignment',
                ],
                'FEATURE_NEXT_15815' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Remove single record handling in sync service. Only single operation should be supported',
                ],
                'FEATURE_NEXT_14699' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Refactoring of Storefront theme assets',
                ],
                'FEATURE_NEXT_15707' => [
                    'default' => false,
                    'major' => false,
                    'description' => 'Delivery notice for EU geoblocking regulation',
                ],
                'FEATURE_NEXT_14360' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'App System 4.0 - Build action button messaging system',
                ],
                'FEATURE_NEXT_15172' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Sanitize html of fields with AllowHtml flag',
                ],
                'FEATURE_NEXT_14001' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Newsletter DOI for registered customers',
                ],
                'FEATURE_NEXT_7739' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Optional salutation',
                ],
                'FEATURE_NEXT_16200' => [
                    'default' => false,
                    'major' => false,
                    'description' => 'Register Doi Domain',
                ],
                'FEATURE_NEXT_13410' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Make sales channels required in seo generator',
                ],
                'FEATURE_NEXT_15917' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Move storefront script tags to head with defer',
                ],
                'FEATURE_NEXT_15957' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'VAT id field for guest',
                ],
                'FEATURE_NEXT_13601' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Default transaction state for async app payments',
                ],
                'FEATURE_NEXT_16992' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Remove page_product_detail_not_available and buy_widget_not_available block',
                ],
                'FEATURE_NEXT_7530' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Improve orders UX in Administration',
                ],
                'FEATURE_NEXT_16824' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Cart merged event',
                ],
                'FEATURE_NEXT_16271' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Refactor `sw-simple-search-field` component to a transparent wrapper component',
                ],
                'FEATURE_NEXT_15381' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Save theme compilation',
                ],
                'FEATURE_NEXT_17275' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'StorefrontRenderEvent only gets original view',
                ],
                'FEATURE_NEXT_17016' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Add, update or improve the selection and specification of Rule Builder Condition Fields.',
                ],
                'FEATURE_NEXT_16236' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Change customer creation behaviour on checkout/register page to opt in customer account.',
                ],
                'FEATURE_NEXT_16640' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Change ExceptionHandlerInterface by removing Command $command argument',
                ],
                'FEATURE_NEXT_17858' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Major feature flag for Business Event',
                ],
                'FEATURE_NEXT_6758' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Layout assignment for category as list',
                ],
                'FEATURE_NEXT_19048' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Fix media resolution in theme',
                ],
                'FEATURE_NEXT_19822' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Enables lazy loading components in the administration',
                ],
                'FEATURE_NEXT_18129' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Require positionIdentifier for some components',
                ],
                'FEATURE_NEXT_19163' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'one to one inheritance',
                ],
                'FEATURE_NEXT_18187' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Move admin dashboard statistics into separate component',
                ],
                'FEATURE_NEXT_17978' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Change component factory to work with extension overrides in Administration',
                ],
                'FEATURE_NEXT_11634' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Webpack alias refactor',
                ],
                'FEATURE_NEXT_21547' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Change admin criteria defaults',
                ],
                'FEATURE_NEXT_22900' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Admin search configuration is used in Elasticsearch',
                ],
            ],
            'shopware.feature.flags.v6.5.0.0' => [
                'default' => false,
                'major' => true,
            ],
            'shopware.feature.flags.v6.5.0.0.default' => false,
            'shopware.feature.flags.v6.5.0.0.major' => true,
            'shopware.feature.flags.PERFORMANCE_TWEAKS' => [
                'default' => false,
                'major' => true,
                'description' => 'Performance improvements that include a breaking change',
            ],
            'shopware.feature.flags.PERFORMANCE_TWEAKS.default' => false,
            'shopware.feature.flags.PERFORMANCE_TWEAKS.major' => true,
            'shopware.feature.flags.PERFORMANCE_TWEAKS.description' => 'Performance improvements that include a breaking change',
            'shopware.feature.flags.FEATURE_NEXT_1797' => [
                'default' => false,
                'major' => true,
                'description' => 'composer require for plugins',
            ],
            'shopware.feature.flags.FEATURE_NEXT_1797.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_1797.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_1797.description' => 'composer require for plugins',
            'shopware.feature.flags.FEATURE_NEXT_16710' => [
                'default' => false,
                'major' => true,
                'description' => 'Do not allow empty ids provided in criteria',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16710.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16710.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_16710.description' => 'Do not allow empty ids provided in criteria',
            'shopware.feature.flags.FEATURE_NEXT_13810' => [
                'default' => false,
                'major' => true,
                'description' => 'Deprecate old promotion module',
            ],
            'shopware.feature.flags.FEATURE_NEXT_13810.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_13810.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_13810.description' => 'Deprecate old promotion module',
            'shopware.feature.flags.FEATURE_NEXT_13250' => [
                'default' => false,
                'major' => true,
                'description' => 'Reduce database queries if all required data for the line items is already assign',
            ],
            'shopware.feature.flags.FEATURE_NEXT_13250.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_13250.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_13250.description' => 'Reduce database queries if all required data for the line items is already assign',
            'shopware.feature.flags.FEATURE_NEXT_17276' => [
                'default' => false,
                'major' => true,
                'description' => 'Don\'t override languageId of SalesChannel in SalesChannelContext',
            ],
            'shopware.feature.flags.FEATURE_NEXT_17276.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_17276.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_17276.description' => 'Don\'t override languageId of SalesChannel in SalesChannelContext',
            'shopware.feature.flags.FEATURE_NEXT_16151' => [
                'default' => false,
                'major' => true,
                'description' => 'Remove CheapestPriceField from product entity, to speed up entity hydration',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16151.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16151.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_16151.description' => 'Remove CheapestPriceField from product entity, to speed up entity hydration',
            'shopware.feature.flags.FEATURE_NEXT_16155' => [
                'default' => false,
                'major' => true,
                'description' => 'EntityLoadedEventFactory will be required in repositories',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16155.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16155.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_16155.description' => 'EntityLoadedEventFactory will be required in repositories',
            'shopware.feature.flags.FEATURE_NEXT_19501' => [
                'default' => false,
                'major' => false,
                'description' => 'Disables the cart.container function',
            ],
            'shopware.feature.flags.FEATURE_NEXT_19501.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_19501.major' => false,
            'shopware.feature.flags.FEATURE_NEXT_19501.description' => 'Disables the cart.container function',
            'shopware.feature.flags.FEATURE_NEXT_15053' => [
                'default' => false,
                'major' => false,
                'description' => 'Replace wrong displayed characters in number format',
            ],
            'shopware.feature.flags.FEATURE_NEXT_15053.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_15053.major' => false,
            'shopware.feature.flags.FEATURE_NEXT_15053.description' => 'Replace wrong displayed characters in number format',
            'shopware.feature.flags.FEATURE_NEXT_18215' => [
                'default' => false,
                'major' => true,
                'description' => 'Rules are aware of their assignment',
            ],
            'shopware.feature.flags.FEATURE_NEXT_18215.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_18215.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_18215.description' => 'Rules are aware of their assignment',
            'shopware.feature.flags.FEATURE_NEXT_15815' => [
                'default' => false,
                'major' => true,
                'description' => 'Remove single record handling in sync service. Only single operation should be supported',
            ],
            'shopware.feature.flags.FEATURE_NEXT_15815.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_15815.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_15815.description' => 'Remove single record handling in sync service. Only single operation should be supported',
            'shopware.feature.flags.FEATURE_NEXT_14699' => [
                'default' => false,
                'major' => true,
                'description' => 'Refactoring of Storefront theme assets',
            ],
            'shopware.feature.flags.FEATURE_NEXT_14699.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_14699.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_14699.description' => 'Refactoring of Storefront theme assets',
            'shopware.feature.flags.FEATURE_NEXT_15707' => [
                'default' => false,
                'major' => false,
                'description' => 'Delivery notice for EU geoblocking regulation',
            ],
            'shopware.feature.flags.FEATURE_NEXT_15707.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_15707.major' => false,
            'shopware.feature.flags.FEATURE_NEXT_15707.description' => 'Delivery notice for EU geoblocking regulation',
            'shopware.feature.flags.FEATURE_NEXT_14360' => [
                'default' => false,
                'major' => true,
                'description' => 'App System 4.0 - Build action button messaging system',
            ],
            'shopware.feature.flags.FEATURE_NEXT_14360.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_14360.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_14360.description' => 'App System 4.0 - Build action button messaging system',
            'shopware.feature.flags.FEATURE_NEXT_15172' => [
                'default' => false,
                'major' => true,
                'description' => 'Sanitize html of fields with AllowHtml flag',
            ],
            'shopware.feature.flags.FEATURE_NEXT_15172.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_15172.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_15172.description' => 'Sanitize html of fields with AllowHtml flag',
            'shopware.feature.flags.FEATURE_NEXT_14001' => [
                'default' => false,
                'major' => true,
                'description' => 'Newsletter DOI for registered customers',
            ],
            'shopware.feature.flags.FEATURE_NEXT_14001.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_14001.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_14001.description' => 'Newsletter DOI for registered customers',
            'shopware.feature.flags.FEATURE_NEXT_7739' => [
                'default' => false,
                'major' => true,
                'description' => 'Optional salutation',
            ],
            'shopware.feature.flags.FEATURE_NEXT_7739.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_7739.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_7739.description' => 'Optional salutation',
            'shopware.feature.flags.FEATURE_NEXT_16200' => [
                'default' => false,
                'major' => false,
                'description' => 'Register Doi Domain',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16200.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16200.major' => false,
            'shopware.feature.flags.FEATURE_NEXT_16200.description' => 'Register Doi Domain',
            'shopware.feature.flags.FEATURE_NEXT_13410' => [
                'default' => false,
                'major' => true,
                'description' => 'Make sales channels required in seo generator',
            ],
            'shopware.feature.flags.FEATURE_NEXT_13410.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_13410.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_13410.description' => 'Make sales channels required in seo generator',
            'shopware.feature.flags.FEATURE_NEXT_15917' => [
                'default' => false,
                'major' => true,
                'description' => 'Move storefront script tags to head with defer',
            ],
            'shopware.feature.flags.FEATURE_NEXT_15917.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_15917.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_15917.description' => 'Move storefront script tags to head with defer',
            'shopware.feature.flags.FEATURE_NEXT_15957' => [
                'default' => false,
                'major' => true,
                'description' => 'VAT id field for guest',
            ],
            'shopware.feature.flags.FEATURE_NEXT_15957.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_15957.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_15957.description' => 'VAT id field for guest',
            'shopware.feature.flags.FEATURE_NEXT_13601' => [
                'default' => false,
                'major' => true,
                'description' => 'Default transaction state for async app payments',
            ],
            'shopware.feature.flags.FEATURE_NEXT_13601.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_13601.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_13601.description' => 'Default transaction state for async app payments',
            'shopware.feature.flags.FEATURE_NEXT_16992' => [
                'default' => false,
                'major' => true,
                'description' => 'Remove page_product_detail_not_available and buy_widget_not_available block',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16992.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16992.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_16992.description' => 'Remove page_product_detail_not_available and buy_widget_not_available block',
            'shopware.feature.flags.FEATURE_NEXT_7530' => [
                'default' => false,
                'major' => true,
                'description' => 'Improve orders UX in Administration',
            ],
            'shopware.feature.flags.FEATURE_NEXT_7530.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_7530.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_7530.description' => 'Improve orders UX in Administration',
            'shopware.feature.flags.FEATURE_NEXT_16824' => [
                'default' => false,
                'major' => true,
                'description' => 'Cart merged event',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16824.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16824.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_16824.description' => 'Cart merged event',
            'shopware.feature.flags.FEATURE_NEXT_16271' => [
                'default' => false,
                'major' => true,
                'description' => 'Refactor `sw-simple-search-field` component to a transparent wrapper component',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16271.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16271.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_16271.description' => 'Refactor `sw-simple-search-field` component to a transparent wrapper component',
            'shopware.feature.flags.FEATURE_NEXT_15381' => [
                'default' => false,
                'major' => true,
                'description' => 'Save theme compilation',
            ],
            'shopware.feature.flags.FEATURE_NEXT_15381.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_15381.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_15381.description' => 'Save theme compilation',
            'shopware.feature.flags.FEATURE_NEXT_17275' => [
                'default' => false,
                'major' => true,
                'description' => 'StorefrontRenderEvent only gets original view',
            ],
            'shopware.feature.flags.FEATURE_NEXT_17275.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_17275.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_17275.description' => 'StorefrontRenderEvent only gets original view',
            'shopware.feature.flags.FEATURE_NEXT_17016' => [
                'default' => false,
                'major' => true,
                'description' => 'Add, update or improve the selection and specification of Rule Builder Condition Fields.',
            ],
            'shopware.feature.flags.FEATURE_NEXT_17016.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_17016.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_17016.description' => 'Add, update or improve the selection and specification of Rule Builder Condition Fields.',
            'shopware.feature.flags.FEATURE_NEXT_16236' => [
                'default' => false,
                'major' => true,
                'description' => 'Change customer creation behaviour on checkout/register page to opt in customer account.',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16236.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16236.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_16236.description' => 'Change customer creation behaviour on checkout/register page to opt in customer account.',
            'shopware.feature.flags.FEATURE_NEXT_16640' => [
                'default' => false,
                'major' => true,
                'description' => 'Change ExceptionHandlerInterface by removing Command $command argument',
            ],
            'shopware.feature.flags.FEATURE_NEXT_16640.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_16640.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_16640.description' => 'Change ExceptionHandlerInterface by removing Command $command argument',
            'shopware.feature.flags.FEATURE_NEXT_17858' => [
                'default' => false,
                'major' => true,
                'description' => 'Major feature flag for Business Event',
            ],
            'shopware.feature.flags.FEATURE_NEXT_17858.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_17858.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_17858.description' => 'Major feature flag for Business Event',
            'shopware.feature.flags.FEATURE_NEXT_6758' => [
                'default' => false,
                'major' => true,
                'description' => 'Layout assignment for category as list',
            ],
            'shopware.feature.flags.FEATURE_NEXT_6758.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_6758.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_6758.description' => 'Layout assignment for category as list',
            'shopware.feature.flags.FEATURE_NEXT_19048' => [
                'default' => false,
                'major' => true,
                'description' => 'Fix media resolution in theme',
            ],
            'shopware.feature.flags.FEATURE_NEXT_19048.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_19048.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_19048.description' => 'Fix media resolution in theme',
            'shopware.feature.flags.FEATURE_NEXT_19822' => [
                'default' => false,
                'major' => true,
                'description' => 'Enables lazy loading components in the administration',
            ],
            'shopware.feature.flags.FEATURE_NEXT_19822.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_19822.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_19822.description' => 'Enables lazy loading components in the administration',
            'shopware.feature.flags.FEATURE_NEXT_18129' => [
                'default' => false,
                'major' => true,
                'description' => 'Require positionIdentifier for some components',
            ],
            'shopware.feature.flags.FEATURE_NEXT_18129.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_18129.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_18129.description' => 'Require positionIdentifier for some components',
            'shopware.feature.flags.FEATURE_NEXT_19163' => [
                'default' => false,
                'major' => true,
                'description' => 'one to one inheritance',
            ],
            'shopware.feature.flags.FEATURE_NEXT_19163.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_19163.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_19163.description' => 'one to one inheritance',
            'shopware.feature.flags.FEATURE_NEXT_18187' => [
                'default' => false,
                'major' => true,
                'description' => 'Move admin dashboard statistics into separate component',
            ],
            'shopware.feature.flags.FEATURE_NEXT_18187.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_18187.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_18187.description' => 'Move admin dashboard statistics into separate component',
            'shopware.feature.flags.FEATURE_NEXT_17978' => [
                'default' => false,
                'major' => true,
                'description' => 'Change component factory to work with extension overrides in Administration',
            ],
            'shopware.feature.flags.FEATURE_NEXT_17978.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_17978.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_17978.description' => 'Change component factory to work with extension overrides in Administration',
            'shopware.feature.flags.FEATURE_NEXT_11634' => [
                'default' => false,
                'major' => true,
                'description' => 'Webpack alias refactor',
            ],
            'shopware.feature.flags.FEATURE_NEXT_11634.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_11634.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_11634.description' => 'Webpack alias refactor',
            'shopware.feature.flags.FEATURE_NEXT_21547' => [
                'default' => false,
                'major' => true,
                'description' => 'Change admin criteria defaults',
            ],
            'shopware.feature.flags.FEATURE_NEXT_21547.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_21547.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_21547.description' => 'Change admin criteria defaults',
            'shopware.feature.flags.FEATURE_NEXT_22900' => [
                'default' => false,
                'major' => true,
                'description' => 'Admin search configuration is used in Elasticsearch',
            ],
            'shopware.feature.flags.FEATURE_NEXT_22900.default' => false,
            'shopware.feature.flags.FEATURE_NEXT_22900.major' => true,
            'shopware.feature.flags.FEATURE_NEXT_22900.description' => 'Admin search configuration is used in Elasticsearch',
            'shopware.profiler' => [
                'integrations' => [

                ],
            ],
            'shopware.profiler.integrations' => [

            ],
            'shopware.filesystem' => [
                'private' => [
                    'type' => 'local',
                    'config' => [
                        'root' => (\dirname(__DIR__, 4).'/files'),
                    ],
                ],
                'public' => [
                    'type' => 'local',
                    'config' => [
                        'root' => (\dirname(__DIR__, 4).'/public'),
                    ],
                ],
                'temp' => [
                    'type' => 'local',
                    'config' => [
                        'root' => \dirname(__DIR__, 3),
                    ],
                ],
                'theme' => [

                ],
                'asset' => [

                ],
                'sitemap' => [

                ],
                'allowed_extensions' => [
                    0 => 'jpg',
                    1 => 'jpeg',
                    2 => 'png',
                    3 => 'webp',
                    4 => 'gif',
                    5 => 'svg',
                    6 => 'bmp',
                    7 => 'tiff',
                    8 => 'tif',
                    9 => 'eps',
                    10 => 'webm',
                    11 => 'mkv',
                    12 => 'flv',
                    13 => 'ogv',
                    14 => 'ogg',
                    15 => 'mov',
                    16 => 'mp4',
                    17 => 'avi',
                    18 => 'wmv',
                    19 => 'pdf',
                    20 => 'aac',
                    21 => 'mp3',
                    22 => 'wav',
                    23 => 'flac',
                    24 => 'oga',
                    25 => 'wma',
                    26 => 'txt',
                    27 => 'doc',
                    28 => 'ico',
                ],
                'private_allowed_extensions' => [
                    0 => 'jpg',
                    1 => 'jpeg',
                    2 => 'png',
                    3 => 'webp',
                    4 => 'gif',
                    5 => 'svg',
                    6 => 'bmp',
                    7 => 'tiff',
                    8 => 'tif',
                    9 => 'eps',
                    10 => 'webm',
                    11 => 'mkv',
                    12 => 'flv',
                    13 => 'ogv',
                    14 => 'ogg',
                    15 => 'mov',
                    16 => 'mp4',
                    17 => 'avi',
                    18 => 'wmv',
                    19 => 'pdf',
                    20 => 'aac',
                    21 => 'mp3',
                    22 => 'wav',
                    23 => 'flac',
                    24 => 'oga',
                    25 => 'wma',
                    26 => 'txt',
                    27 => 'doc',
                    28 => 'ico',
                    29 => 'zip',
                    30 => 'rar',
                ],
                'private_local_download_strategy' => 'php',
            ],
            'shopware.filesystem.private' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/files'),
                ],
            ],
            'shopware.filesystem.private.type' => 'local',
            'shopware.filesystem.private.config' => [
                'root' => (\dirname(__DIR__, 4).'/files'),
            ],
            'shopware.filesystem.private.config.root' => (\dirname(__DIR__, 4).'/files'),
            'shopware.filesystem.public' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/public'),
                ],
            ],
            'shopware.filesystem.public.type' => 'local',
            'shopware.filesystem.public.config' => [
                'root' => (\dirname(__DIR__, 4).'/public'),
            ],
            'shopware.filesystem.public.config.root' => (\dirname(__DIR__, 4).'/public'),
            'shopware.filesystem.temp' => [
                'type' => 'local',
                'config' => [
                    'root' => \dirname(__DIR__, 3),
                ],
            ],
            'shopware.filesystem.temp.type' => 'local',
            'shopware.filesystem.temp.config' => [
                'root' => \dirname(__DIR__, 3),
            ],
            'shopware.filesystem.temp.config.root' => \dirname(__DIR__, 3),
            'shopware.filesystem.theme' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/public'),
                ],
            ],
            'shopware.filesystem.asset' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/public'),
                ],
            ],
            'shopware.filesystem.sitemap' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/public'),
                ],
            ],
            'shopware.filesystem.allowed_extensions' => [
                0 => 'jpg',
                1 => 'jpeg',
                2 => 'png',
                3 => 'webp',
                4 => 'gif',
                5 => 'svg',
                6 => 'bmp',
                7 => 'tiff',
                8 => 'tif',
                9 => 'eps',
                10 => 'webm',
                11 => 'mkv',
                12 => 'flv',
                13 => 'ogv',
                14 => 'ogg',
                15 => 'mov',
                16 => 'mp4',
                17 => 'avi',
                18 => 'wmv',
                19 => 'pdf',
                20 => 'aac',
                21 => 'mp3',
                22 => 'wav',
                23 => 'flac',
                24 => 'oga',
                25 => 'wma',
                26 => 'txt',
                27 => 'doc',
                28 => 'ico',
            ],
            'shopware.filesystem.allowed_extensions.0' => 'jpg',
            'shopware.filesystem.allowed_extensions.1' => 'jpeg',
            'shopware.filesystem.allowed_extensions.2' => 'png',
            'shopware.filesystem.allowed_extensions.3' => 'webp',
            'shopware.filesystem.allowed_extensions.4' => 'gif',
            'shopware.filesystem.allowed_extensions.5' => 'svg',
            'shopware.filesystem.allowed_extensions.6' => 'bmp',
            'shopware.filesystem.allowed_extensions.7' => 'tiff',
            'shopware.filesystem.allowed_extensions.8' => 'tif',
            'shopware.filesystem.allowed_extensions.9' => 'eps',
            'shopware.filesystem.allowed_extensions.10' => 'webm',
            'shopware.filesystem.allowed_extensions.11' => 'mkv',
            'shopware.filesystem.allowed_extensions.12' => 'flv',
            'shopware.filesystem.allowed_extensions.13' => 'ogv',
            'shopware.filesystem.allowed_extensions.14' => 'ogg',
            'shopware.filesystem.allowed_extensions.15' => 'mov',
            'shopware.filesystem.allowed_extensions.16' => 'mp4',
            'shopware.filesystem.allowed_extensions.17' => 'avi',
            'shopware.filesystem.allowed_extensions.18' => 'wmv',
            'shopware.filesystem.allowed_extensions.19' => 'pdf',
            'shopware.filesystem.allowed_extensions.20' => 'aac',
            'shopware.filesystem.allowed_extensions.21' => 'mp3',
            'shopware.filesystem.allowed_extensions.22' => 'wav',
            'shopware.filesystem.allowed_extensions.23' => 'flac',
            'shopware.filesystem.allowed_extensions.24' => 'oga',
            'shopware.filesystem.allowed_extensions.25' => 'wma',
            'shopware.filesystem.allowed_extensions.26' => 'txt',
            'shopware.filesystem.allowed_extensions.27' => 'doc',
            'shopware.filesystem.allowed_extensions.28' => 'ico',
            'shopware.filesystem.private_allowed_extensions' => [
                0 => 'jpg',
                1 => 'jpeg',
                2 => 'png',
                3 => 'webp',
                4 => 'gif',
                5 => 'svg',
                6 => 'bmp',
                7 => 'tiff',
                8 => 'tif',
                9 => 'eps',
                10 => 'webm',
                11 => 'mkv',
                12 => 'flv',
                13 => 'ogv',
                14 => 'ogg',
                15 => 'mov',
                16 => 'mp4',
                17 => 'avi',
                18 => 'wmv',
                19 => 'pdf',
                20 => 'aac',
                21 => 'mp3',
                22 => 'wav',
                23 => 'flac',
                24 => 'oga',
                25 => 'wma',
                26 => 'txt',
                27 => 'doc',
                28 => 'ico',
                29 => 'zip',
                30 => 'rar',
            ],
            'shopware.filesystem.private_allowed_extensions.0' => 'jpg',
            'shopware.filesystem.private_allowed_extensions.1' => 'jpeg',
            'shopware.filesystem.private_allowed_extensions.2' => 'png',
            'shopware.filesystem.private_allowed_extensions.3' => 'webp',
            'shopware.filesystem.private_allowed_extensions.4' => 'gif',
            'shopware.filesystem.private_allowed_extensions.5' => 'svg',
            'shopware.filesystem.private_allowed_extensions.6' => 'bmp',
            'shopware.filesystem.private_allowed_extensions.7' => 'tiff',
            'shopware.filesystem.private_allowed_extensions.8' => 'tif',
            'shopware.filesystem.private_allowed_extensions.9' => 'eps',
            'shopware.filesystem.private_allowed_extensions.10' => 'webm',
            'shopware.filesystem.private_allowed_extensions.11' => 'mkv',
            'shopware.filesystem.private_allowed_extensions.12' => 'flv',
            'shopware.filesystem.private_allowed_extensions.13' => 'ogv',
            'shopware.filesystem.private_allowed_extensions.14' => 'ogg',
            'shopware.filesystem.private_allowed_extensions.15' => 'mov',
            'shopware.filesystem.private_allowed_extensions.16' => 'mp4',
            'shopware.filesystem.private_allowed_extensions.17' => 'avi',
            'shopware.filesystem.private_allowed_extensions.18' => 'wmv',
            'shopware.filesystem.private_allowed_extensions.19' => 'pdf',
            'shopware.filesystem.private_allowed_extensions.20' => 'aac',
            'shopware.filesystem.private_allowed_extensions.21' => 'mp3',
            'shopware.filesystem.private_allowed_extensions.22' => 'wav',
            'shopware.filesystem.private_allowed_extensions.23' => 'flac',
            'shopware.filesystem.private_allowed_extensions.24' => 'oga',
            'shopware.filesystem.private_allowed_extensions.25' => 'wma',
            'shopware.filesystem.private_allowed_extensions.26' => 'txt',
            'shopware.filesystem.private_allowed_extensions.27' => 'doc',
            'shopware.filesystem.private_allowed_extensions.28' => 'ico',
            'shopware.filesystem.private_allowed_extensions.29' => 'zip',
            'shopware.filesystem.private_allowed_extensions.30' => 'rar',
            'shopware.filesystem.private_local_download_strategy' => 'php',
            'shopware.cdn.url' => '',
            'shopware.increment' => [
                'user_activity' => [
                    'type' => 'mysql',
                ],
                'message_queue' => [
                    'type' => 'mysql',
                ],
            ],
            'shopware.increment.user_activity' => [
                'type' => 'mysql',
            ],
            'shopware.increment.user_activity.type' => 'mysql',
            'shopware.increment.message_queue' => [
                'type' => 'mysql',
            ],
            'shopware.increment.message_queue.type' => 'mysql',
            'shopware.api' => [
                'max_limit' => 100,
                'api_browser' => [
                    'auth_required' => true,
                ],
                'store' => [
                    'context_lifetime' => 'P1D',
                ],
                'rate_limiter' => [
                    'login' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 10,
                                'interval' => '10 seconds',
                            ],
                            1 => [
                                'limit' => 15,
                                'interval' => '30 seconds',
                            ],
                            2 => [
                                'limit' => 20,
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'guest_login' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 10,
                                'interval' => '10 seconds',
                            ],
                            1 => [
                                'limit' => 15,
                                'interval' => '30 seconds',
                            ],
                            2 => [
                                'limit' => 20,
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'oauth' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 10,
                                'interval' => '10 seconds',
                            ],
                            1 => [
                                'limit' => 15,
                                'interval' => '30 seconds',
                            ],
                            2 => [
                                'limit' => 20,
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'reset_password' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 3,
                                'interval' => '30 seconds',
                            ],
                            1 => [
                                'limit' => 5,
                                'interval' => '60 seconds',
                            ],
                            2 => [
                                'limit' => 10,
                                'interval' => '90 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'user_recovery' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 3,
                                'interval' => '30 seconds',
                            ],
                            1 => [
                                'limit' => 5,
                                'interval' => '60 seconds',
                            ],
                            2 => [
                                'limit' => 10,
                                'interval' => '90 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'contact_form' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 3,
                                'interval' => '30 seconds',
                            ],
                            1 => [
                                'limit' => 5,
                                'interval' => '60 seconds',
                            ],
                            2 => [
                                'limit' => 10,
                                'interval' => '90 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'notification' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 10,
                                'interval' => '10 seconds',
                            ],
                            1 => [
                                'limit' => 15,
                                'interval' => '30 seconds',
                            ],
                            2 => [
                                'limit' => 20,
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'newsletter_form' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 3,
                                'interval' => '30 seconds',
                            ],
                            1 => [
                                'limit' => 5,
                                'interval' => '60 seconds',
                            ],
                            2 => [
                                'limit' => 10,
                                'interval' => '90 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'cart_add_line_item' => [
                        'enabled' => true,
                        'policy' => 'system_config',
                        'reset' => '1 hours',
                        'limits' => [
                            0 => [
                                'domain' => 'core.cart.lineItemAddLimit',
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                ],
            ],
            'shopware.api.max_limit' => 100,
            'shopware.api.api_browser' => [
                'auth_required' => true,
            ],
            'shopware.api.api_browser.auth_required' => true,
            'shopware.api.api_browser.auth_required_str' => '1',
            'shopware.api.store' => [
                'context_lifetime' => 'P1D',
            ],
            'shopware.api.store.context_lifetime' => 'P1D',
            'shopware.api.rate_limiter' => [
                'login' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 10,
                            'interval' => '10 seconds',
                        ],
                        1 => [
                            'limit' => 15,
                            'interval' => '30 seconds',
                        ],
                        2 => [
                            'limit' => 20,
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'guest_login' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 10,
                            'interval' => '10 seconds',
                        ],
                        1 => [
                            'limit' => 15,
                            'interval' => '30 seconds',
                        ],
                        2 => [
                            'limit' => 20,
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'oauth' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 10,
                            'interval' => '10 seconds',
                        ],
                        1 => [
                            'limit' => 15,
                            'interval' => '30 seconds',
                        ],
                        2 => [
                            'limit' => 20,
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'reset_password' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 3,
                            'interval' => '30 seconds',
                        ],
                        1 => [
                            'limit' => 5,
                            'interval' => '60 seconds',
                        ],
                        2 => [
                            'limit' => 10,
                            'interval' => '90 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'user_recovery' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 3,
                            'interval' => '30 seconds',
                        ],
                        1 => [
                            'limit' => 5,
                            'interval' => '60 seconds',
                        ],
                        2 => [
                            'limit' => 10,
                            'interval' => '90 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'contact_form' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 3,
                            'interval' => '30 seconds',
                        ],
                        1 => [
                            'limit' => 5,
                            'interval' => '60 seconds',
                        ],
                        2 => [
                            'limit' => 10,
                            'interval' => '90 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'notification' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 10,
                            'interval' => '10 seconds',
                        ],
                        1 => [
                            'limit' => 15,
                            'interval' => '30 seconds',
                        ],
                        2 => [
                            'limit' => 20,
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'newsletter_form' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 3,
                            'interval' => '30 seconds',
                        ],
                        1 => [
                            'limit' => 5,
                            'interval' => '60 seconds',
                        ],
                        2 => [
                            'limit' => 10,
                            'interval' => '90 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'cart_add_line_item' => [
                    'enabled' => true,
                    'policy' => 'system_config',
                    'reset' => '1 hours',
                    'limits' => [
                        0 => [
                            'domain' => 'core.cart.lineItemAddLimit',
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
            ],
            'shopware.api.rate_limiter.login' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 10,
                        'interval' => '10 seconds',
                    ],
                    1 => [
                        'limit' => 15,
                        'interval' => '30 seconds',
                    ],
                    2 => [
                        'limit' => 20,
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.login.enabled' => true,
            'shopware.api.rate_limiter.login.policy' => 'time_backoff',
            'shopware.api.rate_limiter.login.reset' => '24 hours',
            'shopware.api.rate_limiter.login.limits' => [
                0 => [
                    'limit' => 10,
                    'interval' => '10 seconds',
                ],
                1 => [
                    'limit' => 15,
                    'interval' => '30 seconds',
                ],
                2 => [
                    'limit' => 20,
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.login.limits.0' => [
                'limit' => 10,
                'interval' => '10 seconds',
            ],
            'shopware.api.rate_limiter.login.limits.0.limit' => 10,
            'shopware.api.rate_limiter.login.limits.0.interval' => '10 seconds',
            'shopware.api.rate_limiter.login.limits.1' => [
                'limit' => 15,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.login.limits.1.limit' => 15,
            'shopware.api.rate_limiter.login.limits.1.interval' => '30 seconds',
            'shopware.api.rate_limiter.login.limits.2' => [
                'limit' => 20,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.login.limits.2.limit' => 20,
            'shopware.api.rate_limiter.login.limits.2.interval' => '60 seconds',
            'shopware.api.rate_limiter.login.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.login.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.guest_login' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 10,
                        'interval' => '10 seconds',
                    ],
                    1 => [
                        'limit' => 15,
                        'interval' => '30 seconds',
                    ],
                    2 => [
                        'limit' => 20,
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.guest_login.enabled' => true,
            'shopware.api.rate_limiter.guest_login.policy' => 'time_backoff',
            'shopware.api.rate_limiter.guest_login.reset' => '24 hours',
            'shopware.api.rate_limiter.guest_login.limits' => [
                0 => [
                    'limit' => 10,
                    'interval' => '10 seconds',
                ],
                1 => [
                    'limit' => 15,
                    'interval' => '30 seconds',
                ],
                2 => [
                    'limit' => 20,
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.guest_login.limits.0' => [
                'limit' => 10,
                'interval' => '10 seconds',
            ],
            'shopware.api.rate_limiter.guest_login.limits.0.limit' => 10,
            'shopware.api.rate_limiter.guest_login.limits.0.interval' => '10 seconds',
            'shopware.api.rate_limiter.guest_login.limits.1' => [
                'limit' => 15,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.guest_login.limits.1.limit' => 15,
            'shopware.api.rate_limiter.guest_login.limits.1.interval' => '30 seconds',
            'shopware.api.rate_limiter.guest_login.limits.2' => [
                'limit' => 20,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.guest_login.limits.2.limit' => 20,
            'shopware.api.rate_limiter.guest_login.limits.2.interval' => '60 seconds',
            'shopware.api.rate_limiter.guest_login.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.guest_login.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.oauth' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 10,
                        'interval' => '10 seconds',
                    ],
                    1 => [
                        'limit' => 15,
                        'interval' => '30 seconds',
                    ],
                    2 => [
                        'limit' => 20,
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.oauth.enabled' => true,
            'shopware.api.rate_limiter.oauth.policy' => 'time_backoff',
            'shopware.api.rate_limiter.oauth.reset' => '24 hours',
            'shopware.api.rate_limiter.oauth.limits' => [
                0 => [
                    'limit' => 10,
                    'interval' => '10 seconds',
                ],
                1 => [
                    'limit' => 15,
                    'interval' => '30 seconds',
                ],
                2 => [
                    'limit' => 20,
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.oauth.limits.0' => [
                'limit' => 10,
                'interval' => '10 seconds',
            ],
            'shopware.api.rate_limiter.oauth.limits.0.limit' => 10,
            'shopware.api.rate_limiter.oauth.limits.0.interval' => '10 seconds',
            'shopware.api.rate_limiter.oauth.limits.1' => [
                'limit' => 15,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.oauth.limits.1.limit' => 15,
            'shopware.api.rate_limiter.oauth.limits.1.interval' => '30 seconds',
            'shopware.api.rate_limiter.oauth.limits.2' => [
                'limit' => 20,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.oauth.limits.2.limit' => 20,
            'shopware.api.rate_limiter.oauth.limits.2.interval' => '60 seconds',
            'shopware.api.rate_limiter.oauth.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.oauth.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.reset_password' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 3,
                        'interval' => '30 seconds',
                    ],
                    1 => [
                        'limit' => 5,
                        'interval' => '60 seconds',
                    ],
                    2 => [
                        'limit' => 10,
                        'interval' => '90 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.reset_password.enabled' => true,
            'shopware.api.rate_limiter.reset_password.policy' => 'time_backoff',
            'shopware.api.rate_limiter.reset_password.reset' => '24 hours',
            'shopware.api.rate_limiter.reset_password.limits' => [
                0 => [
                    'limit' => 3,
                    'interval' => '30 seconds',
                ],
                1 => [
                    'limit' => 5,
                    'interval' => '60 seconds',
                ],
                2 => [
                    'limit' => 10,
                    'interval' => '90 seconds',
                ],
            ],
            'shopware.api.rate_limiter.reset_password.limits.0' => [
                'limit' => 3,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.reset_password.limits.0.limit' => 3,
            'shopware.api.rate_limiter.reset_password.limits.0.interval' => '30 seconds',
            'shopware.api.rate_limiter.reset_password.limits.1' => [
                'limit' => 5,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.reset_password.limits.1.limit' => 5,
            'shopware.api.rate_limiter.reset_password.limits.1.interval' => '60 seconds',
            'shopware.api.rate_limiter.reset_password.limits.2' => [
                'limit' => 10,
                'interval' => '90 seconds',
            ],
            'shopware.api.rate_limiter.reset_password.limits.2.limit' => 10,
            'shopware.api.rate_limiter.reset_password.limits.2.interval' => '90 seconds',
            'shopware.api.rate_limiter.reset_password.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.reset_password.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.user_recovery' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 3,
                        'interval' => '30 seconds',
                    ],
                    1 => [
                        'limit' => 5,
                        'interval' => '60 seconds',
                    ],
                    2 => [
                        'limit' => 10,
                        'interval' => '90 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.user_recovery.enabled' => true,
            'shopware.api.rate_limiter.user_recovery.policy' => 'time_backoff',
            'shopware.api.rate_limiter.user_recovery.reset' => '24 hours',
            'shopware.api.rate_limiter.user_recovery.limits' => [
                0 => [
                    'limit' => 3,
                    'interval' => '30 seconds',
                ],
                1 => [
                    'limit' => 5,
                    'interval' => '60 seconds',
                ],
                2 => [
                    'limit' => 10,
                    'interval' => '90 seconds',
                ],
            ],
            'shopware.api.rate_limiter.user_recovery.limits.0' => [
                'limit' => 3,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.user_recovery.limits.0.limit' => 3,
            'shopware.api.rate_limiter.user_recovery.limits.0.interval' => '30 seconds',
            'shopware.api.rate_limiter.user_recovery.limits.1' => [
                'limit' => 5,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.user_recovery.limits.1.limit' => 5,
            'shopware.api.rate_limiter.user_recovery.limits.1.interval' => '60 seconds',
            'shopware.api.rate_limiter.user_recovery.limits.2' => [
                'limit' => 10,
                'interval' => '90 seconds',
            ],
            'shopware.api.rate_limiter.user_recovery.limits.2.limit' => 10,
            'shopware.api.rate_limiter.user_recovery.limits.2.interval' => '90 seconds',
            'shopware.api.rate_limiter.user_recovery.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.user_recovery.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.contact_form' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 3,
                        'interval' => '30 seconds',
                    ],
                    1 => [
                        'limit' => 5,
                        'interval' => '60 seconds',
                    ],
                    2 => [
                        'limit' => 10,
                        'interval' => '90 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.contact_form.enabled' => true,
            'shopware.api.rate_limiter.contact_form.policy' => 'time_backoff',
            'shopware.api.rate_limiter.contact_form.reset' => '24 hours',
            'shopware.api.rate_limiter.contact_form.limits' => [
                0 => [
                    'limit' => 3,
                    'interval' => '30 seconds',
                ],
                1 => [
                    'limit' => 5,
                    'interval' => '60 seconds',
                ],
                2 => [
                    'limit' => 10,
                    'interval' => '90 seconds',
                ],
            ],
            'shopware.api.rate_limiter.contact_form.limits.0' => [
                'limit' => 3,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.contact_form.limits.0.limit' => 3,
            'shopware.api.rate_limiter.contact_form.limits.0.interval' => '30 seconds',
            'shopware.api.rate_limiter.contact_form.limits.1' => [
                'limit' => 5,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.contact_form.limits.1.limit' => 5,
            'shopware.api.rate_limiter.contact_form.limits.1.interval' => '60 seconds',
            'shopware.api.rate_limiter.contact_form.limits.2' => [
                'limit' => 10,
                'interval' => '90 seconds',
            ],
            'shopware.api.rate_limiter.contact_form.limits.2.limit' => 10,
            'shopware.api.rate_limiter.contact_form.limits.2.interval' => '90 seconds',
            'shopware.api.rate_limiter.contact_form.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.contact_form.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.notification' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 10,
                        'interval' => '10 seconds',
                    ],
                    1 => [
                        'limit' => 15,
                        'interval' => '30 seconds',
                    ],
                    2 => [
                        'limit' => 20,
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.notification.enabled' => true,
            'shopware.api.rate_limiter.notification.policy' => 'time_backoff',
            'shopware.api.rate_limiter.notification.reset' => '24 hours',
            'shopware.api.rate_limiter.notification.limits' => [
                0 => [
                    'limit' => 10,
                    'interval' => '10 seconds',
                ],
                1 => [
                    'limit' => 15,
                    'interval' => '30 seconds',
                ],
                2 => [
                    'limit' => 20,
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.notification.limits.0' => [
                'limit' => 10,
                'interval' => '10 seconds',
            ],
            'shopware.api.rate_limiter.notification.limits.0.limit' => 10,
            'shopware.api.rate_limiter.notification.limits.0.interval' => '10 seconds',
            'shopware.api.rate_limiter.notification.limits.1' => [
                'limit' => 15,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.notification.limits.1.limit' => 15,
            'shopware.api.rate_limiter.notification.limits.1.interval' => '30 seconds',
            'shopware.api.rate_limiter.notification.limits.2' => [
                'limit' => 20,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.notification.limits.2.limit' => 20,
            'shopware.api.rate_limiter.notification.limits.2.interval' => '60 seconds',
            'shopware.api.rate_limiter.notification.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.notification.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.newsletter_form' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 3,
                        'interval' => '30 seconds',
                    ],
                    1 => [
                        'limit' => 5,
                        'interval' => '60 seconds',
                    ],
                    2 => [
                        'limit' => 10,
                        'interval' => '90 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.newsletter_form.enabled' => true,
            'shopware.api.rate_limiter.newsletter_form.policy' => 'time_backoff',
            'shopware.api.rate_limiter.newsletter_form.reset' => '24 hours',
            'shopware.api.rate_limiter.newsletter_form.limits' => [
                0 => [
                    'limit' => 3,
                    'interval' => '30 seconds',
                ],
                1 => [
                    'limit' => 5,
                    'interval' => '60 seconds',
                ],
                2 => [
                    'limit' => 10,
                    'interval' => '90 seconds',
                ],
            ],
            'shopware.api.rate_limiter.newsletter_form.limits.0' => [
                'limit' => 3,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.newsletter_form.limits.0.limit' => 3,
            'shopware.api.rate_limiter.newsletter_form.limits.0.interval' => '30 seconds',
            'shopware.api.rate_limiter.newsletter_form.limits.1' => [
                'limit' => 5,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.newsletter_form.limits.1.limit' => 5,
            'shopware.api.rate_limiter.newsletter_form.limits.1.interval' => '60 seconds',
            'shopware.api.rate_limiter.newsletter_form.limits.2' => [
                'limit' => 10,
                'interval' => '90 seconds',
            ],
            'shopware.api.rate_limiter.newsletter_form.limits.2.limit' => 10,
            'shopware.api.rate_limiter.newsletter_form.limits.2.interval' => '90 seconds',
            'shopware.api.rate_limiter.newsletter_form.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.newsletter_form.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.cart_add_line_item' => [
                'enabled' => true,
                'policy' => 'system_config',
                'reset' => '1 hours',
                'limits' => [
                    0 => [
                        'domain' => 'core.cart.lineItemAddLimit',
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.cart_add_line_item.enabled' => true,
            'shopware.api.rate_limiter.cart_add_line_item.policy' => 'system_config',
            'shopware.api.rate_limiter.cart_add_line_item.reset' => '1 hours',
            'shopware.api.rate_limiter.cart_add_line_item.limits' => [
                0 => [
                    'domain' => 'core.cart.lineItemAddLimit',
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.cart_add_line_item.limits.0' => [
                'domain' => 'core.cart.lineItemAddLimit',
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.cart_add_line_item.limits.0.domain' => 'core.cart.lineItemAddLimit',
            'shopware.api.rate_limiter.cart_add_line_item.limits.0.interval' => '60 seconds',
            'shopware.api.rate_limiter.cart_add_line_item.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.cart_add_line_item.cache_pool' => 'cache.rate_limiter',
            'shopware.admin_worker' => [
                'enable_admin_worker' => true,
                'poll_interval' => 20,
                'transports' => [
                    0 => 'default',
                ],
                'memory_limit' => '128M',
            ],
            'shopware.admin_worker.enable_admin_worker' => true,
            'shopware.admin_worker.poll_interval' => 20,
            'shopware.admin_worker.transports' => [
                0 => 'default',
            ],
            'shopware.admin_worker.transports.0' => 'default',
            'shopware.admin_worker.memory_limit' => '128M',
            'shopware.auto_update' => [
                'enabled' => true,
            ],
            'shopware.auto_update.enabled' => true,
            'shopware.store' => [
                'frw' => false,
            ],
            'shopware.sitemap' => [
                'batchsize' => 100,
                'custom_urls' => [

                ],
                'excluded_urls' => [

                ],
            ],
            'shopware.sitemap.batchsize' => 100,
            'shopware.sitemap.custom_urls' => [

            ],
            'shopware.sitemap.excluded_urls' => [

            ],
            'shopware.media' => [
                'enable_url_upload_feature' => true,
                'enable_url_validation' => true,
                'url_upload_max_size' => 0,
            ],
            'shopware.media.enable_url_upload_feature' => true,
            'shopware.media.enable_url_validation' => true,
            'shopware.media.url_upload_max_size' => 0,
            'shopware.dal' => [
                'batch_size' => 125,
                'max_rule_prices' => 100,
                'versioning' => [
                    'expire_days' => 30,
                ],
            ],
            'shopware.dal.batch_size' => 125,
            'shopware.dal.max_rule_prices' => 100,
            'shopware.dal.versioning' => [
                'expire_days' => 30,
            ],
            'shopware.dal.versioning.expire_days' => 30,
            'shopware.mail' => [
                'update_mail_variables_on_send' => true,
            ],
            'shopware.mail.update_mail_variables_on_send' => true,
            'shopware.cart' => [
                'compress' => false,
                'expire_days' => 120,
                'redis_url' => false,
            ],
            'shopware.cart.compress' => false,
            'shopware.cart.expire_days' => 120,
            'shopware.cart.redis_url' => false,
            'shopware.number_range' => [
                'increment_storage' => 'SQL',
                'redis_url' => false,
            ],
            'shopware.number_range.increment_storage' => 'SQL',
            'shopware.number_range.redis_url' => false,
            'shopware.sales_channel_context' => [
                'expire_days' => 120,
            ],
            'shopware.sales_channel_context.expire_days' => 120,
            'shopware.html_sanitizer.cache_enabled' => true,
            'shopware.html_sanitizer.sets' => [
                'basic' => [
                    'tags' => [
                        0 => 'a',
                        1 => 'abbr',
                        2 => 'acronym',
                        3 => 'address',
                        4 => 'b',
                        5 => 'bdo',
                        6 => 'big',
                        7 => 'blockquote',
                        8 => 'br',
                        9 => 'caption',
                        10 => 'center',
                        11 => 'cite',
                        12 => 'code',
                        13 => 'col',
                        14 => 'colgroup',
                        15 => 'dd',
                        16 => 'del',
                        17 => 'dfn',
                        18 => 'dir',
                        19 => 'div',
                        20 => 'dl',
                        21 => 'dt',
                        22 => 'em',
                        23 => 'font',
                        24 => 'h1',
                        25 => 'h2',
                        26 => 'h3',
                        27 => 'h4',
                        28 => 'h5',
                        29 => 'h6',
                        30 => 'hr',
                        31 => 'i',
                        32 => 'ins',
                        33 => 'kbd',
                        34 => 'li',
                        35 => 'menu',
                        36 => 'ol',
                        37 => 'p',
                        38 => 'pre',
                        39 => 'q',
                        40 => 's',
                        41 => 'samp',
                        42 => 'small',
                        43 => 'span',
                        44 => 'strike',
                        45 => 'strong',
                        46 => 'sub',
                        47 => 'sup',
                        48 => 'table',
                        49 => 'tbody',
                        50 => 'td',
                        51 => 'tfoot',
                        52 => 'th',
                        53 => 'thead',
                        54 => 'tr',
                        55 => 'tt',
                        56 => 'u',
                        57 => 'ul',
                        58 => 'var',
                    ],
                    'attributes' => [
                        0 => 'align',
                        1 => 'bgcolor',
                        2 => 'border',
                        3 => 'cellpadding',
                        4 => 'cellspacing',
                        5 => 'cite',
                        6 => 'class',
                        7 => 'clear',
                        8 => 'color',
                        9 => 'colspan',
                        10 => 'dir',
                        11 => 'face',
                        12 => 'frame',
                        13 => 'height',
                        14 => 'href',
                        15 => 'id',
                        16 => 'lang',
                        17 => 'name',
                        18 => 'noshade',
                        19 => 'nowrap',
                        20 => 'rel',
                        21 => 'rev',
                        22 => 'rowspan',
                        23 => 'scope',
                        24 => 'size',
                        25 => 'span',
                        26 => 'start',
                        27 => 'style',
                        28 => 'summary',
                        29 => 'title',
                        30 => 'type',
                        31 => 'valign',
                        32 => 'value',
                        33 => 'width',
                    ],
                    'options' => [

                    ],
                ],
                'media' => [
                    'tags' => [
                        0 => 'img',
                    ],
                    'attributes' => [
                        0 => 'src',
                        1 => 'alt',
                    ],
                    'options' => [

                    ],
                ],
                'script' => [
                    'tags' => [
                        0 => 'script',
                    ],
                    'options' => [
                        'HTML.Trusted' => true,
                    ],
                    'attributes' => [

                    ],
                ],
                'tidy' => [
                    'options' => [
                        'Output.TidyFormat' => true,
                    ],
                    'tags' => [

                    ],
                    'attributes' => [

                    ],
                ],
            ],
            'shopware.html_sanitizer.sets.basic' => [
                'tags' => [
                    0 => 'a',
                    1 => 'abbr',
                    2 => 'acronym',
                    3 => 'address',
                    4 => 'b',
                    5 => 'bdo',
                    6 => 'big',
                    7 => 'blockquote',
                    8 => 'br',
                    9 => 'caption',
                    10 => 'center',
                    11 => 'cite',
                    12 => 'code',
                    13 => 'col',
                    14 => 'colgroup',
                    15 => 'dd',
                    16 => 'del',
                    17 => 'dfn',
                    18 => 'dir',
                    19 => 'div',
                    20 => 'dl',
                    21 => 'dt',
                    22 => 'em',
                    23 => 'font',
                    24 => 'h1',
                    25 => 'h2',
                    26 => 'h3',
                    27 => 'h4',
                    28 => 'h5',
                    29 => 'h6',
                    30 => 'hr',
                    31 => 'i',
                    32 => 'ins',
                    33 => 'kbd',
                    34 => 'li',
                    35 => 'menu',
                    36 => 'ol',
                    37 => 'p',
                    38 => 'pre',
                    39 => 'q',
                    40 => 's',
                    41 => 'samp',
                    42 => 'small',
                    43 => 'span',
                    44 => 'strike',
                    45 => 'strong',
                    46 => 'sub',
                    47 => 'sup',
                    48 => 'table',
                    49 => 'tbody',
                    50 => 'td',
                    51 => 'tfoot',
                    52 => 'th',
                    53 => 'thead',
                    54 => 'tr',
                    55 => 'tt',
                    56 => 'u',
                    57 => 'ul',
                    58 => 'var',
                ],
                'attributes' => [
                    0 => 'align',
                    1 => 'bgcolor',
                    2 => 'border',
                    3 => 'cellpadding',
                    4 => 'cellspacing',
                    5 => 'cite',
                    6 => 'class',
                    7 => 'clear',
                    8 => 'color',
                    9 => 'colspan',
                    10 => 'dir',
                    11 => 'face',
                    12 => 'frame',
                    13 => 'height',
                    14 => 'href',
                    15 => 'id',
                    16 => 'lang',
                    17 => 'name',
                    18 => 'noshade',
                    19 => 'nowrap',
                    20 => 'rel',
                    21 => 'rev',
                    22 => 'rowspan',
                    23 => 'scope',
                    24 => 'size',
                    25 => 'span',
                    26 => 'start',
                    27 => 'style',
                    28 => 'summary',
                    29 => 'title',
                    30 => 'type',
                    31 => 'valign',
                    32 => 'value',
                    33 => 'width',
                ],
                'options' => [

                ],
            ],
            'shopware.html_sanitizer.sets.basic.tags' => [
                0 => 'a',
                1 => 'abbr',
                2 => 'acronym',
                3 => 'address',
                4 => 'b',
                5 => 'bdo',
                6 => 'big',
                7 => 'blockquote',
                8 => 'br',
                9 => 'caption',
                10 => 'center',
                11 => 'cite',
                12 => 'code',
                13 => 'col',
                14 => 'colgroup',
                15 => 'dd',
                16 => 'del',
                17 => 'dfn',
                18 => 'dir',
                19 => 'div',
                20 => 'dl',
                21 => 'dt',
                22 => 'em',
                23 => 'font',
                24 => 'h1',
                25 => 'h2',
                26 => 'h3',
                27 => 'h4',
                28 => 'h5',
                29 => 'h6',
                30 => 'hr',
                31 => 'i',
                32 => 'ins',
                33 => 'kbd',
                34 => 'li',
                35 => 'menu',
                36 => 'ol',
                37 => 'p',
                38 => 'pre',
                39 => 'q',
                40 => 's',
                41 => 'samp',
                42 => 'small',
                43 => 'span',
                44 => 'strike',
                45 => 'strong',
                46 => 'sub',
                47 => 'sup',
                48 => 'table',
                49 => 'tbody',
                50 => 'td',
                51 => 'tfoot',
                52 => 'th',
                53 => 'thead',
                54 => 'tr',
                55 => 'tt',
                56 => 'u',
                57 => 'ul',
                58 => 'var',
            ],
            'shopware.html_sanitizer.sets.basic.tags.0' => 'a',
            'shopware.html_sanitizer.sets.basic.tags.1' => 'abbr',
            'shopware.html_sanitizer.sets.basic.tags.2' => 'acronym',
            'shopware.html_sanitizer.sets.basic.tags.3' => 'address',
            'shopware.html_sanitizer.sets.basic.tags.4' => 'b',
            'shopware.html_sanitizer.sets.basic.tags.5' => 'bdo',
            'shopware.html_sanitizer.sets.basic.tags.6' => 'big',
            'shopware.html_sanitizer.sets.basic.tags.7' => 'blockquote',
            'shopware.html_sanitizer.sets.basic.tags.8' => 'br',
            'shopware.html_sanitizer.sets.basic.tags.9' => 'caption',
            'shopware.html_sanitizer.sets.basic.tags.10' => 'center',
            'shopware.html_sanitizer.sets.basic.tags.11' => 'cite',
            'shopware.html_sanitizer.sets.basic.tags.12' => 'code',
            'shopware.html_sanitizer.sets.basic.tags.13' => 'col',
            'shopware.html_sanitizer.sets.basic.tags.14' => 'colgroup',
            'shopware.html_sanitizer.sets.basic.tags.15' => 'dd',
            'shopware.html_sanitizer.sets.basic.tags.16' => 'del',
            'shopware.html_sanitizer.sets.basic.tags.17' => 'dfn',
            'shopware.html_sanitizer.sets.basic.tags.18' => 'dir',
            'shopware.html_sanitizer.sets.basic.tags.19' => 'div',
            'shopware.html_sanitizer.sets.basic.tags.20' => 'dl',
            'shopware.html_sanitizer.sets.basic.tags.21' => 'dt',
            'shopware.html_sanitizer.sets.basic.tags.22' => 'em',
            'shopware.html_sanitizer.sets.basic.tags.23' => 'font',
            'shopware.html_sanitizer.sets.basic.tags.24' => 'h1',
            'shopware.html_sanitizer.sets.basic.tags.25' => 'h2',
            'shopware.html_sanitizer.sets.basic.tags.26' => 'h3',
            'shopware.html_sanitizer.sets.basic.tags.27' => 'h4',
            'shopware.html_sanitizer.sets.basic.tags.28' => 'h5',
            'shopware.html_sanitizer.sets.basic.tags.29' => 'h6',
            'shopware.html_sanitizer.sets.basic.tags.30' => 'hr',
            'shopware.html_sanitizer.sets.basic.tags.31' => 'i',
            'shopware.html_sanitizer.sets.basic.tags.32' => 'ins',
            'shopware.html_sanitizer.sets.basic.tags.33' => 'kbd',
            'shopware.html_sanitizer.sets.basic.tags.34' => 'li',
            'shopware.html_sanitizer.sets.basic.tags.35' => 'menu',
            'shopware.html_sanitizer.sets.basic.tags.36' => 'ol',
            'shopware.html_sanitizer.sets.basic.tags.37' => 'p',
            'shopware.html_sanitizer.sets.basic.tags.38' => 'pre',
            'shopware.html_sanitizer.sets.basic.tags.39' => 'q',
            'shopware.html_sanitizer.sets.basic.tags.40' => 's',
            'shopware.html_sanitizer.sets.basic.tags.41' => 'samp',
            'shopware.html_sanitizer.sets.basic.tags.42' => 'small',
            'shopware.html_sanitizer.sets.basic.tags.43' => 'span',
            'shopware.html_sanitizer.sets.basic.tags.44' => 'strike',
            'shopware.html_sanitizer.sets.basic.tags.45' => 'strong',
            'shopware.html_sanitizer.sets.basic.tags.46' => 'sub',
            'shopware.html_sanitizer.sets.basic.tags.47' => 'sup',
            'shopware.html_sanitizer.sets.basic.tags.48' => 'table',
            'shopware.html_sanitizer.sets.basic.tags.49' => 'tbody',
            'shopware.html_sanitizer.sets.basic.tags.50' => 'td',
            'shopware.html_sanitizer.sets.basic.tags.51' => 'tfoot',
            'shopware.html_sanitizer.sets.basic.tags.52' => 'th',
            'shopware.html_sanitizer.sets.basic.tags.53' => 'thead',
            'shopware.html_sanitizer.sets.basic.tags.54' => 'tr',
            'shopware.html_sanitizer.sets.basic.tags.55' => 'tt',
            'shopware.html_sanitizer.sets.basic.tags.56' => 'u',
            'shopware.html_sanitizer.sets.basic.tags.57' => 'ul',
            'shopware.html_sanitizer.sets.basic.tags.58' => 'var',
            'shopware.html_sanitizer.sets.basic.attributes' => [
                0 => 'align',
                1 => 'bgcolor',
                2 => 'border',
                3 => 'cellpadding',
                4 => 'cellspacing',
                5 => 'cite',
                6 => 'class',
                7 => 'clear',
                8 => 'color',
                9 => 'colspan',
                10 => 'dir',
                11 => 'face',
                12 => 'frame',
                13 => 'height',
                14 => 'href',
                15 => 'id',
                16 => 'lang',
                17 => 'name',
                18 => 'noshade',
                19 => 'nowrap',
                20 => 'rel',
                21 => 'rev',
                22 => 'rowspan',
                23 => 'scope',
                24 => 'size',
                25 => 'span',
                26 => 'start',
                27 => 'style',
                28 => 'summary',
                29 => 'title',
                30 => 'type',
                31 => 'valign',
                32 => 'value',
                33 => 'width',
            ],
            'shopware.html_sanitizer.sets.basic.attributes.0' => 'align',
            'shopware.html_sanitizer.sets.basic.attributes.1' => 'bgcolor',
            'shopware.html_sanitizer.sets.basic.attributes.2' => 'border',
            'shopware.html_sanitizer.sets.basic.attributes.3' => 'cellpadding',
            'shopware.html_sanitizer.sets.basic.attributes.4' => 'cellspacing',
            'shopware.html_sanitizer.sets.basic.attributes.5' => 'cite',
            'shopware.html_sanitizer.sets.basic.attributes.6' => 'class',
            'shopware.html_sanitizer.sets.basic.attributes.7' => 'clear',
            'shopware.html_sanitizer.sets.basic.attributes.8' => 'color',
            'shopware.html_sanitizer.sets.basic.attributes.9' => 'colspan',
            'shopware.html_sanitizer.sets.basic.attributes.10' => 'dir',
            'shopware.html_sanitizer.sets.basic.attributes.11' => 'face',
            'shopware.html_sanitizer.sets.basic.attributes.12' => 'frame',
            'shopware.html_sanitizer.sets.basic.attributes.13' => 'height',
            'shopware.html_sanitizer.sets.basic.attributes.14' => 'href',
            'shopware.html_sanitizer.sets.basic.attributes.15' => 'id',
            'shopware.html_sanitizer.sets.basic.attributes.16' => 'lang',
            'shopware.html_sanitizer.sets.basic.attributes.17' => 'name',
            'shopware.html_sanitizer.sets.basic.attributes.18' => 'noshade',
            'shopware.html_sanitizer.sets.basic.attributes.19' => 'nowrap',
            'shopware.html_sanitizer.sets.basic.attributes.20' => 'rel',
            'shopware.html_sanitizer.sets.basic.attributes.21' => 'rev',
            'shopware.html_sanitizer.sets.basic.attributes.22' => 'rowspan',
            'shopware.html_sanitizer.sets.basic.attributes.23' => 'scope',
            'shopware.html_sanitizer.sets.basic.attributes.24' => 'size',
            'shopware.html_sanitizer.sets.basic.attributes.25' => 'span',
            'shopware.html_sanitizer.sets.basic.attributes.26' => 'start',
            'shopware.html_sanitizer.sets.basic.attributes.27' => 'style',
            'shopware.html_sanitizer.sets.basic.attributes.28' => 'summary',
            'shopware.html_sanitizer.sets.basic.attributes.29' => 'title',
            'shopware.html_sanitizer.sets.basic.attributes.30' => 'type',
            'shopware.html_sanitizer.sets.basic.attributes.31' => 'valign',
            'shopware.html_sanitizer.sets.basic.attributes.32' => 'value',
            'shopware.html_sanitizer.sets.basic.attributes.33' => 'width',
            'shopware.html_sanitizer.sets.basic.options' => [

            ],
            'shopware.html_sanitizer.sets.media' => [
                'tags' => [
                    0 => 'img',
                ],
                'attributes' => [
                    0 => 'src',
                    1 => 'alt',
                ],
                'options' => [

                ],
            ],
            'shopware.html_sanitizer.sets.media.tags' => [
                0 => 'img',
            ],
            'shopware.html_sanitizer.sets.media.tags.0' => 'img',
            'shopware.html_sanitizer.sets.media.attributes' => [
                0 => 'src',
                1 => 'alt',
            ],
            'shopware.html_sanitizer.sets.media.attributes.0' => 'src',
            'shopware.html_sanitizer.sets.media.attributes.1' => 'alt',
            'shopware.html_sanitizer.sets.media.options' => [

            ],
            'shopware.html_sanitizer.sets.script' => [
                'tags' => [
                    0 => 'script',
                ],
                'options' => [
                    'HTML.Trusted' => true,
                ],
                'attributes' => [

                ],
            ],
            'shopware.html_sanitizer.sets.script.tags' => [
                0 => 'script',
            ],
            'shopware.html_sanitizer.sets.script.tags.0' => 'script',
            'shopware.html_sanitizer.sets.script.options' => [
                'HTML.Trusted' => true,
            ],
            'shopware.html_sanitizer.sets.script.options.HTML.Trusted' => true,
            'shopware.html_sanitizer.sets.script.attributes' => [

            ],
            'shopware.html_sanitizer.sets.tidy' => [
                'options' => [
                    'Output.TidyFormat' => true,
                ],
                'tags' => [

                ],
                'attributes' => [

                ],
            ],
            'shopware.html_sanitizer.sets.tidy.options' => [
                'Output.TidyFormat' => true,
            ],
            'shopware.html_sanitizer.sets.tidy.options.Output.TidyFormat' => true,
            'shopware.html_sanitizer.sets.tidy.tags' => [

            ],
            'shopware.html_sanitizer.sets.tidy.attributes' => [

            ],
            'shopware.html_sanitizer.fields' => [
                'product_translation.description' => [
                    'sets' => [
                        0 => 'basic',
                        1 => 'media',
                    ],
                ],
                'app_cms_block.template' => [
                    'sets' => [
                        0 => 'basic',
                        1 => 'media',
                        2 => 'tidy',
                    ],
                ],
            ],
            'shopware.html_sanitizer.fields.product_translation.description' => [
                'sets' => [
                    0 => 'basic',
                    1 => 'media',
                ],
            ],
            'shopware.html_sanitizer.fields.product_translation.description.sets' => [
                0 => 'basic',
                1 => 'media',
            ],
            'shopware.html_sanitizer.fields.product_translation.description.sets.0' => 'basic',
            'shopware.html_sanitizer.fields.product_translation.description.sets.1' => 'media',
            'shopware.html_sanitizer.fields.app_cms_block.template' => [
                'sets' => [
                    0 => 'basic',
                    1 => 'media',
                    2 => 'tidy',
                ],
            ],
            'shopware.html_sanitizer.fields.app_cms_block.template.sets' => [
                0 => 'basic',
                1 => 'media',
                2 => 'tidy',
            ],
            'shopware.html_sanitizer.fields.app_cms_block.template.sets.0' => 'basic',
            'shopware.html_sanitizer.fields.app_cms_block.template.sets.1' => 'media',
            'shopware.html_sanitizer.fields.app_cms_block.template.sets.2' => 'tidy',
            'shopware.logger' => [
                'file_rotation_count' => 14,
                'exclude_exception' => [
                    0 => 'League\\OAuth2\\Server\\Exception\\OAuthServerException',
                ],
                'exclude_events' => [
                    0 => 'user.recovery.request',
                    1 => 'customer.recovery.request',
                ],
            ],
            'shopware.logger.file_rotation_count' => 14,
            'shopware.logger.exclude_exception' => [
                0 => 'League\\OAuth2\\Server\\Exception\\OAuthServerException',
            ],
            'shopware.logger.exclude_exception.0' => 'League\\OAuth2\\Server\\Exception\\OAuthServerException',
            'shopware.logger.exclude_events' => [
                0 => 'user.recovery.request',
                1 => 'customer.recovery.request',
            ],
            'shopware.logger.exclude_events.0' => 'user.recovery.request',
            'shopware.logger.exclude_events.1' => 'customer.recovery.request',
            'shopware.cache.invalidation' => [
                'delay' => 0,
                'count' => 150,
                'http_cache' => [
                    0 => 'logged-in',
                    1 => 'cart-filled',
                ],
                'product_listing_route' => [

                ],
                'product_detail_route' => [

                ],
                'product_review_route' => [

                ],
                'product_search_route' => [

                ],
                'product_suggest_route' => [

                ],
                'product_cross_selling_route' => [

                ],
                'payment_method_route' => [

                ],
                'shipping_method_route' => [

                ],
                'navigation_route' => [

                ],
                'category_route' => [

                ],
                'landing_page_route' => [

                ],
                'language_route' => [

                ],
                'currency_route' => [

                ],
                'country_route' => [

                ],
                'country_state_route' => [

                ],
                'salutation_route' => [

                ],
                'sitemap_route' => [

                ],
            ],
            'shopware.cache.invalidation.delay' => 0,
            'shopware.cache.invalidation.count' => 150,
            'shopware.cache.invalidation.http_cache' => [
                0 => 'logged-in',
                1 => 'cart-filled',
            ],
            'shopware.cache.invalidation.http_cache.0' => 'logged-in',
            'shopware.cache.invalidation.http_cache.1' => 'cart-filled',
            'shopware.cache.invalidation.product_listing_route' => [

            ],
            'shopware.cache.invalidation.product_detail_route' => [

            ],
            'shopware.cache.invalidation.product_review_route' => [

            ],
            'shopware.cache.invalidation.product_search_route' => [

            ],
            'shopware.cache.invalidation.product_suggest_route' => [

            ],
            'shopware.cache.invalidation.product_cross_selling_route' => [

            ],
            'shopware.cache.invalidation.payment_method_route' => [

            ],
            'shopware.cache.invalidation.shipping_method_route' => [

            ],
            'shopware.cache.invalidation.navigation_route' => [

            ],
            'shopware.cache.invalidation.category_route' => [

            ],
            'shopware.cache.invalidation.landing_page_route' => [

            ],
            'shopware.cache.invalidation.language_route' => [

            ],
            'shopware.cache.invalidation.currency_route' => [

            ],
            'shopware.cache.invalidation.country_route' => [

            ],
            'shopware.cache.invalidation.country_state_route' => [

            ],
            'shopware.cache.invalidation.salutation_route' => [

            ],
            'shopware.cache.invalidation.sitemap_route' => [

            ],
            'shopware.twig' => [
                'allowed_php_functions' => [

                ],
            ],
            'shopware.twig.allowed_php_functions' => [

            ],
            'shopware.dompdf' => [
                'options' => [
                    'isRemoteEnabled' => true,
                    'isHtml5ParserEnabled' => true,
                ],
            ],
            'shopware.dompdf.options' => [
                'isRemoteEnabled' => true,
                'isHtml5ParserEnabled' => true,
            ],
            'shopware.dompdf.options.isRemoteEnabled' => true,
            'shopware.dompdf.options.isHtml5ParserEnabled' => true,
            'storefront.csrf' => [
                'enabled' => true,
                'mode' => 'twig',
            ],
            'storefront.csrf.enabled' => true,
            'storefront.csrf.mode' => 'twig',
            'storefront.reverse_proxy' => [
                'enabled' => false,
                'ban_method' => 'BAN',
                'hosts' => [
                    0 => 'http://varnish',
                ],
                'max_parallel_invalidations' => 2,
                'redis_url' => 'redis://redis',
                'purge_all' => [
                    'ban_method' => 'BAN',
                    'ban_headers' => [

                    ],
                    'urls' => [
                        0 => '/',
                    ],
                ],
                'fastly' => [
                    'enabled' => false,
                    'api_key' => '',
                    'instance_tag' => '',
                    'service_id' => '',
                    'soft_purge' => '0',
                    'tag_prefix' => '',
                ],
                'use_varnish_xkey' => false,
                'ban_headers' => [

                ],
            ],
            'storefront.reverse_proxy.enabled' => false,
            'storefront.reverse_proxy.ban_method' => 'BAN',
            'storefront.reverse_proxy.hosts' => [
                0 => 'http://varnish',
            ],
            'storefront.reverse_proxy.hosts.0' => 'http://varnish',
            'storefront.reverse_proxy.max_parallel_invalidations' => 2,
            'storefront.reverse_proxy.redis_url' => 'redis://redis',
            'storefront.reverse_proxy.purge_all' => [
                'ban_method' => 'BAN',
                'ban_headers' => [

                ],
                'urls' => [
                    0 => '/',
                ],
            ],
            'storefront.reverse_proxy.purge_all.ban_method' => 'BAN',
            'storefront.reverse_proxy.purge_all.ban_headers' => [

            ],
            'storefront.reverse_proxy.purge_all.urls' => [
                0 => '/',
            ],
            'storefront.reverse_proxy.purge_all.urls.0' => '/',
            'storefront.reverse_proxy.fastly' => [
                'enabled' => false,
                'api_key' => '',
                'instance_tag' => '',
                'service_id' => '',
                'soft_purge' => '0',
                'tag_prefix' => '',
            ],
            'storefront.reverse_proxy.fastly.enabled' => false,
            'storefront.reverse_proxy.fastly.api_key' => '',
            'storefront.reverse_proxy.fastly.instance_tag' => '',
            'storefront.reverse_proxy.fastly.service_id' => '',
            'storefront.reverse_proxy.fastly.soft_purge' => '0',
            'storefront.reverse_proxy.fastly.tag_prefix' => '',
            'storefront.reverse_proxy.use_varnish_xkey' => false,
            'storefront.reverse_proxy.ban_headers' => [

            ],
            'storefront.http_cache' => [
                'ignored_url_parameters' => [
                    0 => 'pk_campaign',
                    1 => 'piwik_campaign',
                    2 => 'pk_kwd',
                    3 => 'piwik_kwd',
                    4 => 'pk_keyword',
                    5 => 'mtm_campaign',
                    6 => 'matomo_campaign',
                    7 => 'mtm_cid',
                    8 => 'matomo_cid',
                    9 => 'mtm_kwd',
                    10 => 'matomo_kwd',
                    11 => 'mtm_keyword',
                    12 => 'matomo_keyword',
                    13 => 'mtm_source',
                    14 => 'matomo_source',
                    15 => 'mtm_medium',
                    16 => 'matomo_medium',
                    17 => 'mtm_content',
                    18 => 'matomo_content',
                    19 => 'mtm_group',
                    20 => 'matomo_group',
                    21 => 'mtm_placement',
                    22 => 'matomo_placement',
                    23 => 'pixelId',
                    24 => 'kwid',
                    25 => 'kw',
                    26 => 'chl',
                    27 => 'dv',
                    28 => 'nk',
                    29 => 'pa',
                    30 => 'camid',
                    31 => 'adgid',
                    32 => 'utm_term',
                    33 => 'utm_source',
                    34 => 'utm_medium',
                    35 => 'utm_campaign',
                    36 => 'utm_content',
                    37 => 'cx',
                    38 => 'ie',
                    39 => 'cof',
                    40 => 'siteurl',
                    41 => '_ga',
                    42 => 'adgroupid',
                    43 => 'campaignid',
                    44 => 'adid',
                    45 => 'gclsrc',
                    46 => 'gclid',
                    47 => 'fbclid',
                    48 => 'fb_action_ids',
                    49 => 'fb_action_types',
                    50 => 'fb_source',
                    51 => 'mc_cid',
                    52 => 'mc_eid',
                    53 => '_bta_tid',
                    54 => '_bta_c',
                    55 => 'trk_contact',
                    56 => 'trk_msg',
                    57 => 'trk_module',
                    58 => 'trk_sid',
                    59 => 'gdfms',
                    60 => 'gdftrk',
                    61 => 'gdffi',
                    62 => '_ke',
                    63 => 'redirect_log_mongo_id',
                    64 => 'redirect_mongo_id',
                    65 => 'sb_referer_host',
                    66 => 'mkwid',
                    67 => 'pcrid',
                    68 => 'ef_id',
                    69 => 's_kwcid',
                    70 => 'msclkid',
                    71 => 'dm_i',
                    72 => 'epik',
                    73 => 'pp',
                ],
                'stale_while_revalidate' => NULL,
                'stale_if_error' => NULL,
            ],
            'storefront.http_cache.ignored_url_parameters' => [
                0 => 'pk_campaign',
                1 => 'piwik_campaign',
                2 => 'pk_kwd',
                3 => 'piwik_kwd',
                4 => 'pk_keyword',
                5 => 'mtm_campaign',
                6 => 'matomo_campaign',
                7 => 'mtm_cid',
                8 => 'matomo_cid',
                9 => 'mtm_kwd',
                10 => 'matomo_kwd',
                11 => 'mtm_keyword',
                12 => 'matomo_keyword',
                13 => 'mtm_source',
                14 => 'matomo_source',
                15 => 'mtm_medium',
                16 => 'matomo_medium',
                17 => 'mtm_content',
                18 => 'matomo_content',
                19 => 'mtm_group',
                20 => 'matomo_group',
                21 => 'mtm_placement',
                22 => 'matomo_placement',
                23 => 'pixelId',
                24 => 'kwid',
                25 => 'kw',
                26 => 'chl',
                27 => 'dv',
                28 => 'nk',
                29 => 'pa',
                30 => 'camid',
                31 => 'adgid',
                32 => 'utm_term',
                33 => 'utm_source',
                34 => 'utm_medium',
                35 => 'utm_campaign',
                36 => 'utm_content',
                37 => 'cx',
                38 => 'ie',
                39 => 'cof',
                40 => 'siteurl',
                41 => '_ga',
                42 => 'adgroupid',
                43 => 'campaignid',
                44 => 'adid',
                45 => 'gclsrc',
                46 => 'gclid',
                47 => 'fbclid',
                48 => 'fb_action_ids',
                49 => 'fb_action_types',
                50 => 'fb_source',
                51 => 'mc_cid',
                52 => 'mc_eid',
                53 => '_bta_tid',
                54 => '_bta_c',
                55 => 'trk_contact',
                56 => 'trk_msg',
                57 => 'trk_module',
                58 => 'trk_sid',
                59 => 'gdfms',
                60 => 'gdftrk',
                61 => 'gdffi',
                62 => '_ke',
                63 => 'redirect_log_mongo_id',
                64 => 'redirect_mongo_id',
                65 => 'sb_referer_host',
                66 => 'mkwid',
                67 => 'pcrid',
                68 => 'ef_id',
                69 => 's_kwcid',
                70 => 'msclkid',
                71 => 'dm_i',
                72 => 'epik',
                73 => 'pp',
            ],
            'storefront.http_cache.ignored_url_parameters.0' => 'pk_campaign',
            'storefront.http_cache.ignored_url_parameters.1' => 'piwik_campaign',
            'storefront.http_cache.ignored_url_parameters.2' => 'pk_kwd',
            'storefront.http_cache.ignored_url_parameters.3' => 'piwik_kwd',
            'storefront.http_cache.ignored_url_parameters.4' => 'pk_keyword',
            'storefront.http_cache.ignored_url_parameters.5' => 'mtm_campaign',
            'storefront.http_cache.ignored_url_parameters.6' => 'matomo_campaign',
            'storefront.http_cache.ignored_url_parameters.7' => 'mtm_cid',
            'storefront.http_cache.ignored_url_parameters.8' => 'matomo_cid',
            'storefront.http_cache.ignored_url_parameters.9' => 'mtm_kwd',
            'storefront.http_cache.ignored_url_parameters.10' => 'matomo_kwd',
            'storefront.http_cache.ignored_url_parameters.11' => 'mtm_keyword',
            'storefront.http_cache.ignored_url_parameters.12' => 'matomo_keyword',
            'storefront.http_cache.ignored_url_parameters.13' => 'mtm_source',
            'storefront.http_cache.ignored_url_parameters.14' => 'matomo_source',
            'storefront.http_cache.ignored_url_parameters.15' => 'mtm_medium',
            'storefront.http_cache.ignored_url_parameters.16' => 'matomo_medium',
            'storefront.http_cache.ignored_url_parameters.17' => 'mtm_content',
            'storefront.http_cache.ignored_url_parameters.18' => 'matomo_content',
            'storefront.http_cache.ignored_url_parameters.19' => 'mtm_group',
            'storefront.http_cache.ignored_url_parameters.20' => 'matomo_group',
            'storefront.http_cache.ignored_url_parameters.21' => 'mtm_placement',
            'storefront.http_cache.ignored_url_parameters.22' => 'matomo_placement',
            'storefront.http_cache.ignored_url_parameters.23' => 'pixelId',
            'storefront.http_cache.ignored_url_parameters.24' => 'kwid',
            'storefront.http_cache.ignored_url_parameters.25' => 'kw',
            'storefront.http_cache.ignored_url_parameters.26' => 'chl',
            'storefront.http_cache.ignored_url_parameters.27' => 'dv',
            'storefront.http_cache.ignored_url_parameters.28' => 'nk',
            'storefront.http_cache.ignored_url_parameters.29' => 'pa',
            'storefront.http_cache.ignored_url_parameters.30' => 'camid',
            'storefront.http_cache.ignored_url_parameters.31' => 'adgid',
            'storefront.http_cache.ignored_url_parameters.32' => 'utm_term',
            'storefront.http_cache.ignored_url_parameters.33' => 'utm_source',
            'storefront.http_cache.ignored_url_parameters.34' => 'utm_medium',
            'storefront.http_cache.ignored_url_parameters.35' => 'utm_campaign',
            'storefront.http_cache.ignored_url_parameters.36' => 'utm_content',
            'storefront.http_cache.ignored_url_parameters.37' => 'cx',
            'storefront.http_cache.ignored_url_parameters.38' => 'ie',
            'storefront.http_cache.ignored_url_parameters.39' => 'cof',
            'storefront.http_cache.ignored_url_parameters.40' => 'siteurl',
            'storefront.http_cache.ignored_url_parameters.41' => '_ga',
            'storefront.http_cache.ignored_url_parameters.42' => 'adgroupid',
            'storefront.http_cache.ignored_url_parameters.43' => 'campaignid',
            'storefront.http_cache.ignored_url_parameters.44' => 'adid',
            'storefront.http_cache.ignored_url_parameters.45' => 'gclsrc',
            'storefront.http_cache.ignored_url_parameters.46' => 'gclid',
            'storefront.http_cache.ignored_url_parameters.47' => 'fbclid',
            'storefront.http_cache.ignored_url_parameters.48' => 'fb_action_ids',
            'storefront.http_cache.ignored_url_parameters.49' => 'fb_action_types',
            'storefront.http_cache.ignored_url_parameters.50' => 'fb_source',
            'storefront.http_cache.ignored_url_parameters.51' => 'mc_cid',
            'storefront.http_cache.ignored_url_parameters.52' => 'mc_eid',
            'storefront.http_cache.ignored_url_parameters.53' => '_bta_tid',
            'storefront.http_cache.ignored_url_parameters.54' => '_bta_c',
            'storefront.http_cache.ignored_url_parameters.55' => 'trk_contact',
            'storefront.http_cache.ignored_url_parameters.56' => 'trk_msg',
            'storefront.http_cache.ignored_url_parameters.57' => 'trk_module',
            'storefront.http_cache.ignored_url_parameters.58' => 'trk_sid',
            'storefront.http_cache.ignored_url_parameters.59' => 'gdfms',
            'storefront.http_cache.ignored_url_parameters.60' => 'gdftrk',
            'storefront.http_cache.ignored_url_parameters.61' => 'gdffi',
            'storefront.http_cache.ignored_url_parameters.62' => '_ke',
            'storefront.http_cache.ignored_url_parameters.63' => 'redirect_log_mongo_id',
            'storefront.http_cache.ignored_url_parameters.64' => 'redirect_mongo_id',
            'storefront.http_cache.ignored_url_parameters.65' => 'sb_referer_host',
            'storefront.http_cache.ignored_url_parameters.66' => 'mkwid',
            'storefront.http_cache.ignored_url_parameters.67' => 'pcrid',
            'storefront.http_cache.ignored_url_parameters.68' => 'ef_id',
            'storefront.http_cache.ignored_url_parameters.69' => 's_kwcid',
            'storefront.http_cache.ignored_url_parameters.70' => 'msclkid',
            'storefront.http_cache.ignored_url_parameters.71' => 'dm_i',
            'storefront.http_cache.ignored_url_parameters.72' => 'epik',
            'storefront.http_cache.ignored_url_parameters.73' => 'pp',
            'storefront.http_cache.stale_while_revalidate' => NULL,
            'storefront.http_cache.stale_if_error' => NULL,
            'storefront.theme' => [
                'config_loader_id' => 'Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader',
                'theme_path_builder_id' => 'Shopware\\Storefront\\Theme\\MD5ThemePathBuilder',
                'available_theme_provider' => 'Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider',
            ],
            'storefront.theme.config_loader_id' => 'Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader',
            'storefront.theme.theme_path_builder_id' => 'Shopware\\Storefront\\Theme\\MD5ThemePathBuilder',
            'storefront.theme.available_theme_provider' => 'Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider',
            'elasticsearch.administration.index_settings' => [
                'number_of_shards' => 3,
                'number_of_replicas' => 3,
                'mapping.total_fields.limit' => 50000,
                'mapping.nested_fields.limit' => 500,
                'mapping.nested_objects.limit' => 1000000,
            ],
            'elasticsearch.administration.index_settings.number_of_shards' => 3,
            'elasticsearch.administration.index_settings.number_of_replicas' => 3,
            'elasticsearch.administration.index_settings.mapping.total_fields.limit' => 50000,
            'elasticsearch.administration.index_settings.mapping.nested_fields.limit' => 500,
            'elasticsearch.administration.index_settings.mapping.nested_objects.limit' => 1000000,
            'elasticsearch.administration.analysis' => [
                'normalizer' => [
                    'sw_lowercase_normalizer' => [
                        'type' => 'custom',
                        'filter' => [
                            0 => 'lowercase',
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.analysis.normalizer' => [
                'sw_lowercase_normalizer' => [
                    'type' => 'custom',
                    'filter' => [
                        0 => 'lowercase',
                    ],
                ],
            ],
            'elasticsearch.administration.analysis.normalizer.sw_lowercase_normalizer' => [
                'type' => 'custom',
                'filter' => [
                    0 => 'lowercase',
                ],
            ],
            'elasticsearch.administration.analysis.normalizer.sw_lowercase_normalizer.type' => 'custom',
            'elasticsearch.administration.analysis.normalizer.sw_lowercase_normalizer.filter' => [
                0 => 'lowercase',
            ],
            'elasticsearch.administration.analysis.normalizer.sw_lowercase_normalizer.filter.0' => 'lowercase',
            'elasticsearch.administration.dynamic_templates' => [
                0 => [
                    'keywords' => [
                        'match_mapping_type' => 'string',
                        'mapping' => [
                            'type' => 'keyword',
                            'normalizer' => 'sw_lowercase_normalizer',
                            'fields' => [
                                'text' => [
                                    'type' => 'text',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0' => [
                'keywords' => [
                    'match_mapping_type' => 'string',
                    'mapping' => [
                        'type' => 'keyword',
                        'normalizer' => 'sw_lowercase_normalizer',
                        'fields' => [
                            'text' => [
                                'type' => 'text',
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords' => [
                'match_mapping_type' => 'string',
                'mapping' => [
                    'type' => 'keyword',
                    'normalizer' => 'sw_lowercase_normalizer',
                    'fields' => [
                        'text' => [
                            'type' => 'text',
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords.match_mapping_type' => 'string',
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping' => [
                'type' => 'keyword',
                'normalizer' => 'sw_lowercase_normalizer',
                'fields' => [
                    'text' => [
                        'type' => 'text',
                    ],
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.type' => 'keyword',
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.normalizer' => 'sw_lowercase_normalizer',
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.fields' => [
                'text' => [
                    'type' => 'text',
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.fields.text' => [
                'type' => 'text',
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.fields.text.type' => 'text',
            'elasticsearch.product' => [
                'custom_fields_mapping' => [

                ],
            ],
            'elasticsearch.product.custom_fields_mapping' => [

            ],
            'elasticsearch.ssl' => [
                'verify_server_cert' => true,
            ],
            'elasticsearch.ssl.verify_server_cert' => true,
            'elasticsearch.index_settings' => [
                'number_of_shards' => 3,
                'number_of_replicas' => 3,
                'mapping.total_fields.limit' => 50000,
                'mapping.nested_fields.limit' => 500,
                'mapping.nested_objects.limit' => 1000000,
            ],
            'elasticsearch.index_settings.number_of_shards' => 3,
            'elasticsearch.index_settings.number_of_replicas' => 3,
            'elasticsearch.index_settings.mapping.total_fields.limit' => 50000,
            'elasticsearch.index_settings.mapping.nested_fields.limit' => 500,
            'elasticsearch.index_settings.mapping.nested_objects.limit' => 1000000,
            'elasticsearch.analysis' => [
                'normalizer' => [
                    'sw_lowercase_normalizer' => [
                        'type' => 'custom',
                        'filter' => [
                            0 => 'lowercase',
                        ],
                    ],
                ],
                'analyzer' => [
                    'sw_ngram_analyzer' => [
                        'type' => 'custom',
                        'tokenizer' => 'whitespace',
                        'filter' => [
                            0 => 'lowercase',
                            1 => 'sw_ngram_filter',
                        ],
                    ],
                ],
                'filter' => [
                    'sw_ngram_filter' => [
                        'type' => 'ngram',
                        'min_gram' => 4,
                        'max_gram' => 5,
                    ],
                ],
            ],
            'elasticsearch.analysis.normalizer' => [
                'sw_lowercase_normalizer' => [
                    'type' => 'custom',
                    'filter' => [
                        0 => 'lowercase',
                    ],
                ],
            ],
            'elasticsearch.analysis.normalizer.sw_lowercase_normalizer' => [
                'type' => 'custom',
                'filter' => [
                    0 => 'lowercase',
                ],
            ],
            'elasticsearch.analysis.normalizer.sw_lowercase_normalizer.type' => 'custom',
            'elasticsearch.analysis.normalizer.sw_lowercase_normalizer.filter' => [
                0 => 'lowercase',
            ],
            'elasticsearch.analysis.normalizer.sw_lowercase_normalizer.filter.0' => 'lowercase',
            'elasticsearch.analysis.analyzer' => [
                'sw_ngram_analyzer' => [
                    'type' => 'custom',
                    'tokenizer' => 'whitespace',
                    'filter' => [
                        0 => 'lowercase',
                        1 => 'sw_ngram_filter',
                    ],
                ],
            ],
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer' => [
                'type' => 'custom',
                'tokenizer' => 'whitespace',
                'filter' => [
                    0 => 'lowercase',
                    1 => 'sw_ngram_filter',
                ],
            ],
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.type' => 'custom',
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.tokenizer' => 'whitespace',
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.filter' => [
                0 => 'lowercase',
                1 => 'sw_ngram_filter',
            ],
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.filter.0' => 'lowercase',
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.filter.1' => 'sw_ngram_filter',
            'elasticsearch.analysis.filter' => [
                'sw_ngram_filter' => [
                    'type' => 'ngram',
                    'min_gram' => 4,
                    'max_gram' => 5,
                ],
            ],
            'elasticsearch.analysis.filter.sw_ngram_filter' => [
                'type' => 'ngram',
                'min_gram' => 4,
                'max_gram' => 5,
            ],
            'elasticsearch.analysis.filter.sw_ngram_filter.type' => 'ngram',
            'elasticsearch.analysis.filter.sw_ngram_filter.min_gram' => 4,
            'elasticsearch.analysis.filter.sw_ngram_filter.max_gram' => 5,
            'elasticsearch.dynamic_templates' => [
                0 => [
                    'keywords' => [
                        'match_mapping_type' => 'string',
                        'mapping' => [
                            'type' => 'keyword',
                            'normalizer' => 'sw_lowercase_normalizer',
                            'fields' => [
                                'text' => [
                                    'type' => 'text',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.dynamic_templates.0' => [
                'keywords' => [
                    'match_mapping_type' => 'string',
                    'mapping' => [
                        'type' => 'keyword',
                        'normalizer' => 'sw_lowercase_normalizer',
                        'fields' => [
                            'text' => [
                                'type' => 'text',
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.dynamic_templates.0.keywords' => [
                'match_mapping_type' => 'string',
                'mapping' => [
                    'type' => 'keyword',
                    'normalizer' => 'sw_lowercase_normalizer',
                    'fields' => [
                        'text' => [
                            'type' => 'text',
                        ],
                    ],
                ],
            ],
            'elasticsearch.dynamic_templates.0.keywords.match_mapping_type' => 'string',
            'elasticsearch.dynamic_templates.0.keywords.mapping' => [
                'type' => 'keyword',
                'normalizer' => 'sw_lowercase_normalizer',
                'fields' => [
                    'text' => [
                        'type' => 'text',
                    ],
                ],
            ],
            'elasticsearch.dynamic_templates.0.keywords.mapping.type' => 'keyword',
            'elasticsearch.dynamic_templates.0.keywords.mapping.normalizer' => 'sw_lowercase_normalizer',
            'elasticsearch.dynamic_templates.0.keywords.mapping.fields' => [
                'text' => [
                    'type' => 'text',
                ],
            ],
            'elasticsearch.dynamic_templates.0.keywords.mapping.fields.text' => [
                'type' => 'text',
            ],
            'elasticsearch.dynamic_templates.0.keywords.mapping.fields.text.type' => 'text',
            'elasticsearch.logger_level' => 400,
            'shopware.filesystem.theme.url' => '',
            'shopware.filesystem.theme.type' => 'local',
            'shopware.filesystem.theme.config' => [
                'root' => (\dirname(__DIR__, 4).'/public'),
            ],
            'shopware.filesystem.asset.url' => '',
            'shopware.filesystem.asset.type' => 'local',
            'shopware.filesystem.asset.config' => [
                'root' => (\dirname(__DIR__, 4).'/public'),
            ],
            'shopware.filesystem.sitemap.url' => '',
            'shopware.filesystem.sitemap.type' => 'local',
            'shopware.filesystem.sitemap.config' => [
                'root' => (\dirname(__DIR__, 4).'/public'),
            ],
            'shopware.filesystem.public.url' => '',
            'console.command.ids' => [

            ],
        ];
    }

    protected function throw($message)
    {
        throw new RuntimeException($message);
    }
}
